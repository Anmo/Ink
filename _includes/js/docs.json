{
	"kind": "module",
	"modules": [
		{
			"kind": "module",
			"name": "Ink_1",
			"file": "src/js/Ink/1/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink_1",
					"text": "Ink Core.\nThis module provides the necessary methods to create and load the modules using Ink.",
					"file": "src/js/Ink/1/lib.js",
					"functions": [
						{
							"kind": "function",
							"name": "getPath",
							"file": "src/js/Ink/1/lib.js",
							"text": "Get the full path of a module.\nThis method looks up the paths given in setPath (and ultimately the default Ink's path).",
							"params": [
								{
									"kind": "param",
									"name": "key",
									"type": "String",
									"isFirstLevel": true,
									"description": "Name of the module you want to get the path"
								},
								{
									"kind": "param",
									"name": "noLib",
									"type": "Boolean",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Flag to skip appending 'lib.js' to the returned path."
								}
							]
						},
						{
							"kind": "function",
							"name": "setPath",
							"file": "src/js/Ink/1/lib.js",
							"text": "Sets the URL path for a namespace.\nUse this to customize where requireModules and createModule will load dependencies from.\nThis can be useful to set your own CDN for dynamic module loading or simply to change your module folder structure",
							"params": [
								{
									"kind": "param",
									"name": "key",
									"type": "String",
									"isFirstLevel": true,
									"description": "Module or namespace"
								},
								{
									"kind": "param",
									"name": "rootURI",
									"type": "String",
									"isFirstLevel": true,
									"description": "Base URL path and schema to be appended to the module or namespace"
								}
							],
							"examples": [
								"\n     Ink.setPath('Ink', 'http://my-cdn/Ink/');\n     Ink.setPath('Lol', 'http://my-cdn/Lol/');\n\n     // Loads from http://my-cdn/Ink/Dom/Whatever/lib.js\n     Ink.requireModules(['Ink.Dom.Whatever'], function () { ... });\n     // Loads from http://my-cdn/Lol/Whatever/lib.js\n     Ink.requireModules(['Lol.Whatever'], function () { ... });\n"
							]
						},
						{
							"kind": "function",
							"name": "loadScript",
							"file": "src/js/Ink/1/lib.js",
							"text": "Loads a script URL.\nThis creates a `script` tag in the `head` of the document.\nReports errors by listening to 'error' and 'readystatechange' events.",
							"params": [
								{
									"kind": "param",
									"name": "uri",
									"type": "String",
									"isFirstLevel": true,
									"description": "Can be an external URL or a module name"
								},
								{
									"kind": "param",
									"name": "contentType",
									"type": "String",
									"isOptional": true,
									"defaultValue": "'text/javascript'",
									"isFirstLevel": true,
									"description": "The `type` attribute of the new script tag."
								}
							]
						},
						{
							"kind": "function",
							"name": "namespace",
							"file": "src/js/Ink/1/lib.js",
							"text": "Defines a module namespace.",
							"params": [
								{
									"kind": "param",
									"name": "ns",
									"type": "String",
									"isFirstLevel": true,
									"description": "Namespace to define."
								},
								{
									"kind": "param",
									"name": "returnParentAndKey",
									"type": "Boolean",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Flag to change the return value to an array containing the namespace parent and the namespace key"
								}
							],
							"return": {
								"kind": "return",
								"type": "Object|Array",
								"description": "Returns the created namespace object"
							}
						},
						{
							"kind": "function",
							"name": "getModule",
							"file": "src/js/Ink/1/lib.js",
							"text": "Loads a module.\nA synchronous method to get the module from the registry. It assumes the module is defined and loaded already!",
							"params": [
								{
									"kind": "param",
									"name": "mod",
									"type": "String",
									"isFirstLevel": true,
									"description": "Module name"
								},
								{
									"kind": "param",
									"name": "version",
									"type": "Number",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Version number of the module"
								}
							],
							"return": {
								"kind": "return",
								"type": "Object|Function",
								"description": "Module object or function, depending how the module is defined"
							}
						},
						{
							"kind": "function",
							"name": "createModule",
							"file": "src/js/Ink/1/lib.js",
							"text": "Creates a new module. \nUse this to wrap your code and benefit from the module loading used throughout the Ink library",
							"params": [
								{
									"kind": "param",
									"name": "mod",
									"type": "String",
									"isFirstLevel": true,
									"description": "Module name, separated by dots. Like Ink.Dom.Selector, Ink.UI.Modal"
								},
								{
									"kind": "param",
									"name": "version",
									"type": "Number",
									"isFirstLevel": true,
									"description": "Version number"
								},
								{
									"kind": "param",
									"name": "deps",
									"type": "Array",
									"isFirstLevel": true,
									"description": "Array of module names which are dependencies of the module being created. The order in which they are passed here will define the order they will be passed to the callback function."
								},
								{
									"kind": "param",
									"name": "modFn",
									"type": "Function",
									"isFirstLevel": true,
									"description": "The callback function to be executed when all the dependencies are resolved. The dependencies are passed as arguments, in the same order they were declared. The function itself should return the module."
								}
							],
							"samples": [
								"Ink_1_createModule.html"
							]
						},
						{
							"kind": "function",
							"name": "requireModules",
							"file": "src/js/Ink/1/lib.js",
							"text": "Requires modules asynchronously \nUse this to get modules, even if they're not loaded yet",
							"params": [
								{
									"kind": "param",
									"name": "deps",
									"type": "Array",
									"isFirstLevel": true,
									"description": "Array of module names. The order in which they are passed here will define the order they will be passed to the callback function."
								},
								{
									"kind": "param",
									"name": "cbFn",
									"type": "Function",
									"isFirstLevel": true,
									"description": "The callback function to be executed when all the dependencies are resolved. The dependencies are passed as arguments, in the same order they were declared."
								}
							],
							"samples": [
								"Ink_1_requireModules.html"
							]
						},
						{
							"kind": "function",
							"name": "getModulesLoadOrder",
							"file": "src/js/Ink/1/lib.js",
							"text": "Lists loaded module names.\nThe list is ordered by loaded time (oldest module comes first)",
							"params": [],
							"return": {
								"kind": "return",
								"type": "Array",
								"description": "returns the order in which modules were resolved and correctly loaded"
							}
						},
						{
							"kind": "function",
							"name": "getModuleScripts",
							"file": "src/js/Ink/1/lib.js",
							"text": "Builds the markup needed to load the modules.\nThis method builds the script tags needed to load the currently used modules",
							"params": [],
							"return": {
								"kind": "return",
								"type": "String",
								"description": "The script markup"
							}
						},
						{
							"kind": "function",
							"name": "createExt",
							"file": "src/js/Ink/1/lib.js",
							"text": "Creates an Ink.Ext module\n\nDoes exactly the same as createModule but creates the module in the Ink.Ext namespace",
							"params": [
								{
									"kind": "param",
									"name": "moduleName",
									"type": "String",
									"isFirstLevel": true,
									"description": "Extension name"
								},
								{
									"kind": "param",
									"name": "version",
									"type": "String",
									"isFirstLevel": true,
									"description": "Extension version"
								},
								{
									"kind": "param",
									"name": "dependencies",
									"type": "Array",
									"isFirstLevel": true,
									"description": "Extension dependencies"
								},
								{
									"kind": "param",
									"name": "modFn",
									"type": "Function",
									"isFirstLevel": true,
									"description": "Function returning the extension"
								}
							],
							"samples": [
								"Ink_1_createExt.html"
							]
						},
						{
							"kind": "function",
							"name": "bind",
							"file": "src/js/Ink/1/lib.js",
							"text": "Function.prototype.bind alternative.\nCreates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.",
							"params": [
								{
									"kind": "param",
									"name": "fn",
									"type": "Function",
									"isFirstLevel": true,
									"description": "The function"
								},
								{
									"kind": "param",
									"name": "context",
									"type": "Object",
									"isFirstLevel": true,
									"description": "The value to be passed as the this parameter to the target function when the bound function is called. If used as false, it preserves the original context and just binds the arguments."
								},
								{
									"kind": "param",
									"name": "args*",
									"type": "Any",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Additional arguments will be sent to the original function as prefix arguments."
								}
							],
							"return": {
								"kind": "return",
								"type": "Function"
							},
							"samples": [
								"Ink_1_bind.html"
							]
						},
						{
							"kind": "function",
							"name": "bindMethod",
							"file": "src/js/Ink/1/lib.js",
							"text": "Function.prototype.bind alternative for class methods\nCreates a new function that, when called, has this k",
							"params": [
								{
									"kind": "param",
									"name": "object",
									"type": "Object",
									"isFirstLevel": true,
									"description": "The object that contains the method to bind"
								},
								{
									"kind": "param",
									"name": "methodName",
									"type": "String",
									"isFirstLevel": true,
									"description": "The name of the method that will be bound"
								},
								{
									"kind": "param",
									"name": "args*",
									"type": "Any",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Additional arguments will be sent to the new method as prefix arguments."
								}
							],
							"return": {
								"kind": "return",
								"type": "Function"
							},
							"samples": [
								"Ink_1_bindMethod.html"
							],
							"examples": [
								"\n // Build a function which calls Ink.Dom.Element.remove on an element.\n var removeMyElem = Ink.bindMethod(Ink.Dom.Element, 'remove', someElement);\n\n removeMyElem();  // no arguments, nor Ink.Dom.Element, needed\n",
								"\n // (comparison with using Ink.bind to the same effect).\n // The following two calls are equivalent\n\n Ink.bind(this.remove, this, myElem);\n Ink.bindMethod(this, 'remove', myElem);\n"
							]
						},
						{
							"kind": "function",
							"name": "bindEvent",
							"file": "src/js/Ink/1/lib.js",
							"text": "Function.prototype.bind alternative for event handlers.\nSame as bind but keeps first argument of the call the original event.\nSet \"context\" to `false` to preserve the original context of the function and just bind the arguments.",
							"params": [
								{
									"kind": "param",
									"name": "fn",
									"type": "Function",
									"isFirstLevel": true,
									"description": "The function"
								},
								{
									"kind": "param",
									"name": "context",
									"type": "Object",
									"isFirstLevel": true,
									"description": "The value to be passed as the this parameter to the target"
								},
								{
									"kind": "param",
									"name": "args*",
									"type": "Any",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Additional arguments will be sent to the original function as prefix arguments"
								}
							],
							"return": {
								"kind": "return",
								"type": "Function"
							},
							"samples": [
								"Ink_1_bindEvent.html"
							]
						},
						{
							"kind": "function",
							"name": "i",
							"file": "src/js/Ink/1/lib.js",
							"text": "Alias to document.getElementById",
							"params": [
								{
									"kind": "param",
									"name": "id",
									"type": "String",
									"isFirstLevel": true,
									"description": "Element ID"
								}
							],
							"return": {
								"kind": "return",
								"type": "DOMElement"
							},
							"samples": [
								"Ink_1_i.html"
							]
						},
						{
							"kind": "function",
							"name": "ss",
							"file": "src/js/Ink/1/lib.js",
							"text": "Alias for Ink.Dom.Selector",
							"params": [
								{
									"kind": "param",
									"name": "rule",
									"type": "String",
									"isFirstLevel": true
								},
								{
									"kind": "param",
									"name": "from",
									"type": "DOMElement",
									"isOptional": true,
									"isFirstLevel": true
								}
							],
							"return": {
								"kind": "return",
								"type": "Array",
								"description": "array of DOMElements"
							},
							"samples": [
								"Ink_1_ss.html"
							]
						},
						{
							"kind": "function",
							"name": "s",
							"file": "src/js/Ink/1/lib.js",
							"text": "Alias for Ink.Dom.Selector first result",
							"params": [
								{
									"kind": "param",
									"name": "rule",
									"type": "String",
									"isFirstLevel": true,
									"description": "Selector string"
								},
								{
									"kind": "param",
									"name": "from",
									"type": "DOMElement",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Context element. If set to a DOM element, the rule will only look for descendants of this DOM Element."
								}
							],
							"return": {
								"kind": "return",
								"type": "DOMElement"
							},
							"samples": [
								"Ink_1_s.html"
							]
						},
						{
							"kind": "function",
							"name": "extendObj",
							"file": "src/js/Ink/1/lib.js",
							"text": "Extends an object with another\nCopy all of the properties in one or more source objects over to the destination object, and return the destination object. It's in-order, so the last source will override properties of the same name in previous arguments.",
							"params": [
								{
									"kind": "param",
									"name": "destination",
									"type": "Object",
									"isFirstLevel": true,
									"description": "The object that will receive the new/updated properties"
								},
								{
									"kind": "param",
									"name": "source",
									"type": "Object",
									"isFirstLevel": true,
									"description": "The object whose properties will be copied over to the destination object"
								},
								{
									"kind": "param",
									"name": "args*",
									"type": "Object",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Additional source objects. The last source will override properties of the same name in the previous defined sources"
								}
							],
							"return": {
								"kind": "return",
								"description": "destination object, enriched with defaults from the sources"
							},
							"samples": [
								"Ink_1_extendObj.html"
							]
						},
						{
							"kind": "function",
							"name": "log",
							"file": "src/js/Ink/1/lib.js",
							"text": "Calls native console.log if available.",
							"params": [
								{
									"kind": "param",
									"name": "args*",
									"type": "Any",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Arguments to be evaluated"
								}
							],
							"samples": [
								"Ink_1_log.html"
							]
						},
						{
							"kind": "function",
							"name": "warn",
							"file": "src/js/Ink/1/lib.js",
							"text": "Calls native console.warn if available.",
							"params": [
								{
									"kind": "param",
									"name": "args*",
									"type": "Any",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Arguments to be evaluated"
								}
							],
							"samples": [
								"Ink_1_warn.html"
							]
						},
						{
							"kind": "function",
							"name": "error",
							"file": "src/js/Ink/1/lib.js",
							"text": "Calls native console.error if available.",
							"params": [
								{
									"kind": "param",
									"name": "args*",
									"type": "Any",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Arguments to be evaluated"
								}
							],
							"samples": [
								"Ink_1_error.html"
							]
						}
					],
					"attributes": [],
					"isNamespace": true
				}
			],
			"functions": [],
			"attributes": [],
			"uses": [
				"requireModules",
				"getModulesLoadOrder",
				"createModule",
				"bind",
				"Ink.Dom.Selector.select",
				"Ink.Dom.Selector.select"
			]
		},
		{
			"kind": "module",
			"name": "Ink.Autoload",
			"file": "src/js/Ink/Autoload/1/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink.Autoload",
					"file": "src/js/Ink/Autoload/1/lib.js",
					"functions": [],
					"attributes": [],
					"isNamespace": true,
					"static": true
				}
			],
			"functions": [],
			"attributes": [],
			"uses": [],
			"version": "1"
		},
		{
			"kind": "module",
			"name": "Ink.Dom.Browser_1",
			"file": "src/js/Ink/Dom/Browser/1/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink.Dom.Browser",
					"file": "src/js/Ink/Dom/Browser/1/lib.js",
					"functions": [
						{
							"kind": "function",
							"name": "init",
							"file": "src/js/Ink/Dom/Browser/1/lib.js",
							"text": "Initialization function for the Browser object.\n\nIs called automatically when this module is loaded, and calls setDimensions, setBrowser and setReferrer.",
							"params": []
						},
						{
							"kind": "function",
							"name": "setDimensions",
							"file": "src/js/Ink/Dom/Browser/1/lib.js",
							"text": "Retrieves and stores window dimensions in this object. Called automatically when this module is loaded.",
							"params": []
						},
						{
							"kind": "function",
							"name": "setReferrer",
							"file": "src/js/Ink/Dom/Browser/1/lib.js",
							"text": "Stores the referrer. Called automatically when this module is loaded.",
							"params": []
						},
						{
							"kind": "function",
							"name": "detectBrowser",
							"file": "src/js/Ink/Dom/Browser/1/lib.js",
							"text": "Detects the browser and stores the found properties. Called automatically when this module is loaded.",
							"params": []
						},
						{
							"kind": "function",
							"name": "debug",
							"file": "src/js/Ink/Dom/Browser/1/lib.js",
							"text": "Debug function which displays browser (and Ink.Dom.Browser) information as an alert message.",
							"params": [],
							"examples": [
								"\n \n The following code\n\n     Ink.requireModules(['Ink.Dom.Browser_1'], function (Browser) {\n         Browser.debug();\n     });\n\n Alerts (On Firefox 22):\n\n     known browsers: (ie, gecko, opera, safari, konqueror) \n     false,true,false,false,false\n     model -> firefox\n     version -> 22.0\n     \n     original UA -> Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:22.0) Gecko/20100101 Firefox/22.0\n"
							]
						}
					],
					"attributes": [
						{
							"kind": "attribute",
							"name": "IE",
							"text": "True if the browser is Internet Explorer",
							"type": "Boolean",
							"static": true
						},
						{
							"kind": "attribute",
							"name": "GECKO",
							"text": "True if the browser is Gecko based",
							"type": "Boolean",
							"static": true
						},
						{
							"kind": "attribute",
							"name": "OPERA",
							"text": "True if the browser is Opera",
							"type": "Boolean",
							"static": true
						},
						{
							"kind": "attribute",
							"name": "SAFARI",
							"text": "True if the browser is Safari",
							"type": "Boolean",
							"static": true
						},
						{
							"kind": "attribute",
							"name": "KONQUEROR",
							"text": "True if the browser is Konqueror",
							"type": "Boolean",
							"static": true
						},
						{
							"kind": "attribute",
							"name": "CHROME",
							"text": "True if browser is Chrome",
							"type": "Boolean",
							"static": true
						},
						{
							"kind": "attribute",
							"name": "model",
							"text": "The specific browser model.\nFalse if it is unavailable.",
							"type": "Boolean|String",
							"static": true
						},
						{
							"kind": "attribute",
							"name": "version",
							"text": "The browser version.\nFalse if it is unavailable.",
							"type": "Boolean|String",
							"static": true
						},
						{
							"kind": "attribute",
							"name": "userAgent",
							"text": "The user agent string.\nFalse if it is unavailable.",
							"type": "Boolean|String",
							"static": true
						}
					],
					"isNamespace": true,
					"version": "1",
					"static": true,
					"examples": [
						"\n    <script>\n        Ink.requireModules(['Ink.Dom.Browser_1'],function( InkBrowser ){\n            if( InkBrowser.CHROME ){\n                console.log( 'This is a CHROME browser.' );\n            }\n        });\n    </script>\n"
					]
				}
			],
			"functions": [],
			"attributes": [],
			"uses": [],
			"version": "1\nBrowser Detection and User Agent sniffing"
		},
		{
			"kind": "module",
			"name": "Ink.Dom.Css_1",
			"file": "src/js/Ink/Dom/Css/1/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink.Dom.Css",
					"file": "src/js/Ink/Dom/Css/1/lib.js",
					"functions": [
						{
							"kind": "function",
							"name": "addRemoveClassName",
							"file": "src/js/Ink/Dom/Css/1/lib.js",
							"text": "Adds of removes a class.\nDepending on addRemState, this method either adds a class if it's true or removes if if false.",
							"params": [
								{
									"kind": "param",
									"name": "elm",
									"type": "DOMElement|string",
									"isFirstLevel": true,
									"description": "DOM element or element id"
								},
								{
									"kind": "param",
									"name": "className",
									"type": "string",
									"isFirstLevel": true,
									"description": "class name to add or remove."
								},
								{
									"kind": "param",
									"name": "addRemState",
									"type": "boolean",
									"isFirstLevel": true,
									"description": "Whether to add or remove. `true` to add, `false` to remove."
								}
							],
							"examples": [
								"\n     Ink.requireModules(['Ink.Dom.Css_1'], function (Css) {\n         Css.addRemoveClassName(myElm, 'classss', true);  // Adds the `classss` class.\n         Css.addRemoveClassName(myElm, 'classss', false);  // Removes the `classss` class.\n     });\n"
							]
						},
						{
							"kind": "function",
							"name": "addClassName",
							"file": "src/js/Ink/Dom/Css/1/lib.js",
							"text": "Adds a class to a given element",
							"params": [
								{
									"kind": "param",
									"name": "elm",
									"type": "DOMElement|String",
									"isFirstLevel": true,
									"description": "DOM element or element id"
								},
								{
									"kind": "param",
									"name": "className",
									"type": "String|Array",
									"isFirstLevel": true,
									"description": "Classes"
								}
							]
						},
						{
							"kind": "function",
							"name": "removeClassName",
							"file": "src/js/Ink/Dom/Css/1/lib.js",
							"text": "Removes a class from a given element",
							"params": [
								{
									"kind": "param",
									"name": "elm",
									"type": "DOMElement|String",
									"isFirstLevel": true,
									"description": "DOM element or element id"
								},
								{
									"kind": "param",
									"name": "className",
									"type": "String|Array",
									"isFirstLevel": true,
									"description": "Class names to remove. You can either use a space separated string of classnames, comma-separated list or an array"
								}
							]
						},
						{
							"kind": "function",
							"name": "setClassName",
							"file": "src/js/Ink/Dom/Css/1/lib.js",
							"text": "Alias to addRemoveClassName. \nUtility function, saves many if/elses.",
							"params": [
								{
									"kind": "param",
									"name": "elm",
									"type": "DOMElement|String",
									"isFirstLevel": true,
									"description": "DOM element or element id"
								},
								{
									"kind": "param",
									"name": "className",
									"type": "String|Array",
									"isFirstLevel": true,
									"description": "Class names to add\\remove. Comma separated, space separated or simply an Array"
								},
								{
									"kind": "param",
									"name": "add",
									"type": "Boolean",
									"isOptional": true,
									"defaultValue": "false",
									"isFirstLevel": true,
									"description": "Flag to switch behavior from removal to addition. true to add, false to remove"
								}
							]
						},
						{
							"kind": "function",
							"name": "hasClassName",
							"file": "src/js/Ink/Dom/Css/1/lib.js",
							"text": "Checks if an element has a class.\nThis method verifies if an element has ONE of a list of classes. If the last argument is flagged as true, instead checks if the element has ALL the classes",
							"params": [
								{
									"kind": "param",
									"name": "elm",
									"type": "DOMElement|String",
									"isFirstLevel": true,
									"description": "DOM element or element id"
								},
								{
									"kind": "param",
									"name": "className",
									"type": "String|Array",
									"isFirstLevel": true,
									"description": "Class names to test"
								},
								{
									"kind": "param",
									"name": "all",
									"type": "Boolean",
									"isOptional": true,
									"defaultValue": "false",
									"isFirstLevel": true,
									"description": "If flagged as true, it will check if the element contains ALL the CSS classes"
								}
							],
							"return": {
								"kind": "return",
								"type": "Boolean",
								"description": "true if a given class is applied to a given element"
							}
						},
						{
							"kind": "function",
							"name": "blinkClass",
							"file": "src/js/Ink/Dom/Css/1/lib.js",
							"text": "Blinks a class from an element\nAdd and removes the class from the element with a timeout, so it blinks",
							"params": [
								{
									"kind": "param",
									"name": "elm",
									"type": "DOMElement|String",
									"isFirstLevel": true,
									"description": "DOM element or element id"
								},
								{
									"kind": "param",
									"name": "className",
									"type": "String|Array",
									"isFirstLevel": true,
									"description": "Class name(s) to blink"
								},
								{
									"kind": "param",
									"name": "timeout",
									"type": "Boolean",
									"isFirstLevel": true,
									"description": "timeout in ms between adding and removing, default 100 ms"
								},
								{
									"kind": "param",
									"name": "negate",
									"type": "Boolean",
									"isFirstLevel": true,
									"description": "is true, class is removed then added"
								}
							]
						},
						{
							"kind": "function",
							"name": "toggleClassName",
							"file": "src/js/Ink/Dom/Css/1/lib.js",
							"text": "Toggles a class name from a given element",
							"params": [
								{
									"kind": "param",
									"name": "elm",
									"type": "DOMElement|String",
									"isFirstLevel": true,
									"description": "DOM element or element id"
								},
								{
									"kind": "param",
									"name": "className",
									"type": "String",
									"isFirstLevel": true,
									"description": "Class name"
								},
								{
									"kind": "param",
									"name": "forceAdd",
									"type": "Boolean",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Flag to force adding the the classe names if they don't exist yet."
								}
							]
						},
						{
							"kind": "function",
							"name": "setOpacity",
							"file": "src/js/Ink/Dom/Css/1/lib.js",
							"text": "Sets the opacity of given element",
							"params": [
								{
									"kind": "param",
									"name": "elm",
									"type": "DOMElement|String",
									"isFirstLevel": true,
									"description": "DOM element or element id"
								},
								{
									"kind": "param",
									"name": "value",
									"type": "Number",
									"isFirstLevel": true,
									"description": "allows 0 to 1(default mode decimal) or percentage (warning using 0 or 1 will reset to default mode)"
								}
							]
						},
						{
							"kind": "function",
							"name": "_camelCase",
							"file": "src/js/Ink/Dom/Css/1/lib.js",
							"text": "Converts a css property name to a string in camelcase to be used with CSSStyleDeclaration.",
							"params": [
								{
									"kind": "param",
									"name": "str",
									"type": "String",
									"isFirstLevel": true,
									"description": "String to convert"
								}
							],
							"private": true,
							"return": {
								"kind": "return",
								"type": "String",
								"description": "Converted string"
							}
						},
						{
							"kind": "function",
							"name": "getStyle",
							"file": "src/js/Ink/Dom/Css/1/lib.js",
							"text": "Gets the value for an element's style attribute",
							"params": [
								{
									"kind": "param",
									"name": "elm",
									"type": "DOMElement|String",
									"isFirstLevel": true,
									"description": "DOM element or element id"
								},
								{
									"kind": "param",
									"name": "style",
									"type": "String",
									"isFirstLevel": true,
									"description": "Which css attribute to fetch"
								}
							],
							"return": {
								"kind": "return",
								"description": "Style value"
							}
						},
						{
							"kind": "function",
							"name": "setStyle",
							"file": "src/js/Ink/Dom/Css/1/lib.js",
							"text": "Adds CSS rules to an element's style attribute.",
							"params": [
								{
									"kind": "param",
									"name": "elm",
									"type": "DOMElement|String",
									"isFirstLevel": true,
									"description": "DOM element or element id"
								},
								{
									"kind": "param",
									"name": "style",
									"type": "String",
									"isFirstLevel": true,
									"description": "Which css attribute to set"
								}
							],
							"examples": [
								"\n    <a href=\"#\" class=\"change-color\">Change his color</a>\n    <p class=\"him\">\"He\" is me</p>\n    <script type=\"text/javascript\">\n        Ink.requireModules(['Ink.Dom.Css_1', 'Ink.Dom.Event_1', 'Ink.Dom.Selector_1'], function (Css, InkEvent, Selector) {\n            var btn = Selector.select('.change-color')[0];\n            var other = Selector.select('.him')[0];\n            InkEvent.observe(btn, 'click', function () {\n                Css.setStyle(other, 'background-color: black');\n                Css.setStyle(other, 'color: white');\n            });\n        });\n    </script>\n\n"
							]
						},
						{
							"kind": "function",
							"name": "show",
							"file": "src/js/Ink/Dom/Css/1/lib.js",
							"text": "Shows an element.\nInternally it unsets the display property of an element. You can force a specific display property using forceDisplayProperty",
							"params": [
								{
									"kind": "param",
									"name": "elm",
									"type": "DOMElement|String",
									"isFirstLevel": true,
									"description": "DOM element or element id"
								},
								{
									"kind": "param",
									"name": "forceDisplayProperty",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Css display property to apply on show"
								}
							]
						},
						{
							"kind": "function",
							"name": "hide",
							"file": "src/js/Ink/Dom/Css/1/lib.js",
							"text": "Hides an element.",
							"params": [
								{
									"kind": "param",
									"name": "elm",
									"type": "DOMElement|String",
									"isFirstLevel": true,
									"description": "DOM element or element id"
								}
							]
						},
						{
							"kind": "function",
							"name": "showHide",
							"file": "src/js/Ink/Dom/Css/1/lib.js",
							"text": "Shows or hides an element.\nIf the show parameter is true, it shows the element. Otherwise, hides it.",
							"params": [
								{
									"kind": "param",
									"name": "elm",
									"type": "DOMElement|String",
									"isFirstLevel": true,
									"description": "DOM element or element id"
								},
								{
									"kind": "param",
									"name": "show",
									"type": "boolean",
									"isOptional": true,
									"defaultValue": "false",
									"isFirstLevel": true,
									"description": "Whether to show or hide `elm`."
								}
							]
						},
						{
							"kind": "function",
							"name": "toggle",
							"file": "src/js/Ink/Dom/Css/1/lib.js",
							"text": "Toggles an element visibility.",
							"params": [
								{
									"kind": "param",
									"name": "elm",
									"type": "DOMElement|String",
									"isFirstLevel": true,
									"description": "DOM element or element id"
								},
								{
									"kind": "param",
									"name": "forceShow",
									"type": "Boolean",
									"isFirstLevel": true,
									"description": "Forces showing if element is hidden"
								}
							]
						},
						{
							"kind": "function",
							"name": "appendStyleTag",
							"file": "src/js/Ink/Dom/Css/1/lib.js",
							"text": "Injects style tags with rules to the page.",
							"params": [
								{
									"kind": "param",
									"name": "selector",
									"type": "String",
									"isFirstLevel": true,
									"description": "The css selector for the rule"
								},
								{
									"kind": "param",
									"name": "style",
									"type": "String",
									"isFirstLevel": true,
									"description": "The content of the style rule"
								},
								{
									"kind": "param",
									"name": "options",
									"type": "Object",
									"isFirstLevel": true,
									"description": "Options for the tag"
								},
								{
									"kind": "param",
									"name": "options.type",
									"type": "String",
									"isOptional": true,
									"defaultValue": "'text/css'",
									"isFirstLevel": false,
									"description": "File type"
								},
								{
									"kind": "param",
									"name": "options.force",
									"type": "Boolean",
									"isOptional": true,
									"defaultValue": "false",
									"isFirstLevel": false,
									"description": "If true, the style tag will be appended to end of head"
								}
							]
						},
						{
							"kind": "function",
							"name": "appendStylesheet",
							"file": "src/js/Ink/Dom/Css/1/lib.js",
							"text": "Injects an external link tag.\nThis method add a stylesheet to the head of a page",
							"params": [
								{
									"kind": "param",
									"name": "path",
									"type": "String",
									"isFirstLevel": true,
									"description": "File path"
								},
								{
									"kind": "param",
									"name": "options",
									"type": "Object",
									"isFirstLevel": true,
									"description": "Options for the tag"
								},
								{
									"kind": "param",
									"name": "options.media",
									"type": "String",
									"isOptional": true,
									"defaultValue": "'screen'",
									"isFirstLevel": false,
									"description": "Media type"
								},
								{
									"kind": "param",
									"name": "options.type",
									"type": "String",
									"isOptional": true,
									"defaultValue": "'text/css'",
									"isFirstLevel": false,
									"description": "File type"
								},
								{
									"kind": "param",
									"name": "options.force",
									"type": "Boolean",
									"isOptional": true,
									"defaultValue": "false",
									"isFirstLevel": false,
									"description": "If true, tag will be appended to end of head"
								}
							]
						},
						{
							"kind": "function",
							"name": "appendStylesheetCb",
							"file": "src/js/Ink/Dom/Css/1/lib.js",
							"text": "Injects an external link tag.\nLoads CSS via LINK element inclusion in HEAD (skips append if already there)\n\nWorks similarly to appendStylesheet but:\n  a) supports all browsers;\n  b) supports optional callback which gets invoked once the CSS has been applied",
							"params": [
								{
									"kind": "param",
									"name": "cssURI",
									"type": "String",
									"isFirstLevel": true,
									"description": "URI of the CSS to load, if empty ignores and just calls back directly"
								},
								{
									"kind": "param",
									"name": "callback",
									"type": "Function(cssURI)",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "optional callback which will be called once the CSS is loaded"
								}
							]
						},
						{
							"kind": "function",
							"name": "decToHex",
							"file": "src/js/Ink/Dom/Css/1/lib.js",
							"text": "Converts decimal to hexadecimal values\nUseful to convert colors to their hexadecimal representation.",
							"params": [
								{
									"kind": "param",
									"name": "dec",
									"type": "String",
									"isFirstLevel": true,
									"description": "Either a single decimal value, an rgb(r, g, b) string or an Object with r, g and b properties"
								}
							],
							"return": {
								"kind": "return",
								"description": "Hexadecimal value"
							}
						},
						{
							"kind": "function",
							"name": "hexToDec",
							"file": "src/js/Ink/Dom/Css/1/lib.js",
							"text": "Converts hexadecimal values to decimal\nUseful to use with CSS colors",
							"params": [
								{
									"kind": "param",
									"name": "hex",
									"type": "String",
									"isFirstLevel": true,
									"description": "hexadecimal Value with 6, 3, 2 or 1 characters"
								}
							],
							"return": {
								"kind": "return",
								"type": "Number",
								"description": "Object with properties r, g, b if length of number is >= 3 or decimal value instead."
							}
						},
						{
							"kind": "function",
							"name": "getPropertyFromStylesheet",
							"file": "src/js/Ink/Dom/Css/1/lib.js",
							"text": "Get a single property from a stylesheet.\nUse this to obtain the value of a CSS property (searched from loaded CSS documents)",
							"params": [
								{
									"kind": "param",
									"name": "selector",
									"type": "String",
									"isFirstLevel": true,
									"description": "a CSS rule. must be an exact match"
								},
								{
									"kind": "param",
									"name": "property",
									"type": "String",
									"isFirstLevel": true,
									"description": "a CSS property"
								}
							],
							"return": {
								"kind": "return",
								"type": "String",
								"description": "value of the found property, or null if it wasn't matched"
							}
						},
						{
							"kind": "function",
							"name": "changeFontSize",
							"file": "src/js/Ink/Dom/Css/1/lib.js",
							"text": "Change the font size of elements.\nChanges the font size of the elements which match the given CSS rule\nFor this function to work, the CSS file must be in the same domain than the host page, otherwise JS can't access it.",
							"params": [
								{
									"kind": "param",
									"name": "selector",
									"type": "String",
									"isFirstLevel": true,
									"description": "CSS selector rule"
								},
								{
									"kind": "param",
									"name": "delta",
									"type": "Number",
									"isFirstLevel": true,
									"description": "Number of pixels to change on font-size"
								},
								{
									"kind": "param",
									"name": "op",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Supported operations are '+' and '*'. defaults to '+'"
								},
								{
									"kind": "param",
									"name": "minVal",
									"type": "Number",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "If result gets smaller than minVal, change does not occurr"
								},
								{
									"kind": "param",
									"name": "maxVal",
									"type": "Number",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "If result gets bigger  than maxVal, change does not occurr"
								}
							]
						}
					],
					"attributes": [],
					"isNamespace": true,
					"static": true
				}
			],
			"functions": [],
			"attributes": [],
			"uses": [
				"addRemoveClassName",
				"addRemoveClassName"
			],
			"version": "1\nCSS Utilities and toolbox"
		},
		{
			"kind": "module",
			"name": "Ink.Dom.Element_1",
			"file": "src/js/Ink/Dom/Element/1/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink.Dom.Element_1",
					"file": "src/js/Ink/Dom/Element/1/lib.js",
					"functions": [
						{
							"kind": "function",
							"name": "get",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Shortcut for `document.getElementById`",
							"params": [
								{
									"kind": "param",
									"name": "elm",
									"type": "String|DOMElement",
									"isFirstLevel": true,
									"description": "Either an ID of an element, or an element."
								}
							],
							"return": {
								"kind": "return",
								"type": "DOMElement|null",
								"description": "The DOM element with the given id or null when it was not found"
							},
							"samples": [
								"Ink_Dom_Element_1_get.html"
							]
						},
						{
							"kind": "function",
							"name": "create",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Creates a DOM element",
							"params": [
								{
									"kind": "param",
									"name": "tag",
									"type": "String",
									"isFirstLevel": true,
									"description": "tag name"
								},
								{
									"kind": "param",
									"name": "properties",
									"type": "Object",
									"isFirstLevel": true,
									"description": "object with properties to be set on the element. You can also call other functions in Ink.Dom.Element like this"
								}
							],
							"samples": [
								"Ink_Dom_Element_1_create.html"
							]
						},
						{
							"kind": "function",
							"name": "remove",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Removes a DOM Element",
							"params": [
								{
									"kind": "param",
									"name": "elm",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "The element to remove"
								}
							],
							"samples": [
								"Ink_Dom_Element_1_remove.html"
							]
						},
						{
							"kind": "function",
							"name": "scrollTo",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Scrolls the window to an element",
							"params": [
								{
									"kind": "param",
									"name": "elm",
									"type": "DOMElement|String",
									"isFirstLevel": true,
									"description": "Element where to scroll"
								}
							],
							"samples": [
								"Ink_Dom_Element_1_scrollTo.html"
							]
						},
						{
							"kind": "function",
							"name": "offsetTop",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Gets the top offset of an element",
							"params": [
								{
									"kind": "param",
									"name": "elm",
									"type": "DOMElement|String",
									"isFirstLevel": true,
									"description": "Target element"
								}
							],
							"return": {
								"kind": "return",
								"type": "Number",
								"description": "Offset from the target element to the top of the document"
							},
							"samples": [
								"Ink_Dom_Element_1_offsetTop.html"
							]
						},
						{
							"kind": "function",
							"name": "offsetLeft",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Gets the left offset of an element",
							"params": [
								{
									"kind": "param",
									"name": "elm",
									"type": "DOMElement|String",
									"isFirstLevel": true,
									"description": "Target element"
								}
							],
							"return": {
								"kind": "return",
								"type": "Number",
								"description": "Offset from the target element to the left of the document"
							},
							"samples": [
								"Ink_Dom_Element_1_offsetLeft.html"
							]
						},
						{
							"kind": "function",
							"name": "positionedOffset",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Gets the relative offset of an element",
							"params": [
								{
									"kind": "param",
									"name": "elm",
									"type": "DOMElement|String",
									"isFirstLevel": true,
									"description": "Target element"
								}
							],
							"return": {
								"kind": "return",
								"type": "Array",
								"description": "Array with the element offsetleft and offsettop relative to the closest positioned ancestor"
							},
							"samples": [
								"Ink_Dom_Element_1_positionedOffset.html"
							]
						},
						{
							"kind": "function",
							"name": "offset",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Gets the cumulative offset for an element\n\nReturns the top left position of the element on the page",
							"params": []
						},
						{
							"kind": "function",
							"name": "offset",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"params": [
								{
									"kind": "param",
									"name": "elm",
									"type": "DOMElement|String",
									"isFirstLevel": true,
									"description": "Target element"
								}
							],
							"return": {
								"kind": "return",
								"type": "[Number, Number]",
								"description": "Array with pixel distance from the target element to the top left corner of the document"
							},
							"samples": [
								"Ink_Dom_Element_1_offset.html"
							]
						},
						{
							"kind": "function",
							"name": "scroll",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Gets the scroll of the element",
							"params": [
								{
									"kind": "param",
									"name": "elm",
									"type": "DOMElement|String",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Target element or document.body"
								}
							],
							"return": {
								"kind": "return",
								"type": "Array",
								"description": "offset values for x and y scroll"
							},
							"samples": [
								"Ink_Dom_Element_1_scroll.html"
							]
						},
						{
							"kind": "function",
							"name": "offset2",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Alias for offset()",
							"params": [],
							"deprecated": true
						},
						{
							"kind": "function",
							"name": "hasAttribute",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Checks if an element has an attribute",
							"params": [
								{
									"kind": "param",
									"name": "elm",
									"type": "Object",
									"isFirstLevel": true,
									"description": "Target element"
								},
								{
									"kind": "param",
									"name": "attr",
									"type": "String",
									"isFirstLevel": true,
									"description": "Attribute name"
								}
							],
							"return": {
								"kind": "return",
								"type": "Boolean",
								"description": "Boolean based on existance of attribute"
							},
							"samples": [
								"Ink_Dom_Element_1_hasAttribute.html"
							]
						},
						{
							"kind": "function",
							"name": "insertAfter",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Inserts an element right after another",
							"params": [
								{
									"kind": "param",
									"name": "newElm",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "Element to be inserted"
								},
								{
									"kind": "param",
									"name": "targetElm",
									"type": "DOMElement|String",
									"isFirstLevel": true,
									"description": "Key element"
								}
							],
							"samples": [
								"Ink_Dom_Element_1_insertAfter.html"
							]
						},
						{
							"kind": "function",
							"name": "insertBefore",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Inserts an element before another",
							"params": [
								{
									"kind": "param",
									"name": "newElm",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "Element to be inserted"
								},
								{
									"kind": "param",
									"name": "targetElm",
									"type": "DOMElement|String",
									"isFirstLevel": true,
									"description": "Key element"
								}
							],
							"samples": [
								"Ink_Dom_Element_1_insertBefore.html"
							]
						},
						{
							"kind": "function",
							"name": "insertTop",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Inserts an element as the first child of another",
							"params": [
								{
									"kind": "param",
									"name": "newElm",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "Element to be inserted"
								},
								{
									"kind": "param",
									"name": "targetElm",
									"type": "DOMElement|String",
									"isFirstLevel": true,
									"description": "Key element"
								}
							],
							"samples": [
								"Ink_Dom_Element_1_insertTop.html"
							]
						},
						{
							"kind": "function",
							"name": "insertBottom",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Inserts an element as the last child of another",
							"params": [
								{
									"kind": "param",
									"name": "newElm",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "Element to be inserted"
								},
								{
									"kind": "param",
									"name": "targetElm",
									"type": "DOMElement|String",
									"isFirstLevel": true,
									"description": "Key element"
								}
							],
							"samples": [
								"Ink_Dom_Element_1_insertBottom.html"
							]
						},
						{
							"kind": "function",
							"name": "textContent",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Retrieves textContent from node",
							"params": [
								{
									"kind": "param",
									"name": "node",
									"type": "DOMNode",
									"isFirstLevel": true,
									"description": "Where to retreive text from. Can be any node type."
								}
							],
							"return": {
								"kind": "return",
								"type": "String",
								"description": "the text"
							},
							"samples": [
								"Ink_Dom_Element_1_textContent.html"
							]
						},
						{
							"kind": "function",
							"name": "setTextContent",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Replaces text content of a DOM Node\nThis method removes any child node previously present",
							"params": [
								{
									"kind": "param",
									"name": "node",
									"type": "DOMNode",
									"isFirstLevel": true,
									"description": "node Target node where the text will be added."
								},
								{
									"kind": "param",
									"name": "text",
									"type": "String",
									"isFirstLevel": true,
									"description": "text Text to be added on the node."
								}
							],
							"samples": [
								"Ink_Dom_Element_1_setTextContent.html"
							]
						},
						{
							"kind": "function",
							"name": "isLink",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Checks if an element is a link",
							"params": [
								{
									"kind": "param",
									"name": "node",
									"type": "DOMNode",
									"isFirstLevel": true,
									"description": "Node to check if it's link"
								}
							],
							"return": {
								"kind": "return",
								"type": "Boolean"
							},
							"samples": [
								"Ink_Dom_Element_1_isLink.html"
							]
						},
						{
							"kind": "function",
							"name": "isAncestorOf",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Checks if a node is an ancestor of another",
							"params": [
								{
									"kind": "param",
									"name": "ancestor",
									"type": "DOMNode",
									"isFirstLevel": true,
									"description": "Ancestor node"
								},
								{
									"kind": "param",
									"name": "node",
									"type": "DOMNode",
									"isFirstLevel": true,
									"description": "Descendant node"
								}
							],
							"return": {
								"kind": "return",
								"type": "Boolean"
							},
							"samples": [
								"Ink_Dom_Element_1_isAncestorOf.html"
							]
						},
						{
							"kind": "function",
							"name": "descendantOf",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Checks if a node is descendant of another",
							"params": [
								{
									"kind": "param",
									"name": "node",
									"type": "DOMNode",
									"isFirstLevel": true,
									"description": "The ancestor"
								},
								{
									"kind": "param",
									"name": "descendant",
									"type": "DOMNode",
									"isFirstLevel": true,
									"description": "The descendant"
								}
							],
							"return": {
								"kind": "return",
								"type": "Boolean",
								"description": "true if 'descendant' is descendant of 'node'"
							},
							"samples": [
								"Ink_Dom_Element_1_descendantOf.html"
							]
						},
						{
							"kind": "function",
							"name": "firstElementChild",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Get first child element of another",
							"params": [
								{
									"kind": "param",
									"name": "elm",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "Parent node"
								}
							],
							"return": {
								"kind": "return",
								"type": "DOMElement",
								"description": "the Element child"
							},
							"samples": [
								"Ink_Dom_Element_1_firstElementChild.html"
							]
						},
						{
							"kind": "function",
							"name": "lastElementChild",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Get the last child element of another",
							"params": [
								{
									"kind": "param",
									"name": "elm",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "Parent node"
								}
							],
							"return": {
								"kind": "return",
								"type": "DOMElement",
								"description": "the Element child"
							},
							"samples": [
								"Ink_Dom_Element_1_lastElementChild.html"
							]
						},
						{
							"kind": "function",
							"name": "nextElementSibling",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Get the first sibling element after the node",
							"params": [
								{
									"kind": "param",
									"name": "node",
									"type": "DOMNode",
									"isFirstLevel": true,
									"description": "The current node"
								}
							],
							"return": {
								"kind": "return",
								"type": "DOMElement|Null",
								"description": "The first sibling element after node or null if none is found"
							},
							"samples": [
								"Ink_Dom_Element_1_nextElementSibling.html"
							]
						},
						{
							"kind": "function",
							"name": "previousElementSibling",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Get the first sibling element before the node",
							"params": [
								{
									"kind": "param",
									"name": "node",
									"type": "DOMNode",
									"isFirstLevel": true,
									"description": "The current node"
								}
							],
							"return": {
								"kind": "return",
								"type": "DOMElement|Null",
								"description": "The first element sibling before node or null if none is found"
							},
							"samples": [
								"Ink_Dom_Element_1_previousElementSibling.html"
							]
						},
						{
							"kind": "function",
							"name": "elementWidth",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Get an element's width in pixels.",
							"params": [
								{
									"kind": "param",
									"name": "element",
									"type": "DOMElement|String",
									"isFirstLevel": true,
									"description": "Target DOM element or target ID"
								}
							],
							"return": {
								"kind": "return",
								"type": "Number",
								"description": "The element's width"
							},
							"samples": [
								"Ink_Dom_Element_1_elementWidth.html"
							]
						},
						{
							"kind": "function",
							"name": "elementHeight",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Get an element's height in pixels.",
							"params": [
								{
									"kind": "param",
									"name": "element",
									"type": "DOMElement|String",
									"isFirstLevel": true,
									"description": "DOM element or target ID"
								}
							],
							"return": {
								"kind": "return",
								"type": "Number",
								"description": "The element's height"
							},
							"samples": [
								"Ink_Dom_Element_1_elementHeight.html"
							]
						},
						{
							"kind": "function",
							"name": "elementLeft",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Deprecated. Alias for offsetLeft()",
							"params": [
								{
									"kind": "param",
									"name": "element",
									"type": "DOMElement|String",
									"isFirstLevel": true,
									"description": "DOM element or target ID"
								}
							],
							"return": {
								"kind": "return",
								"type": "Number",
								"description": "Element's left position"
							}
						},
						{
							"kind": "function",
							"name": "elementTop",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Deprecated. Alias for offsetTop()",
							"params": [
								{
									"kind": "param",
									"name": "element",
									"type": "DOMElement|string",
									"isFirstLevel": true,
									"description": "Target DOM element or target ID"
								}
							],
							"return": {
								"kind": "return",
								"type": "Number",
								"description": "element's top position"
							}
						},
						{
							"kind": "function",
							"name": "elementDimensions",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Get an element's dimensions in pixels.",
							"params": [
								{
									"kind": "param",
									"name": "element",
									"type": "DOMElement|string",
									"isFirstLevel": true,
									"description": "DOM element or target ID"
								}
							],
							"return": {
								"kind": "return",
								"type": "Array",
								"description": "Array with element's width and height"
							},
							"samples": [
								"Ink_Dom_Element_1_elementDimensions.html"
							]
						},
						{
							"kind": "function",
							"name": "outerDimensions",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Get the outer dimensions of an element in pixels.",
							"params": [
								{
									"kind": "param",
									"name": "element",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "Target element"
								}
							],
							"return": {
								"kind": "return",
								"type": "Array",
								"description": "Array with element width and height."
							},
							"samples": [
								"Ink_Dom_Element_1_outerDimensions.html"
							]
						},
						{
							"kind": "function",
							"name": "inViewport",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Check if an element is inside the viewport",
							"params": [
								{
									"kind": "param",
									"name": "element",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "DOM Element"
								},
								{
									"kind": "param",
									"name": "options",
									"type": "Object",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Options object. If you pass a Boolean value here, it is interpreted as `options.partial`"
								},
								{
									"kind": "param",
									"name": "options.partial",
									"type": "Boolean",
									"isOptional": true,
									"defaultValue": "false",
									"isFirstLevel": false,
									"description": "Return `true` even if it is only partially visible."
								},
								{
									"kind": "param",
									"name": "options.margin",
									"type": "Number",
									"isOptional": true,
									"defaultValue": "0",
									"isFirstLevel": false,
									"description": "Consider a margin all around the viewport with `opts.margin` width a dead zone."
								}
							],
							"return": {
								"kind": "return",
								"type": "Boolean"
							},
							"samples": [
								"Ink_Dom_Element_1_inViewport.html"
							]
						},
						{
							"kind": "function",
							"name": "isHidden",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Check if an element is hidden.\nTaken from Mootools Element extras ( https://gist.github.com/cheeaun/73342 )\nDoes not take into account visibility:hidden",
							"params": [
								{
									"kind": "param",
									"name": "element",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "Element to check"
								}
							],
							"return": {
								"kind": "return",
								"type": "Boolean"
							},
							"samples": [
								"Ink_Dom_Element_1_isHidden.html"
							]
						},
						{
							"kind": "function",
							"name": "isVisible",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Check if an element is visible",
							"params": [
								{
									"kind": "param",
									"name": "element",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "Element to check"
								}
							],
							"return": {
								"kind": "return",
								"type": "Boolean"
							},
							"samples": [
								"Ink_Dom_Element_1_isVisible.html"
							]
						},
						{
							"kind": "function",
							"name": "clonePosition",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Clones an element's position to another",
							"params": [
								{
									"kind": "param",
									"name": "cloneTo",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "element to be position cloned"
								},
								{
									"kind": "param",
									"name": "cloneFrom",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "element to get the cloned position"
								}
							],
							"return": {
								"kind": "return",
								"type": "DOMElement",
								"description": "The element with positionClone"
							},
							"samples": [
								"Ink_Dom_Element_1_clonePosition.html"
							]
						},
						{
							"kind": "function",
							"name": "ellipsizeText",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Text-overflow: ellipsis emulation\nSlices off a piece of text at the end of the element and adds the ellipsis so all text fits inside.",
							"params": [
								{
									"kind": "param",
									"name": "element",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "Element to modify text content"
								},
								{
									"kind": "param",
									"name": "ellipsis",
									"type": "String",
									"isOptional": true,
									"defaultValue": "'\\u2026'",
									"isFirstLevel": true,
									"description": "String to append to the chopped text"
								}
							]
						},
						{
							"kind": "function",
							"name": "findUpwardsHaving",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Finds the closest ancestor element matching your test function",
							"params": [
								{
									"kind": "param",
									"name": "element",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "Element to base the search from"
								},
								{
									"kind": "param",
									"name": "boolTest",
									"type": "Function",
									"isFirstLevel": true,
									"description": "Testing function"
								}
							],
							"return": {
								"kind": "return",
								"type": "DOMElement|false",
								"description": "The matched element or false if did not match"
							},
							"samples": [
								"Ink_Dom_Element_1_findUpwardsHaving.html"
							]
						},
						{
							"kind": "function",
							"name": "findUpwardsByClass",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Finds the closest ancestor by class name",
							"params": [
								{
									"kind": "param",
									"name": "element",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "Element to base the search from"
								},
								{
									"kind": "param",
									"name": "className",
									"type": "String",
									"isFirstLevel": true,
									"description": "Class name to search"
								}
							],
							"return": {
								"kind": "return",
								"type": "DOMElement|false",
								"description": "The matched element or false if did not match"
							},
							"samples": [
								"Ink_Dom_Element_1_findUpwardsByClass.html"
							]
						},
						{
							"kind": "function",
							"name": "findUpwardsByTag",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Finds the closest ancestor by tag name",
							"params": [
								{
									"kind": "param",
									"name": "element",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "Element to base the search from"
								},
								{
									"kind": "param",
									"name": "tag",
									"type": "String",
									"isFirstLevel": true,
									"description": "Tag to search"
								}
							],
							"return": {
								"kind": "return",
								"type": "DOMElement|false",
								"description": "the matched element or false if did not match"
							},
							"samples": [
								"Ink_Dom_Element_1_findUpwardsByTag.html"
							]
						},
						{
							"kind": "function",
							"name": "findUpwardsById",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Finds the closest ancestor by id",
							"params": [
								{
									"kind": "param",
									"name": "element",
									"type": "HtmlElement",
									"isFirstLevel": true,
									"description": "Element to base the search from"
								},
								{
									"kind": "param",
									"name": "id",
									"type": "String",
									"isFirstLevel": true,
									"description": "ID to search"
								}
							],
							"return": {
								"kind": "return",
								"type": "HtmlElement|false",
								"description": "The matched element or false if did not match"
							},
							"samples": [
								"Ink_Dom_Element_1_findUpwardsById.html"
							]
						},
						{
							"kind": "function",
							"name": "findUpwardsBySelector",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Finds the closest ancestor by CSS selector",
							"params": [
								{
									"kind": "param",
									"name": "element",
									"type": "HtmlElement",
									"isFirstLevel": true,
									"description": "Element to base the search from"
								},
								{
									"kind": "param",
									"name": "sel",
									"type": "String",
									"isFirstLevel": true,
									"description": "CSS selector"
								}
							],
							"return": {
								"kind": "return",
								"type": "HtmlElement|false",
								"description": "The matched element or false if did not match"
							},
							"samples": [
								"Ink_Dom_Element_1_findUpwardsBySelector.html"
							]
						},
						{
							"kind": "function",
							"name": "getChildrenText",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Gets the trimmed text of an element",
							"params": [
								{
									"kind": "param",
									"name": "el",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "Element to base the search from"
								},
								{
									"kind": "param",
									"name": "removeIt",
									"type": "Boolean",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Flag to remove the text from the element"
								}
							],
							"return": {
								"kind": "return",
								"type": "String",
								"description": "Text found"
							},
							"samples": [
								"Ink_Dom_Element_1_getChildrenText.html"
							]
						},
						{
							"kind": "function",
							"name": "getSelectValues",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Gets value of a select element",
							"params": [
								{
									"kind": "param",
									"name": "select",
									"type": "DOMElement|String",
									"isFirstLevel": true,
									"description": "element"
								}
							],
							"return": {
								"kind": "return",
								"type": "Array",
								"description": "The selected values"
							},
							"samples": [
								"Ink_Dom_Element_1_getSelectValues.html"
							]
						},
						{
							"kind": "function",
							"name": "fillSelect",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Fills a select element with options",
							"params": [
								{
									"kind": "param",
									"name": "container",
									"type": "DOMElement|String",
									"isFirstLevel": true,
									"description": "Select element which will get filled"
								},
								{
									"kind": "param",
									"name": "data",
									"type": "Array",
									"isFirstLevel": true,
									"description": "Data to populate the component"
								},
								{
									"kind": "param",
									"name": "skipEmpty",
									"type": "Boolean",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Flag to skip empty option"
								},
								{
									"kind": "param",
									"name": "defaultValue",
									"type": "String|Number",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Initial selected value"
								}
							],
							"samples": [
								"Ink_Dom_Element_1_fillSelect.html"
							]
						},
						{
							"kind": "function",
							"name": "fillRadios",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Creates a set of radio buttons from an array of data",
							"params": [
								{
									"kind": "param",
									"name": "insertAfterEl",
									"type": "DOMElement|String",
									"isFirstLevel": true,
									"description": "Element after which the input elements will be created"
								},
								{
									"kind": "param",
									"name": "name",
									"type": "String",
									"isFirstLevel": true,
									"description": "Name for the form field ([] is added if not present as a suffix)"
								},
								{
									"kind": "param",
									"name": "data",
									"type": "Array",
									"isFirstLevel": true,
									"description": "Data to populate the component"
								},
								{
									"kind": "param",
									"name": "skipEmpty",
									"type": "Boolean",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Flag to skip creation of empty options"
								},
								{
									"kind": "param",
									"name": "defaultValue",
									"type": "String|Number",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Initial selected value"
								},
								{
									"kind": "param",
									"name": "splitEl",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Name of element to add after each input element (example: 'br')"
								}
							],
							"return": {
								"kind": "return",
								"type": "DOMElement",
								"description": "Wrapper element around the radio buttons"
							}
						},
						{
							"kind": "function",
							"name": "fillChecks",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Creates set of checkbox buttons",
							"params": [
								{
									"kind": "param",
									"name": "insertAfterEl",
									"type": "DOMElement|String",
									"isFirstLevel": true,
									"description": "Element after which the input elements will be created"
								},
								{
									"kind": "param",
									"name": "name",
									"type": "String",
									"isFirstLevel": true,
									"description": "Name for the form field ([] is added if not present as a suffix)"
								},
								{
									"kind": "param",
									"name": "data",
									"type": "Array",
									"isFirstLevel": true,
									"description": "Data to populate the component"
								},
								{
									"kind": "param",
									"name": "skipEmpty",
									"type": "Boolean",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Flag to skip creation of empty options"
								},
								{
									"kind": "param",
									"name": "defaultValue",
									"type": "String|Number",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Initial selected value"
								},
								{
									"kind": "param",
									"name": "splitEl",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Name of element to add after each input element (example: 'br')"
								}
							],
							"return": {
								"kind": "return",
								"type": "DOMElement",
								"description": "Wrapper element around the checkboxes"
							}
						},
						{
							"kind": "function",
							"name": "parentIndexOf",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Gets the index of an element relative to a parent",
							"params": [
								{
									"kind": "param",
									"name": "parentEl",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "Element to parse"
								},
								{
									"kind": "param",
									"name": "childEl",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "Child Element to look for"
								}
							],
							"return": {
								"kind": "return",
								"type": "Number",
								"description": "The index of the childEl inside parentEl. Returns -1 if it's not a direct child"
							},
							"samples": [
								"Ink_Dom_Element_1_parentIndexOf.html"
							]
						},
						{
							"kind": "function",
							"name": "nextSiblings",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Gets the next siblings of an element",
							"params": [
								{
									"kind": "param",
									"name": "elm",
									"type": "String|DOMElement",
									"isFirstLevel": true,
									"description": "Element"
								}
							],
							"return": {
								"kind": "return",
								"type": "Array",
								"description": "Array of next sibling elements"
							},
							"samples": [
								"Ink_Dom_Element_1_nextSiblings.html"
							]
						},
						{
							"kind": "function",
							"name": "previousSiblings",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Gets the previous siblings of an element",
							"params": [
								{
									"kind": "param",
									"name": "elm",
									"type": "String|DOMElement",
									"isFirstLevel": true,
									"description": "Element"
								}
							],
							"return": {
								"kind": "return",
								"type": "Array",
								"description": "Array of previous sibling elements"
							},
							"samples": [
								"Ink_Dom_Element_1_previousSiblings.html"
							]
						},
						{
							"kind": "function",
							"name": "siblings",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Gets the all siblings of an element",
							"params": [
								{
									"kind": "param",
									"name": "elm",
									"type": "String|DOMElement",
									"isFirstLevel": true,
									"description": "Element"
								}
							],
							"return": {
								"kind": "return",
								"type": "Array",
								"description": "Array of sibling elements"
							},
							"samples": [
								"Ink_Dom_Element_1_siblings.html"
							]
						},
						{
							"kind": "function",
							"name": "childElementCount",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Counts the number of children of an element",
							"params": [
								{
									"kind": "param",
									"name": "elm",
									"type": "String|DOMElement",
									"isFirstLevel": true,
									"description": "element"
								}
							],
							"return": {
								"kind": "return",
								"type": "Number",
								"description": "number of child elements"
							},
							"samples": [
								"Ink_Dom_Element_1_childElementCount.html"
							]
						},
						{
							"kind": "function",
							"name": "_getWrapper",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Gets a wrapper DIV with a certain HTML content to be inserted inside another element.\nThis is necessary for appendHTML,prependHTML functions, because they need a container element to copy the children from.\n\nWorks around IE table quirks",
							"params": [
								{
									"kind": "param",
									"name": "elm",
									"isFirstLevel": true
								},
								{
									"kind": "param",
									"name": "html",
									"isFirstLevel": true
								}
							],
							"private": true
						},
						{
							"kind": "function",
							"name": "appendHTML",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Appends HTML to an element.\nThis method parses the html string and doesn't modify its contents",
							"params": [
								{
									"kind": "param",
									"name": "elm",
									"type": "String|DOMElement",
									"isFirstLevel": true,
									"description": "Element"
								},
								{
									"kind": "param",
									"name": "html",
									"type": "String",
									"isFirstLevel": true,
									"description": "Markup string"
								}
							],
							"samples": [
								"Ink_Dom_Element_1_appendHTML.html"
							]
						},
						{
							"kind": "function",
							"name": "prependHTML",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Prepends HTML to an element.\nThis method parses the html string and doesn't modify its contents",
							"params": [
								{
									"kind": "param",
									"name": "elm",
									"type": "String|DOMElement",
									"isFirstLevel": true,
									"description": "Element"
								},
								{
									"kind": "param",
									"name": "html",
									"type": "String",
									"isFirstLevel": true,
									"description": "Markup string"
								}
							],
							"samples": [
								"Ink_Dom_Element_1_prependHTML.html"
							]
						},
						{
							"kind": "function",
							"name": "setHTML",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Sets the inner HTML of an element.",
							"params": [
								{
									"kind": "param",
									"name": "elm",
									"type": "String|DOMElement",
									"isFirstLevel": true,
									"description": "Element"
								},
								{
									"kind": "param",
									"name": "html",
									"type": "String",
									"isFirstLevel": true,
									"description": "Markup string"
								}
							],
							"samples": [
								"Ink_Dom_Element_1_setHTML.html"
							]
						},
						{
							"kind": "function",
							"name": "wrap",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Wraps an element inside a container.\n\nThe container may or may not be in the document yet.",
							"params": [
								{
									"kind": "param",
									"name": "target",
									"type": "String|DOMElement",
									"isFirstLevel": true,
									"description": "Element to be wrapped"
								},
								{
									"kind": "param",
									"name": "container",
									"type": "String|DOMElement",
									"isFirstLevel": true,
									"description": "Element to wrap the target"
								}
							],
							"return": {
								"kind": "return",
								"description": "Container element"
							},
							"samples": [
								"Ink_Dom_Element_1_wrap.html"
							],
							"examples": [
								"\nbefore:\n\n    <div id=\"target\"></div>\n\ncall this function to wrap #target with a wrapper div.\n\n    InkElement.wrap('target', InkElement.create('div', {id: 'container'});\n\nafter: \n\n    <div id=\"container\"><div id=\"target\"></div></div>\n"
							]
						},
						{
							"kind": "function",
							"name": "unwrap",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Places an element outside a wrapper.",
							"params": [
								{
									"kind": "param",
									"name": "elem",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "The element you're trying to unwrap. This should be an ancestor of the wrapper."
								},
								{
									"kind": "param",
									"name": "wrapperSelector",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "CSS Selector for the ancestor. Use this if your wrapper is not the direct parent of elem."
								}
							],
							"samples": [
								"Ink_Dom_Element_1_unwrap.html"
							],
							"examples": [
								"\n\nWhen you have this:\n\n     <div id=\"wrapper\">\n         <div id=\"unwrapMe\"></div>\n     </div>\n\nIf you do this:\n\n     InkElement.unwrap('unwrapMe');\n\nYou get this:\n\n     <div id=\"unwrapMe\"></div>\n     <div id=\"wrapper\"></div>\n     \n"
							]
						},
						{
							"kind": "function",
							"name": "replace",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Replaces an element with another.",
							"params": [
								{
									"kind": "param",
									"name": "element",
									"isFirstLevel": true,
									"description": "The element to be replaced."
								},
								{
									"kind": "param",
									"name": "replacement",
									"isFirstLevel": true,
									"description": "The new element."
								}
							],
							"samples": [
								"Ink_Dom_Element_1_replace.html"
							],
							"examples": [
								"\n      var newelement1 = InkElement.create('div');\n      // ...\n      replace(Ink.i('element1'), newelement1);\n"
							]
						},
						{
							"kind": "function",
							"name": "removeTextNodeChildren",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Removes direct text children.\nUseful to remove nasty layout gaps generated by whitespace on the markup.",
							"params": [
								{
									"kind": "param",
									"name": "el",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "Element to remove text from"
								}
							],
							"samples": [
								"Ink_Dom_Element_1_removeTextNodeChildren.html"
							]
						},
						{
							"kind": "function",
							"name": "htmlToFragment",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Creates a documentFragment from an HTML string.",
							"params": [
								{
									"kind": "param",
									"name": "html",
									"type": "String",
									"isFirstLevel": true,
									"description": "HTML string"
								}
							],
							"return": {
								"kind": "return",
								"type": "DocumentFragment",
								"description": "DocumentFragment containing all of the elements from the html string"
							},
							"samples": [
								"Ink_Dom_Element_1_htmlToFragment.html"
							]
						},
						{
							"kind": "function",
							"name": "data",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Gets data attributes from an element",
							"params": [
								{
									"kind": "param",
									"name": "selector",
									"type": "String|DOMElement",
									"isFirstLevel": true,
									"description": "Element or CSS selector"
								}
							],
							"return": {
								"kind": "return",
								"type": "Object",
								"description": "Object with the data-* properties. If no data-attributes are present, an empty object is returned."
							},
							"samples": [
								"Ink_Dom_Element_1_data.html"
							]
						},
						{
							"kind": "function",
							"name": "moveCursorTo",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Move the cursor on an input or textarea element.",
							"params": [
								{
									"kind": "param",
									"name": "el",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "Input or Textarea element"
								},
								{
									"kind": "param",
									"name": "t",
									"type": "Number",
									"isFirstLevel": true,
									"description": "Index of the character to move the cursor to"
								}
							],
							"samples": [
								"Ink_Dom_Element_1_moveCursorTo.html"
							]
						},
						{
							"kind": "function",
							"name": "pageWidth",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Get the page's width.",
							"params": [],
							"return": {
								"kind": "return",
								"type": "Number",
								"description": "Page width in pixels"
							},
							"samples": [
								"Ink_Dom_Element_1_pageWidth.html"
							]
						},
						{
							"kind": "function",
							"name": "pageHeight",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Get the page's height.",
							"params": [],
							"return": {
								"kind": "return",
								"type": "Number",
								"description": "Page height in pixels"
							},
							"samples": [
								"Ink_Dom_Element_1_pageHeight.html"
							]
						},
						{
							"kind": "function",
							"name": "viewportWidth",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Get the viewport's width.",
							"params": [],
							"return": {
								"kind": "return",
								"type": "Number",
								"description": "Viewport width in pixels"
							},
							"samples": [
								"Ink_Dom_Element_1_viewportWidth.html"
							]
						},
						{
							"kind": "function",
							"name": "viewportHeight",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Get the viewport's height.",
							"params": [],
							"return": {
								"kind": "return",
								"type": "Number",
								"description": "Viewport height in pixels"
							},
							"samples": [
								"Ink_Dom_Element_1_viewportHeight.html"
							]
						},
						{
							"kind": "function",
							"name": "scrollWidth",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Get the scroll's width.",
							"params": [],
							"return": {
								"kind": "return",
								"type": "Number",
								"description": "Scroll width"
							}
						},
						{
							"kind": "function",
							"name": "scrollHeight",
							"file": "src/js/Ink/Dom/Element/1/lib.js",
							"text": "Get the scroll's height.",
							"params": [],
							"return": {
								"kind": "return",
								"type": "Number",
								"description": "Scroll height"
							}
						}
					],
					"attributes": [],
					"isNamespace": true
				}
			],
			"functions": [],
			"attributes": [],
			"uses": [
				"Ink.Dom.Browser",
				"Ink.Dom.Browser",
				"Ink.Dom.Browser",
				"Ink.Dom.Css",
				"isHidden",
				"findUpwardsHaving"
			],
			"version": "1\nDOM Traversal and manipulation"
		},
		{
			"kind": "module",
			"name": "Ink.Dom.Event_1",
			"file": "src/js/Ink/Dom/Event/1/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink.Dom.Event_1",
					"file": "src/js/Ink/Dom/Event/1/lib.js",
					"functions": [
						{
							"kind": "function",
							"name": "throttle",
							"file": "src/js/Ink/Dom/Event/1/lib.js",
							"text": "Creates a debounced version of a function.\nReturns a function which calls `func`, waiting at least `wait` milliseconds between calls. This is useful for events such as `scroll` or `resize`, which can be triggered too many times per second, slowing down the browser with needless function calls.\n\n*note:* This does not delay the first function call to the function.",
							"params": [
								{
									"kind": "param",
									"name": "func",
									"type": "Function",
									"isFirstLevel": true,
									"description": "Function to call. Arguments and context are both passed."
								},
								{
									"kind": "param",
									"name": "wait",
									"type": "Number",
									"isOptional": true,
									"defaultValue": "0",
									"isFirstLevel": true,
									"description": "Milliseconds to wait between calls."
								}
							],
							"examples": [
								"\n \nSuppose you are observing the `scroll` event, but your application is lagging because `scroll` is triggered too many times.\n\n    // BEFORE\n    InkEvent.observe(window, 'scroll', function () {\n        ...\n    }); // When scrolling on mobile devices or on firefox's smooth scroll\n        // this is expensive because onscroll is called many times\n\n    // AFTER\n    InkEvent.observe(window, 'scroll', InkEvent.throttle(function () {\n        ...\n    }, 100)); // The event handler is called only every 100ms. Problem solved.\n\n",
								"\n    var handler = InkEvent.throttle(function () {\n        ...\n    }, 100);\n\n    InkEvent.observe(window, 'scroll', handler);\n    InkEvent.observe(window, 'resize', handler);\n\n    // on resize, both the \"scroll\" and the \"resize\" events are triggered\n    // a LOT of times. This prevents both of them being called a lot of\n    // times when the window is being resized by a user.\n\n"
							]
						},
						{
							"kind": "function",
							"name": "element",
							"file": "src/js/Ink/Dom/Event/1/lib.js",
							"text": "Gets the event's target element.",
							"params": [
								{
									"kind": "param",
									"name": "ev",
									"type": "Object",
									"isFirstLevel": true,
									"description": "Event object"
								}
							],
							"return": {
								"kind": "return",
								"type": "DOMNode",
								"description": "The target"
							}
						},
						{
							"kind": "function",
							"name": "relatedTarget",
							"file": "src/js/Ink/Dom/Event/1/lib.js",
							"text": "Gets the event's related target element.",
							"params": [
								{
									"kind": "param",
									"name": "ev",
									"type": "Object",
									"isFirstLevel": true,
									"description": "event object"
								}
							],
							"return": {
								"kind": "return",
								"type": "DOMNode",
								"description": "The related target"
							}
						},
						{
							"kind": "function",
							"name": "findElement",
							"file": "src/js/Ink/Dom/Event/1/lib.js",
							"text": "Find closest ancestor element by tag name related to the event target.\nNavigate up the DOM tree, looking for a tag with the name `elmTagName`.\n\nIf such tag is not found, `document` is returned.",
							"params": [
								{
									"kind": "param",
									"name": "ev",
									"type": "Object",
									"isFirstLevel": true,
									"description": "Event object"
								},
								{
									"kind": "param",
									"name": "elmTagName",
									"type": "String",
									"isFirstLevel": true,
									"description": "Tag name to find"
								},
								{
									"kind": "param",
									"name": "force",
									"type": "Boolean",
									"isOptional": true,
									"defaultValue": "false",
									"isFirstLevel": true,
									"description": "Flag to skip returning `document` and to return `false` instead."
								}
							],
							"return": {
								"kind": "return",
								"type": "DOMElement",
								"description": "the first element which matches given tag name or the document element if the wanted tag is not found"
							}
						},
						{
							"kind": "function",
							"name": "observe",
							"file": "src/js/Ink/Dom/Event/1/lib.js",
							"text": "Attaches an event to element",
							"params": [
								{
									"kind": "param",
									"name": "element",
									"type": "DOMElement|String",
									"isFirstLevel": true,
									"description": "Element id or element"
								},
								{
									"kind": "param",
									"name": "eventName",
									"type": "String",
									"isFirstLevel": true,
									"description": "Event name"
								},
								{
									"kind": "param",
									"name": "callBack",
									"type": "Function",
									"isFirstLevel": true,
									"description": "Receives the event object as a parameter. If you're manually firing custom events, check it's eventName property to make sure you're handling the right event."
								},
								{
									"kind": "param",
									"name": "useCapture",
									"type": "Boolean",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Flag to change event listening from bubbling to capture."
								}
							],
							"return": {
								"kind": "return",
								"type": "Function",
								"description": "The event handler used. Hang on to this if you want to `stopObserving` later."
							}
						},
						{
							"kind": "function",
							"name": "observeOnce",
							"file": "src/js/Ink/Dom/Event/1/lib.js",
							"text": "Like observe, but listen to the event only once.",
							"params": [
								{
									"kind": "param",
									"name": "element",
									"type": "DOMElement|String",
									"isFirstLevel": true,
									"description": "Element id or element"
								},
								{
									"kind": "param",
									"name": "eventName",
									"type": "String",
									"isFirstLevel": true,
									"description": "Event name"
								},
								{
									"kind": "param",
									"name": "callBack",
									"type": "Function",
									"isFirstLevel": true,
									"description": "Receives the event object as a parameter. If you're manually firing custom events, check it's eventName property to make sure you're handling the right event."
								},
								{
									"kind": "param",
									"name": "useCapture",
									"type": "Boolean",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Flag to change event listening from bubbling to capture."
								}
							],
							"return": {
								"kind": "return",
								"type": "Function",
								"description": "The event handler used. Hang on to this if you want to `stopObserving` later."
							}
						},
						{
							"kind": "function",
							"name": "observeMulti",
							"file": "src/js/Ink/Dom/Event/1/lib.js",
							"text": "Attaches an event to a selector or array of elements.",
							"params": [
								{
									"kind": "param",
									"name": "elements",
									"type": "Array|String",
									"isFirstLevel": true
								},
								{
									"kind": "param",
									"name": "eventName",
									"type": "String",
									"isFirstLevel": true,
									"description": "Event name"
								},
								{
									"kind": "param",
									"name": "callBack",
									"type": "Function",
									"isFirstLevel": true,
									"description": "Receives the event object as a parameter. If you're manually firing custom events, check it's eventName property to make sure you're handling the right event."
								},
								{
									"kind": "param",
									"name": "useCapture",
									"type": "Boolean",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Flag change event listening from bubbling to capture."
								}
							],
							"return": {
								"kind": "return",
								"type": "Function",
								"description": "The used callback."
							}
						},
						{
							"kind": "function",
							"name": "observeDelegated",
							"file": "src/js/Ink/Dom/Event/1/lib.js",
							"text": "Observes an event on an element and its descendants matching the selector.\n\nRequires Ink.Dom.Selector if you need to use a selector.",
							"params": [
								{
									"kind": "param",
									"name": "element",
									"type": "DOMElement|String",
									"isFirstLevel": true,
									"description": "Element to observe."
								},
								{
									"kind": "param",
									"name": "eventName",
									"type": "String",
									"isFirstLevel": true,
									"description": "Event name to observe."
								},
								{
									"kind": "param",
									"name": "selector",
									"type": "String",
									"isFirstLevel": true,
									"description": "Child element selector. When null, finds any element."
								},
								{
									"kind": "param",
									"name": "callback",
									"type": "Function",
									"isFirstLevel": true,
									"description": "Callback to be called when the event is fired"
								}
							],
							"return": {
								"kind": "return",
								"type": "Function",
								"description": "The used callback, for ceasing to listen to the event later."
							}
						},
						{
							"kind": "function",
							"name": "stopObserving",
							"file": "src/js/Ink/Dom/Event/1/lib.js",
							"text": "Removes an event attached to an element.",
							"params": [
								{
									"kind": "param",
									"name": "element",
									"type": "DOMElement|String",
									"isFirstLevel": true,
									"description": "Element id or element"
								},
								{
									"kind": "param",
									"name": "eventName",
									"type": "String",
									"isFirstLevel": true,
									"description": "Event name"
								},
								{
									"kind": "param",
									"name": "callBack",
									"type": "Function",
									"isFirstLevel": true,
									"description": "Callback function"
								},
								{
									"kind": "param",
									"name": "useCapture",
									"type": "Boolean",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Set to true if the event was being observed with useCapture set to true as well."
								}
							]
						},
						{
							"kind": "function",
							"name": "stop",
							"file": "src/js/Ink/Dom/Event/1/lib.js",
							"text": "Stops event propagation and bubbling.",
							"params": [
								{
									"kind": "param",
									"name": "event",
									"type": "Object",
									"isFirstLevel": true,
									"description": "Event handle"
								}
							]
						},
						{
							"kind": "function",
							"name": "stopPropagation",
							"file": "src/js/Ink/Dom/Event/1/lib.js",
							"text": "Stops event propagation.",
							"params": [
								{
									"kind": "param",
									"name": "event",
									"type": "Object",
									"isFirstLevel": true,
									"description": "Event handle"
								}
							]
						},
						{
							"kind": "function",
							"name": "stopDefault",
							"file": "src/js/Ink/Dom/Event/1/lib.js",
							"text": "Stops event default behaviour.",
							"params": [
								{
									"kind": "param",
									"name": "event",
									"type": "Object",
									"isFirstLevel": true,
									"description": "Event handle"
								}
							]
						},
						{
							"kind": "function",
							"name": "pointer",
							"file": "src/js/Ink/Dom/Event/1/lib.js",
							"text": "Gets the pointer's coordinates from the event object.",
							"params": [
								{
									"kind": "param",
									"name": "ev",
									"type": "Object",
									"isFirstLevel": true,
									"description": "Event object"
								}
							],
							"return": {
								"kind": "return",
								"type": "Object",
								"description": "An object with the mouse X and Y position"
							}
						},
						{
							"kind": "function",
							"name": "pointerX",
							"file": "src/js/Ink/Dom/Event/1/lib.js",
							"text": "Gets the pointer's X coordinate.",
							"params": [
								{
									"kind": "param",
									"name": "ev",
									"type": "Object",
									"isFirstLevel": true,
									"description": "Event object"
								}
							],
							"return": {
								"kind": "return",
								"type": "Number",
								"description": "Mouse X position"
							}
						},
						{
							"kind": "function",
							"name": "pointerY",
							"file": "src/js/Ink/Dom/Event/1/lib.js",
							"text": "Gets the pointer's Y coordinate.",
							"params": [
								{
									"kind": "param",
									"name": "ev",
									"type": "Object",
									"isFirstLevel": true,
									"description": "Event object"
								}
							],
							"return": {
								"kind": "return",
								"type": "Number",
								"description": "Mouse Y position"
							}
						},
						{
							"kind": "function",
							"name": "isLeftClick",
							"file": "src/js/Ink/Dom/Event/1/lib.js",
							"text": "Checks if an event is a left click.",
							"params": [
								{
									"kind": "param",
									"name": "ev",
									"type": "Object",
									"isFirstLevel": true,
									"description": "Event object"
								}
							],
							"return": {
								"kind": "return",
								"type": "Boolean",
								"description": "True if the event is a left click"
							}
						},
						{
							"kind": "function",
							"name": "isRightClick",
							"file": "src/js/Ink/Dom/Event/1/lib.js",
							"text": "Checks if an event is a right click.",
							"params": [
								{
									"kind": "param",
									"name": "ev",
									"type": "Object",
									"isFirstLevel": true,
									"description": "Event object"
								}
							],
							"return": {
								"kind": "return",
								"type": "Boolean",
								"description": "True if the event is a right click"
							}
						},
						{
							"kind": "function",
							"name": "isMiddleClick",
							"file": "src/js/Ink/Dom/Event/1/lib.js",
							"text": "Checks if an event is a middle click.",
							"params": [
								{
									"kind": "param",
									"name": "ev",
									"type": "Object",
									"isFirstLevel": true,
									"description": "Event object"
								}
							],
							"return": {
								"kind": "return",
								"type": "Boolean",
								"description": "True if the event is a middle click"
							}
						},
						{
							"kind": "function",
							"name": "getCharFromKeyboardEvent",
							"file": "src/js/Ink/Dom/Event/1/lib.js",
							"text": "Gets character from an event.\nUsed in SAPO.Component.MaskedInput",
							"params": [
								{
									"kind": "param",
									"name": "event",
									"type": "Object",
									"isFirstLevel": true,
									"description": "Keyboard event"
								},
								{
									"kind": "param",
									"name": "changeCasing",
									"type": "Boolean",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "If true uppercases, if false lowercases, otherwise keeps casing"
								}
							],
							"return": {
								"kind": "return",
								"type": "String",
								"description": "Character representation of pressed key combination"
							}
						},
						{
							"kind": "function",
							"name": "on",
							"file": "src/js/Ink/Dom/Event/1/lib.js",
							"text": "Lets you attach event listeners to both elements and objects.\nhttp://github.com/fat/bean#on",
							"params": [
								{
									"kind": "param",
									"name": "element",
									"type": "DOMElement|Object",
									"isFirstLevel": true,
									"description": "An HTML DOM element or any JavaScript Object"
								},
								{
									"kind": "param",
									"name": "eventType",
									"type": "String",
									"isFirstLevel": true,
									"description": "An Event (or multiple events, space separated) to listen to"
								},
								{
									"kind": "param",
									"name": "selector",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "A CSS DOM Element selector string to bind the listener to child elements matching the selector"
								},
								{
									"kind": "param",
									"name": "handler",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "The callback function"
								},
								{
									"kind": "param",
									"name": "args...",
									"type": "Object",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Additional arguments to pass to the callback function when triggered"
								}
							],
							"return": {
								"kind": "return",
								"type": "DOMElement|Object",
								"description": "Returns the original DOM Element or Javascript Object"
							}
						},
						{
							"kind": "function",
							"name": "one",
							"file": "src/js/Ink/Dom/Event/1/lib.js",
							"text": "Alias for `on` but will only be executed once.\nbean.one() is an alias for bean.on() except that the handler will only be executed once and then removed for the event type(s).\nhttp://github.com/fat/bean#one",
							"params": [
								{
									"kind": "param",
									"name": "element",
									"type": "DOMElement|Object",
									"isFirstLevel": true,
									"description": "An HTML DOM element or any JavaScript Object"
								},
								{
									"kind": "param",
									"name": "eventType",
									"type": "String",
									"isFirstLevel": true,
									"description": "An Event (or multiple events, space separated) to listen to"
								},
								{
									"kind": "param",
									"name": "selector",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "A CSS DOM Element selector string to bind the listener to child elements matching the selector"
								},
								{
									"kind": "param",
									"name": "handler",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "The callback function"
								},
								{
									"kind": "param",
									"name": "args...",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Additional arguments to pass to the callback function when triggered"
								}
							],
							"return": {
								"kind": "return",
								"type": "DOMElement|Object",
								"description": "Returns the original DOM Element or Javascript Object"
							}
						},
						{
							"kind": "function",
							"name": "off",
							"file": "src/js/Ink/Dom/Event/1/lib.js",
							"text": "Removes event handlers.\nbean.off() is how you get rid of handlers once you no longer want them active. It's also a good idea to call off on elements before you remove them from your DOM; this gives Bean a chance to clean up some things and prevents memory leaks.\nhttp://github.com/fat/bean#off",
							"params": [
								{
									"kind": "param",
									"name": "element",
									"type": "DOMElement|Object",
									"isFirstLevel": true,
									"description": "An HTML DOM element or any JavaScript Object"
								},
								{
									"kind": "param",
									"name": "eventType",
									"type": "String",
									"isFirstLevel": true,
									"description": "An Event (or multiple events, space separated) to remove"
								},
								{
									"kind": "param",
									"name": "handler",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "The specific callback function to remove"
								}
							],
							"return": {
								"kind": "return",
								"type": "DOMElement|Object",
								"description": "Returns the original DOM Element or Javascript Object"
							}
						},
						{
							"kind": "function",
							"name": "clone",
							"file": "src/js/Ink/Dom/Event/1/lib.js",
							"text": "Clones events from one object to another\nbean.clone() is a method for cloning events from one DOM element or object to another.\nhttp://github.com/fat/bean#clone",
							"params": [
								{
									"kind": "param",
									"name": "destElement",
									"type": "DOMElement|Object",
									"isFirstLevel": true,
									"description": "An HTML DOM element or any JavaScript Object to copy events to"
								},
								{
									"kind": "param",
									"name": "srcElement",
									"type": "String",
									"isFirstLevel": true,
									"description": "An HTML DOM element or any JavaScript Object to copy events from"
								},
								{
									"kind": "param",
									"name": "eventType",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "An Event (or multiple events, space separated) to clone"
								}
							],
							"return": {
								"kind": "return",
								"type": "DOMElement|Object",
								"description": "Returns the original DOM Element or Javascript Object"
							}
						},
						{
							"kind": "function",
							"name": "fire",
							"file": "src/js/Ink/Dom/Event/1/lib.js",
							"text": "Triggers events.\nhttp://github.com/fat/bean#fire",
							"params": [
								{
									"kind": "param",
									"name": "destElement",
									"type": "DOMElement|Object",
									"isFirstLevel": true,
									"description": "An HTML DOM element or any JavaScript Object fire the event on"
								},
								{
									"kind": "param",
									"name": "eventType",
									"type": "String",
									"isFirstLevel": true,
									"description": "An Event (or multiple events, space separated) to fire"
								},
								{
									"kind": "param",
									"name": "args...",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Additional arguments to pass to the callback function when triggered"
								}
							],
							"return": {
								"kind": "return",
								"type": "DOMElement|Object",
								"description": "Returns the original DOM Element or Javascript Object"
							}
						}
					],
					"attributes": [],
					"isNamespace": true,
					"static": true
				}
			],
			"functions": [],
			"attributes": [],
			"uses": [],
			"version": "1\nEvent management"
		},
		{
			"kind": "module",
			"name": "Ink.Dom.FormSerialize_1",
			"file": "src/js/Ink/Dom/FormSerialize/1/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink.Dom.FormSerialize",
					"text": "Two way serialization of form data and javascript objects.\nValid applications are ad hoc AJAX/syndicated submission of forms, restoring form values from server side state, etc.",
					"file": "src/js/Ink/Dom/FormSerialize/1/lib.js",
					"functions": [
						{
							"kind": "function",
							"name": "serialize",
							"file": "src/js/Ink/Dom/FormSerialize/1/lib.js",
							"text": "Serializes a form element into a JS object\nIt turns field names into keys and field values into values.\n\nnote: Multi-select and checkboxes with multiple values will result in arrays",
							"params": [
								{
									"kind": "param",
									"name": "form",
									"type": "DOMElement|String",
									"isFirstLevel": true,
									"description": "Form element to extract data"
								}
							],
							"return": {
								"kind": "return",
								"type": "Object",
								"description": "Map of fieldName -> String|String[]|Boolean"
							},
							"examples": [
								"\n    <form id=\"frm\">\n        <input type=\"text\" name=\"field1\">\n        <button type=\"submit\">Submit</button>\n    </form>\n    <script type=\"text/javascript\">\n        Ink.requireModules(['Ink.Dom.FormSerialize_1', 'Ink.Dom.Event_1'], function (FormSerialize, InkEvent) {\n            InkEvent.observe('frm', 'submit', function (event) {\n                var formData = FormSerialize.serialize('frm'); // -> {field1:\"123\"}\n                InkEvent.stop(event);\n            });\n        });\n    </script>\n"
							]
						},
						{
							"kind": "function",
							"name": "fillIn",
							"file": "src/js/Ink/Dom/FormSerialize/1/lib.js",
							"text": "Sets form elements' values with values from an object\n\nNote: You can't set the values of an input with `type=\"file\"` (browser prohibits it)",
							"params": [
								{
									"kind": "param",
									"name": "form",
									"type": "DOMElement|String",
									"isFirstLevel": true,
									"description": "Form element to be populated"
								},
								{
									"kind": "param",
									"name": "map2",
									"type": "Object",
									"isFirstLevel": true,
									"description": "Map of fieldName -> String|String[]|Boolean"
								}
							],
							"examples": [
								"\n    <form id=\"frm\">\n        <input type=\"text\" name=\"field1\">\n        <button type=\"submit\">Submit</button>\n    </form>\n    <script type=\"text/javascript\">\n        Ink.requireModules(['Ink.Dom.FormSerialize_1'], function (FormSerialize) {\n            var values = {field1: 'CTHULHU'};\n            FormSerialize.fillIn('frm', values);\n            // At this point the form is pre-filled with the values above.\n        });\n    </script>\n"
							]
						}
					],
					"attributes": [],
					"isNamespace": true,
					"static": true
				}
			],
			"functions": [],
			"attributes": [],
			"uses": []
		},
		{
			"kind": "module",
			"name": "Ink.Dom.Loaded_1",
			"file": "src/js/Ink/Dom/Loaded/1/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink.Dom.Loaded_1",
					"file": "src/js/Ink/Dom/Loaded/1/lib.js",
					"functions": [
						{
							"kind": "function",
							"name": "run",
							"file": "src/js/Ink/Dom/Loaded/1/lib.js",
							"text": "Specify a function to execute when the DOM is fully loaded.",
							"params": [
								{
									"kind": "param",
									"name": "win",
									"type": "Object",
									"isOptional": true,
									"defaultValue": "window",
									"isFirstLevel": true,
									"description": "Window object to attach/add the event"
								},
								{
									"kind": "param",
									"name": "fn",
									"type": "Function",
									"isFirstLevel": true,
									"description": "Callback function to be executed after the DOM is ready"
								}
							],
							"examples": [
								"\n    Ink.requireModules(['Ink.Dom.Loaded_1'], function(Loaded){\n        Loaded.run(function(){\n            console.log('This will run when the page/document is ready/loaded');\n        });\n    });\n"
							]
						},
						{
							"kind": "function",
							"name": "_checkState",
							"file": "src/js/Ink/Dom/Loaded/1/lib.js",
							"text": "Function that will be running the callbacks after the page is loaded",
							"params": [
								{
									"kind": "param",
									"name": "event",
									"type": "Event",
									"isFirstLevel": true,
									"description": "Triggered event"
								}
							],
							"private": true
						},
						{
							"kind": "function",
							"name": "_poll",
							"file": "src/js/Ink/Dom/Loaded/1/lib.js",
							"text": "Polls the load progress of the page to see if it has already loaded or not",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_ready",
							"file": "src/js/Ink/Dom/Loaded/1/lib.js",
							"text": "Function that runs the callbacks from the queue when the document is ready.",
							"params": [],
							"private": true
						}
					],
					"attributes": [
						{
							"kind": "attribute",
							"name": "_contexts",
							"text": "Callbacks and their contexts. Array of 2-arrays.\n\n[]",
							"description": "Array",
							"private": true
						}
					],
					"isNamespace": true
				}
			],
			"functions": [],
			"attributes": [],
			"uses": [],
			"version": "1"
		},
		{
			"kind": "module",
			"name": "Ink.Dom.Selector_1",
			"file": "src/js/Ink/Dom/Selector/1/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink.Dom.Selector",
					"file": "src/js/Ink/Dom/Selector/1/lib.js",
					"functions": [
						{
							"kind": "function",
							"name": "select",
							"file": "src/js/Ink/Dom/Selector/1/lib.js",
							"text": "Alias for the Sizzle selector engine",
							"params": [
								{
									"kind": "param",
									"name": "selector",
									"type": "String",
									"isFirstLevel": true,
									"description": "CSS selector to search for elements"
								},
								{
									"kind": "param",
									"name": "context",
									"type": "DOMElement",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "By default the search is done in the document element. However, you can specify an element as search context"
								},
								{
									"kind": "param",
									"name": "results",
									"type": "Array",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "By default this is considered an empty array. But if you want to merge it with other searches you did, pass their result array through here."
								}
							],
							"return": {
								"kind": "return",
								"type": "Array",
								"description": "Array of resulting DOM Elements"
							}
						},
						{
							"kind": "function",
							"name": "matches",
							"file": "src/js/Ink/Dom/Selector/1/lib.js",
							"text": "Filters elements that match a CSS selector.",
							"params": [
								{
									"kind": "param",
									"name": "selector",
									"type": "String",
									"isFirstLevel": true,
									"description": "CSS selector to search for elements"
								},
								{
									"kind": "param",
									"name": "matches",
									"type": "Array",
									"isFirstLevel": true,
									"description": "Elements to be 'matched' with"
								}
							],
							"return": {
								"kind": "return",
								"type": "Array",
								"description": "Elements that matched"
							}
						},
						{
							"kind": "function",
							"name": "matchesSelector",
							"file": "src/js/Ink/Dom/Selector/1/lib.js",
							"text": "Checks if an element matches a given selector",
							"params": [
								{
									"kind": "param",
									"name": "element",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "Element to test"
								},
								{
									"kind": "param",
									"name": "selector",
									"type": "String",
									"isFirstLevel": true,
									"description": "CSS selector to test the element with"
								}
							],
							"return": {
								"kind": "return",
								"type": "Boolean",
								"description": "True if element matches the CSS selector"
							}
						}
					],
					"attributes": [],
					"isNamespace": true,
					"static": true
				}
			],
			"functions": [],
			"attributes": [],
			"uses": [],
			"version": "1"
		},
		{
			"kind": "module",
			"name": "Ink.Namespace.ClassModule_1",
			"file": "src/js/Ink/Namespace/ClassModule/1/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink.Namespace.ClassModule",
					"text": "Use this to bake cakes.",
					"file": "src/js/Ink/Namespace/ClassModule/1/lib.js",
					"functions": [
						{
							"kind": "function",
							"name": "ClassModule",
							"file": "src/js/Ink/Namespace/ClassModule/1/lib.js",
							"isConstructor": true,
							"params": [
								{
									"kind": "param",
									"name": "options",
									"type": "Object",
									"isFirstLevel": true
								},
								{
									"kind": "param",
									"name": "options.opt1",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "asda sdas d"
								},
								{
									"kind": "param",
									"name": "options.opt2",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "asda sdas d"
								}
							]
						},
						{
							"kind": "function",
							"name": "bake",
							"file": "src/js/Ink/Namespace/ClassModule/1/lib.js",
							"params": [],
							"return": {
								"kind": "return",
								"type": "Number",
								"description": "a number between 0 and 1"
							}
						},
						{
							"kind": "function",
							"name": "bake",
							"file": "src/js/Ink/Namespace/ClassModule/1/lib.js",
							"params": [
								{
									"kind": "param",
									"name": "ingredient",
									"type": "String",
									"isFirstLevel": true
								},
								{
									"kind": "param",
									"name": "time",
									"type": "Number",
									"isFirstLevel": true
								}
							]
						}
					],
					"attributes": []
				}
			],
			"functions": [],
			"attributes": [],
			"uses": [],
			"author": "inkdev AT sapo.pt",
			"since": "April 2013",
			"version": "1"
		},
		{
			"kind": "module",
			"name": "Ink.Namespace.StaticModule_1",
			"file": "src/js/Ink/Namespace/StaticModule/1/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink.Namespace.StaticModule",
					"text": "This is a awesome set of methods to paint the sky.",
					"file": "src/js/Ink/Namespace/StaticModule/1/lib.js",
					"functions": [
						{
							"kind": "function",
							"name": "publicMethod",
							"file": "src/js/Ink/Namespace/StaticModule/1/lib.js",
							"text": "Description of the method",
							"params": [
								{
									"kind": "param",
									"name": "name",
									"type": "String",
									"isFirstLevel": true,
									"description": "bla ble bi"
								},
								{
									"kind": "param",
									"name": "number",
									"type": "Number",
									"isFirstLevel": true,
									"description": "blo blu"
								}
							],
							"return": {
								"kind": "return",
								"type": "String",
								"description": "the greet"
							}
						}
					],
					"attributes": [
						{
							"kind": "attribute",
							"name": "publicProperty",
							"text": ""
						}
					],
					"isNamespace": true,
					"static": true
				}
			],
			"functions": [],
			"attributes": [],
			"uses": [],
			"author": "inkdev AT sapo.pt",
			"since": "April 2013",
			"version": "1"
		},
		{
			"kind": "module",
			"name": "Ink.Net.Ajax_1",
			"file": "src/js/Ink/Net/Ajax/1/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink.Net.Ajax",
					"text": "Creates a new XMLHttpRequest object",
					"file": "src/js/Ink/Net/Ajax/1/lib.js",
					"functions": [
						{
							"kind": "function",
							"name": "Ajax",
							"file": "src/js/Ink/Net/Ajax/1/lib.js",
							"isConstructor": true,
							"params": [
								{
									"kind": "param",
									"name": "url",
									"type": "String",
									"isFirstLevel": true,
									"description": "Request URL"
								},
								{
									"kind": "param",
									"name": "options",
									"type": "Object",
									"isFirstLevel": true,
									"description": "Request options"
								},
								{
									"kind": "param",
									"name": "options.asynchronous",
									"type": "Boolean",
									"isOptional": true,
									"defaultValue": "true",
									"isFirstLevel": false,
									"description": "If false, the request synchronous."
								},
								{
									"kind": "param",
									"name": "options.cors",
									"type": "Boolean",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Flag to activate CORS. Set this to true if you're doing a cross-origin request"
								},
								{
									"kind": "param",
									"name": "options.method",
									"type": "String",
									"isOptional": true,
									"defaultValue": "'POST'",
									"isFirstLevel": false,
									"description": "HTTP request method. POST by default."
								},
								{
									"kind": "param",
									"name": "options.parameters",
									"type": "Object|String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Request parameters to be sent with the request"
								},
								{
									"kind": "param",
									"name": "options.timeout",
									"type": "Number",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Request timeout in seconds"
								},
								{
									"kind": "param",
									"name": "options.delay",
									"type": "Number",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Artificial delay. If the request is completed faster than this delay, wait the remaining time before executing the callbacks"
								},
								{
									"kind": "param",
									"name": "options.postBody",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "POST request body. If not specified, it's filled with the contents from parameters"
								},
								{
									"kind": "param",
									"name": "options.contentType",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Content-type header to be sent. Defaults to 'application/x-www-form-urlencoded'"
								},
								{
									"kind": "param",
									"name": "options.requestHeaders",
									"type": "Object",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Key-value pairs for additional request headers"
								},
								{
									"kind": "param",
									"name": "options.onComplete",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Callback executed after the request is completed, regardless of what happened during the request."
								},
								{
									"kind": "param",
									"name": "options.onSuccess",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Callback executed if the request is successful (requests with 2xx status codes)"
								},
								{
									"kind": "param",
									"name": "options.onFailure",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Callback executed if the request fails (requests with status codes different from 2xx)"
								},
								{
									"kind": "param",
									"name": "options.onException",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Callback executed if an exception occurs. Receives the exception as a parameter."
								},
								{
									"kind": "param",
									"name": "options.onCreate",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Callback executed after object initialization but before the request is made"
								},
								{
									"kind": "param",
									"name": "options.onInit",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Callback executed before any initialization"
								},
								{
									"kind": "param",
									"name": "options.onTimeout",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Callback executed if the request times out"
								},
								{
									"kind": "param",
									"name": "options.evalJS",
									"type": "Boolean|String",
									"isOptional": true,
									"defaultValue": "true",
									"isFirstLevel": false,
									"description": "If the request Content-type header is application/json, evaluates the response and populates responseJSON. Use 'force' if you want to force the response evaluation, no matter what Content-type it's using."
								},
								{
									"kind": "param",
									"name": "options.sanitizeJSON",
									"type": "Boolean",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Flag to sanitize the content of responseText before evaluation"
								},
								{
									"kind": "param",
									"name": "options.xhrProxy",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "URI for proxy service hosted on the same server as the web app, that can fetch documents from other domains. The service must pipe all input and output untouched (some input sanitization is allowed, like clearing cookies). e.g., requesting http://example.org/doc can become /proxy/http%3A%2F%2Fexample.org%2Fdoc The proxy service will be used for cross-domain requests, if set, else a network error is returned as exception."
								}
							],
							"examples": [
								"\n    new Ajax('test.json', {\n        method: 'get',\n        onSuccess: function (ajx, responseJSON) {\n            // Do stuff with responseJSON or ajx.responseText\n            console.log(responseJSON.something.length);\n        },\n        onFailure: function (ajx, errorResponse) {\n            // Deal with it\n            alert(ajx.status);  // The HTTP response code\n        }\n    });\n"
							]
						},
						{
							"kind": "function",
							"name": "_locationFromUrl",
							"file": "src/js/Ink/Net/Ajax/1/lib.js",
							"text": "Returns a location object from an URL",
							"params": [
								{
									"kind": "param",
									"name": "url",
									"isFirstLevel": true
								}
							],
							"private": true
						},
						{
							"kind": "function",
							"name": "locationIsHttp",
							"file": "src/js/Ink/Net/Ajax/1/lib.js",
							"text": "Checks whether a location is HTTP or HTTPS",
							"params": [
								{
									"kind": "param",
									"name": "urlLocation",
									"isFirstLevel": true
								}
							],
							"private": true
						},
						{
							"kind": "function",
							"name": "_locationIsCrossDomain",
							"file": "src/js/Ink/Net/Ajax/1/lib.js",
							"text": "Checks whether a location is cross-domain from another",
							"params": [
								{
									"kind": "param",
									"name": "urlLocation",
									"isFirstLevel": true,
									"description": "{Location}"
								},
								{
									"kind": "param",
									"name": "otherLocation",
									"isFirstLevel": true,
									"description": "{Location}"
								}
							]
						},
						{
							"kind": "function",
							"name": "getTransport",
							"file": "src/js/Ink/Net/Ajax/1/lib.js",
							"text": "Creates the appropriate XMLHttpRequest object",
							"params": [],
							"return": {
								"kind": "return",
								"type": "Object",
								"description": "XMLHttpRequest object"
							}
						},
						{
							"kind": "function",
							"name": "setHeaders",
							"file": "src/js/Ink/Net/Ajax/1/lib.js",
							"text": "Set the necessary headers for an ajax request",
							"params": [
								{
									"kind": "param",
									"name": "url",
									"type": "String",
									"isFirstLevel": true,
									"description": "The url for the request"
								}
							]
						},
						{
							"kind": "function",
							"name": "paramsObjToStr",
							"file": "src/js/Ink/Net/Ajax/1/lib.js",
							"text": "Converts an object with parameters to a querystring",
							"params": [
								{
									"kind": "param",
									"name": "optParams",
									"type": "Object|String",
									"isFirstLevel": true,
									"description": "parameters object"
								}
							],
							"return": {
								"kind": "return",
								"type": "String",
								"description": "querystring"
							}
						},
						{
							"kind": "function",
							"name": "setParams",
							"file": "src/js/Ink/Net/Ajax/1/lib.js",
							"text": "Set the url parameters for a GET request",
							"params": []
						},
						{
							"kind": "function",
							"name": "getHeader",
							"file": "src/js/Ink/Net/Ajax/1/lib.js",
							"text": "Gets an HTTP header from the response",
							"params": [
								{
									"kind": "param",
									"name": "name",
									"type": "String",
									"isFirstLevel": true,
									"description": "Header name"
								}
							],
							"return": {
								"kind": "return",
								"type": "String",
								"description": "header  Content"
							}
						},
						{
							"kind": "function",
							"name": "getAllHeaders",
							"file": "src/js/Ink/Net/Ajax/1/lib.js",
							"text": "Gets all the HTTP headers from the response",
							"params": [],
							"return": {
								"kind": "return",
								"type": "String",
								"description": "The headers, each separated by a newline"
							}
						},
						{
							"kind": "function",
							"name": "getResponse",
							"file": "src/js/Ink/Net/Ajax/1/lib.js",
							"text": "Sets the response object",
							"params": [],
							"return": {
								"kind": "return",
								"type": "Object",
								"description": "the response object"
							}
						},
						{
							"kind": "function",
							"name": "abort",
							"file": "src/js/Ink/Net/Ajax/1/lib.js",
							"text": "Aborts the request if still running. No callbacks are called",
							"params": []
						},
						{
							"kind": "function",
							"name": "runStateChange",
							"file": "src/js/Ink/Net/Ajax/1/lib.js",
							"text": "Executes the state changing phase of an ajax request",
							"params": []
						},
						{
							"kind": "function",
							"name": "finish",
							"file": "src/js/Ink/Net/Ajax/1/lib.js",
							"text": "Last step after XHR is complete. Call onComplete and cleanup object",
							"params": [
								{
									"kind": "param",
									"name": "response",
									"type": "Any",
									"isFirstLevel": true
								},
								{
									"kind": "param",
									"name": "responseContent",
									"type": "Any",
									"isFirstLevel": true
								}
							]
						},
						{
							"kind": "function",
							"name": "safeCall",
							"file": "src/js/Ink/Net/Ajax/1/lib.js",
							"text": "Safely calls a callback function.\nVerifies that the callback is well defined and traps errors",
							"params": [
								{
									"kind": "param",
									"name": "listener",
									"type": "Function",
									"isFirstLevel": true
								}
							]
						},
						{
							"kind": "function",
							"name": "setRequestHeader",
							"file": "src/js/Ink/Net/Ajax/1/lib.js",
							"text": "Sets a new request header for the next http request",
							"params": [
								{
									"kind": "param",
									"name": "name",
									"type": "String",
									"isFirstLevel": true
								},
								{
									"kind": "param",
									"name": "value",
									"type": "String",
									"isFirstLevel": true
								}
							]
						},
						{
							"kind": "function",
							"name": "request",
							"file": "src/js/Ink/Net/Ajax/1/lib.js",
							"text": "Executes the request",
							"params": []
						},
						{
							"kind": "function",
							"name": "makeError",
							"file": "src/js/Ink/Net/Ajax/1/lib.js",
							"text": "Returns a new exception object that can be thrown",
							"params": [
								{
									"kind": "param",
									"name": "code",
									"isFirstLevel": true,
									"description": "Error Code"
								},
								{
									"kind": "param",
									"name": "message",
									"isFirstLevel": true,
									"description": "Message"
								}
							],
							"return": {
								"kind": "return",
								"type": "Object"
							}
						},
						{
							"kind": "function",
							"name": "isJSON",
							"file": "src/js/Ink/Net/Ajax/1/lib.js",
							"text": "Checks if a given string is valid JSON",
							"params": [
								{
									"kind": "param",
									"name": "str",
									"type": "String",
									"isFirstLevel": true,
									"description": "String to be evaluated"
								}
							],
							"return": {
								"kind": "return",
								"type": "Boolean",
								"description": "True if the string is valid JSON"
							}
						},
						{
							"kind": "function",
							"name": "evalJSON",
							"file": "src/js/Ink/Net/Ajax/1/lib.js",
							"text": "Evaluates a given string as JSON",
							"params": [
								{
									"kind": "param",
									"name": "str",
									"type": "String",
									"isFirstLevel": true,
									"description": "String to be evaluated"
								},
								{
									"kind": "param",
									"name": "sanitize",
									"type": "Boolean",
									"isFirstLevel": true,
									"description": "Flag to sanitize the content"
								}
							],
							"return": {
								"kind": "return",
								"type": "Object",
								"description": "JSON content as an object"
							}
						},
						{
							"kind": "function",
							"name": "load",
							"file": "src/js/Ink/Net/Ajax/1/lib.js",
							"text": "Loads content from a given url through an XMLHttpRequest.\n\nShortcut function for simple AJAX use cases. Works with JSON, XML and plain text.",
							"params": [
								{
									"kind": "param",
									"name": "url",
									"type": "String",
									"isFirstLevel": true,
									"description": "Request URL"
								},
								{
									"kind": "param",
									"name": "callback",
									"type": "Function",
									"isFirstLevel": true,
									"description": "Callback to be executed if the request is successful"
								}
							],
							"return": {
								"kind": "return",
								"type": "Object",
								"description": "XMLHttpRequest object"
							},
							"examples": [
								"\n     Ajax.load('some/text/file', function (responseText) {\n         doSomething(responseText);\n     });\n     Ajax.load('some/xml/file', function (responseXML) {\n         doSomething(responseXML);\n     });\n     Ajax.load('some/json/file', function (responseJSON) {\n         doSomething(responseJSON);\n     });\n\n"
							]
						},
						{
							"kind": "function",
							"name": "ping",
							"file": "src/js/Ink/Net/Ajax/1/lib.js",
							"text": "Loads content from a given url through an XMLHttpRequest.\nShortcut function for simple AJAX use cases.",
							"params": [
								{
									"kind": "param",
									"name": "url",
									"type": "String",
									"isFirstLevel": true,
									"description": "Request url"
								},
								{
									"kind": "param",
									"name": "callback",
									"type": "Function",
									"isFirstLevel": true,
									"description": "Callback to be executed if the request is successful"
								}
							],
							"return": {
								"kind": "return",
								"type": "Object",
								"description": "XMLHttpRequest object"
							}
						}
					],
					"attributes": []
				}
			],
			"functions": [],
			"attributes": [],
			"uses": [],
			"version": "1"
		},
		{
			"kind": "module",
			"name": "Ink.Net.JsonP_1",
			"file": "src/js/Ink/Net/JsonP/1/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink.Net.JsonP",
					"text": "Executes a JSONP request",
					"file": "src/js/Ink/Net/JsonP/1/lib.js",
					"functions": [
						{
							"kind": "function",
							"name": "JsonP",
							"file": "src/js/Ink/Net/JsonP/1/lib.js",
							"isConstructor": true,
							"params": [
								{
									"kind": "param",
									"name": "uri",
									"type": "String",
									"isFirstLevel": true,
									"description": "Request URL"
								},
								{
									"kind": "param",
									"name": "options",
									"type": "Object",
									"isFirstLevel": true,
									"description": "Request options"
								},
								{
									"kind": "param",
									"name": "options.onSuccess",
									"type": "Function",
									"isFirstLevel": false,
									"description": "Success callback"
								},
								{
									"kind": "param",
									"name": "options.onFailure",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Failure callback"
								},
								{
									"kind": "param",
									"name": "options.failureObj",
									"type": "Object",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Object to be passed as argument to failure callback"
								},
								{
									"kind": "param",
									"name": "options.timeout",
									"type": "Number",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Timeout for request fail, in seconds. defaults to 10"
								},
								{
									"kind": "param",
									"name": "options.params",
									"type": "Object",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Object with the parameters and respective values to unfold"
								},
								{
									"kind": "param",
									"name": "options.callbackParam",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Parameter to use as callback. defaults to 'jsoncallback'"
								},
								{
									"kind": "param",
									"name": "options.internalCallback",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Name of the callback function stored in the Ink.Net.JsonP object."
								}
							],
							"examples": [
								"\n     Ink.requireModules(['Ink.Net.JsonP_1'], function (JsonP) {\n         var jsonp = new JsonP('http://path.to.jsonp/endpoint', {\n             // When the JSONP response arrives, this callback is called:\n             onSuccess: function (gameData) {\n                 game.startGame(gameData);\n             },\n             // after options.timeout seconds, this callback gets called:\n             onFailure: function () {\n                 game.error('Could not load game data!');\n             },\n             timeout: 5\n         });\n     });\n"
							]
						}
					],
					"attributes": []
				}
			],
			"functions": [],
			"attributes": [],
			"uses": [],
			"version": "1"
		},
		{
			"kind": "module",
			"name": "Ink.UI.Animate_1",
			"file": "src/js/Ink/UI/Animate/1/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink.UI.Animate_1",
					"file": "src/js/Ink/UI/Animate/1/lib.js",
					"functions": [
						{
							"kind": "function",
							"name": "Animate_1",
							"file": "src/js/Ink/UI/Animate/1/lib.js",
							"isConstructor": true,
							"params": [
								{
									"kind": "param",
									"name": "element",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "Animated element"
								},
								{
									"kind": "param",
									"name": "options",
									"type": "Object",
									"isFirstLevel": true,
									"description": "Options object"
								},
								{
									"kind": "param",
									"name": "options.animation",
									"type": "String",
									"isFirstLevel": false,
									"description": "Animation name"
								},
								{
									"kind": "param",
									"name": "options.duration",
									"type": "String|Number",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Duration name (fast|medium|slow) or duration in milliseconds. Defaults to 'medium'."
								},
								{
									"kind": "param",
									"name": "options.removeClass",
									"type": "Boolean",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Flag to remove the CSS class when finished animating. Defaults to false."
								},
								{
									"kind": "param",
									"name": "options.onEnd",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Callback for the animation end"
								}
							],
							"examples": [
								"\n\n    <button id=\"animate-me\" class=\"ink-button\">Animate me!</button>\n    <span class=\"ink-label info ink-animate\"\n        id=\"animated\"\n        data-trigger=\"#animate-me\"\n        data-animation=\"fadeOut\"\n        data-removeClass=\"false\">Hi!</span>    \n\n    <script type=\"text/javascript\">\n        // Note: this step is not necessary if you are using autoload.js\n        Ink.requireModules(['Ink.UI.Animate_1'], function (Animate) {\n            new Animate('#animated');\n        });\n    </script>\n\n"
							]
						},
						{
							"kind": "function",
							"name": "animate",
							"file": "src/js/Ink/UI/Animate/1/lib.js",
							"text": "",
							"params": [
								{
									"kind": "param",
									"name": "element",
									"isFirstLevel": true,
									"description": "{DOMElement} animated element"
								},
								{
									"kind": "param",
									"name": "animation",
									"isFirstLevel": true,
									"description": "{String} animation name"
								},
								{
									"kind": "param",
									"name": "options",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "{Object}"
								},
								{
									"kind": "param",
									"name": "options.onEnd",
									"isOptional": true,
									"defaultValue": "null",
									"isFirstLevel": false,
									"description": "{Function} callback for animation end"
								},
								{
									"kind": "param",
									"name": "options.removeClass",
									"isOptional": true,
									"defaultValue": "false",
									"isFirstLevel": false,
									"description": "{Boolean} whether to remove the Css class when finished"
								},
								{
									"kind": "param",
									"name": "options.duration",
									"isOptional": true,
									"defaultValue": "medium",
									"isFirstLevel": false,
									"description": "{String|Number} duration name (fast|medium|slow) or duration in ms"
								}
							]
						}
					],
					"attributes": [
						{
							"kind": "attribute",
							"name": "_animationPrefix",
							"text": "Browser prefix for the CSS animations.",
							"private": true
						},
						{
							"kind": "attribute",
							"name": "animationSupported",
							"text": "CSS3 animation browser support.",
							"type": "{Boolean}"
						},
						{
							"kind": "attribute",
							"name": "animationEndEventName",
							"text": "Prefixed animation end event name.",
							"type": "{String}",
							"examples": [
								"\n\n     Animate.animate(myDiv, 'shake', {\n         onEnd: function () {\n             alert('Finished shaking!');\n         }\n     });\n\n"
							],
							"static": true
						}
					]
				}
			],
			"functions": [],
			"attributes": [],
			"uses": [],
			"version": "1"
		},
		{
			"kind": "module",
			"name": "Ink.UI.Carousel_1",
			"file": "src/js/Ink/UI/Carousel/1/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink.UI.Carousel_1",
					"file": "src/js/Ink/UI/Carousel/1/lib.js",
					"functions": [
						{
							"kind": "function",
							"name": "Carousel_1",
							"file": "src/js/Ink/UI/Carousel/1/lib.js",
							"isConstructor": true,
							"params": [
								{
									"kind": "param",
									"name": "selector",
									"type": "String|DOMElement",
									"isFirstLevel": true,
									"description": "DOM element or element id"
								},
								{
									"kind": "param",
									"name": "options",
									"type": "Object",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Carousel Options"
								},
								{
									"kind": "param",
									"name": "options.autoAdvance",
									"type": "Integer",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Milliseconds to wait before auto-advancing pages. Set to 0 to disable auto-advance. Defaults to 0."
								},
								{
									"kind": "param",
									"name": "options.axis",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Axis of the carousel. Set to 'y' for a vertical carousel. Defaults to 'x'."
								},
								{
									"kind": "param",
									"name": "options.center",
									"type": "Boolean",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Flag to center the carousel horizontally."
								},
								{
									"kind": "param",
									"name": "options.initialPage",
									"type": "Number",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Initial index page of the carousel. Defaults to 0."
								},
								{
									"kind": "param",
									"name": "options.swipe",
									"type": "Boolean",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Enable swipe support if available. Defaults to true."
								},
								{
									"kind": "param",
									"name": "options.pagination",
									"type": "Mixed",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Either an `<ul>` element to add pagination markup to or an `Ink.UI.Pagination` instance to use."
								},
								{
									"kind": "param",
									"name": "options.onChange",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Callback to be called when the page changes."
								}
							]
						},
						{
							"kind": "function",
							"name": "refit",
							"file": "src/js/Ink/UI/Carousel/1/lib.js",
							"text": "Repositions elements around.\nMeasure the carousel once again, adjusting the involved elements' sizes. This is called automatically when the window resizes, in order to cater for changes from responsive media queries, for instance.",
							"params": []
						},
						{
							"kind": "function",
							"name": "_IE7",
							"file": "src/js/Ink/UI/Carousel/1/lib.js",
							"text": "Refits elements for IE7 because it doesn't support inline-block.",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "getPage",
							"file": "src/js/Ink/UI/Carousel/1/lib.js",
							"text": "Gets the current page index",
							"params": [],
							"return": {
								"kind": "return",
								"description": "The current page number"
							}
						},
						{
							"kind": "function",
							"name": "setPage",
							"file": "src/js/Ink/UI/Carousel/1/lib.js",
							"text": "Sets the current page index",
							"params": [
								{
									"kind": "param",
									"name": "page",
									"type": "Number",
									"isFirstLevel": true,
									"description": "Index of the destination page."
								},
								{
									"kind": "param",
									"name": "wrap",
									"type": "Boolean",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Flag to activate circular counting."
								}
							]
						},
						{
							"kind": "function",
							"name": "nextPage",
							"file": "src/js/Ink/UI/Carousel/1/lib.js",
							"text": "Goes to the next page",
							"params": [
								{
									"kind": "param",
									"name": "wrap",
									"type": "Boolean",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Flag to loop from last page to first page."
								}
							]
						},
						{
							"kind": "function",
							"name": "previousPage",
							"file": "src/js/Ink/UI/Carousel/1/lib.js",
							"text": "Goes to the previous page",
							"params": [
								{
									"kind": "param",
									"name": "wrap",
									"type": "Boolean",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Flag to loop from first page to last page."
								}
							]
						}
					],
					"attributes": []
				}
			],
			"functions": [],
			"attributes": [],
			"uses": [],
			"version": "1"
		},
		{
			"kind": "module",
			"name": "Ink.UI.Close_1",
			"file": "src/js/Ink/UI/Close/1/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink.UI.Close",
					"text": "Subscribes clicks on the document.body.\nWhenever an \".ink-close,.ink-dismiss\" element is clicked, this module finds an ancestor \".ink-alert,.ink-alert-block\" element and removes it from the DOM.\nThis module should be called only once per page.",
					"file": "src/js/Ink/UI/Close/1/lib.js",
					"functions": [
						{
							"kind": "function",
							"name": "Close",
							"file": "src/js/Ink/UI/Close/1/lib.js",
							"isConstructor": true,
							"params": [],
							"examples": [
								"\n    <script>\n        Ink.requireModules(['Ink.UI.Close_1'],function( Close ){\n            new Close();\n        });\n    </script>\n"
							]
						}
					],
					"attributes": []
				}
			],
			"functions": [],
			"attributes": [],
			"uses": [],
			"version": "1\nClosing utilities"
		},
		{
			"kind": "module",
			"name": "Ink.UI.Common_1",
			"file": "src/js/Ink/UI/Common/1/lib.js",
			"classes": [],
			"functions": [
				{
					"kind": "function",
					"name": "isDOMElement",
					"file": "src/js/Ink/UI/Common/1/lib.js",
					"text": "Checks if an item is a valid DOM Element.",
					"params": [
						{
							"kind": "param",
							"name": "o",
							"type": "Mixed",
							"isFirstLevel": true,
							"description": "The object to be checked."
						}
					],
					"static": true,
					"return": {
						"kind": "return",
						"type": "Boolean",
						"description": "True if it's a valid DOM Element."
					},
					"examples": [
						"\n    var el = Ink.s('#element');\n    if( Ink.UI.Common.isDOMElement( el ) === true ){\n        // It is a DOM Element.\n    } else {\n        // It is NOT a DOM Element.\n    }\n"
					]
				},
				{
					"kind": "function",
					"name": "isInteger",
					"file": "src/js/Ink/UI/Common/1/lib.js",
					"text": "Checks if an item is a valid integer.",
					"params": [
						{
							"kind": "param",
							"name": "n",
							"type": "Mixed",
							"isFirstLevel": true,
							"description": "The value to be checked."
						}
					],
					"static": true,
					"return": {
						"kind": "return",
						"type": "Boolean",
						"description": "True if it's a valid integer."
					},
					"examples": [
						"\n    var value = 1;\n    if( Ink.UI.Common.isInteger( value ) === true ){\n        // It is an integer.\n    } else {\n        // It is NOT an integer.\n    }\n"
					]
				},
				{
					"kind": "function",
					"name": "elOrSelector",
					"file": "src/js/Ink/UI/Common/1/lib.js",
					"text": "Gets a DOM Element.",
					"params": [
						{
							"kind": "param",
							"name": "elOrSelector",
							"type": "DOMElement|String",
							"isFirstLevel": true,
							"description": "DOM Element or CSS Selector"
						},
						{
							"kind": "param",
							"name": "fieldName",
							"type": "String",
							"isFirstLevel": true,
							"description": "The name of the field. Commonly used for debugging."
						}
					],
					"static": true,
					"return": {
						"kind": "return",
						"type": "DOMElement",
						"description": "Returns the DOMElement passed or the first result of the CSS Selector. Otherwise it throws an exception."
					},
					"examples": [
						"\n    // In case there are several .myInput, it will retrieve the first found\n    var el = Ink.UI.Common.elOrSelector('.myInput','My Input');\n"
					]
				},
				{
					"kind": "function",
					"name": "elsOrSelector",
					"file": "src/js/Ink/UI/Common/1/lib.js",
					"text": "Alias for `elOrSelector` but returns an array of elements.",
					"params": [
						{
							"kind": "param",
							"name": "elOrSelector",
							"type": "DOMElement|String",
							"isFirstLevel": true,
							"description": "DOM Element or CSS Selector"
						},
						{
							"kind": "param",
							"name": "fieldName",
							"type": "String",
							"isFirstLevel": true,
							"description": "The name of the field. Commonly used for debugging."
						},
						{
							"kind": "param",
							"name": "required",
							"type": "Boolean",
							"isFirstLevel": true,
							"description": "Flag to accept an empty array as output."
						}
					],
					"static": true,
					"return": {
						"kind": "return",
						"type": "Array",
						"description": "The selected DOM Elements."
					},
					"examples": [
						"\n    var elements = Ink.UI.Common.elsOrSelector('input.my-inputs', 'My Input');\n"
					]
				},
				{
					"kind": "function",
					"name": "options",
					"file": "src/js/Ink/UI/Common/1/lib.js",
					"text": "Gets options an object and element's metadata.\n\nThe element's data attributes take precedence. Values from the element's data-atrributes are coerced into the required type.",
					"params": [
						{
							"kind": "param",
							"name": "fieldId",
							"type": "Object",
							"isOptional": true,
							"isFirstLevel": true,
							"description": "Name to be used in debugging features."
						},
						{
							"kind": "param",
							"name": "defaults",
							"type": "Object",
							"isFirstLevel": true,
							"description": "Object with the options' types and defaults."
						},
						{
							"kind": "param",
							"name": "overrides",
							"type": "Object",
							"isFirstLevel": true,
							"description": "Options to override the defaults. Usually passed when instantiating an UI module."
						},
						{
							"kind": "param",
							"name": "element",
							"type": "DOMElement",
							"isOptional": true,
							"isFirstLevel": true,
							"description": "Element with data-attributes"
						}
					],
					"examples": [
						"\n\n     this._options = Ink.UI.Common.options('MyComponent', {\n         'anobject': ['Object', null],  // Defaults to null\n         'target': ['Element', null],\n         'stuff': ['Number', 0.1],\n         'stuff2': ['Integer', 0],\n         'doKickFlip': ['Boolean', false],\n         'targets': ['Elements'], // Required option since no default was given\n         'onClick': ['Function', null]\n     }, options || {}, elm)\n\n",
						"\n\n### Note about booleans\n\nHere is how options are read from the markup\ndata-attributes, for several values`data-a-boolean`.\n\nOptions considered true:\n\n  - `data-a-boolean=\"true\"`\n  - (Every other value which is not on the list below.)\n\nOptions considered false:\n\n  - `data-a-boolean=\"false\"`\n  - `data-a-boolean=\"\"`\n  - `data-a-boolean`\n\nOptions which go to default:\n\n  - (no attribute). When `data-a-boolean` is ommitted, the\n  option is not considered true nor false, and as such\n  defaults to what is in the `defaults` argument.\n\n"
					]
				},
				{
					"kind": "function",
					"name": "clone",
					"file": "src/js/Ink/UI/Common/1/lib.js",
					"text": "Deep copy (clone) an object.\nNote: The object cannot have referece loops.",
					"params": [
						{
							"kind": "param",
							"name": "o",
							"type": "Object",
							"isFirstLevel": true,
							"description": "The object to be cloned/copied."
						}
					],
					"static": true,
					"return": {
						"kind": "return",
						"type": "Object",
						"description": "Returns the result of the clone/copy."
					},
					"examples": [
						"\n    var originalObj = {\n        key1: 'value1',\n        key2: 'value2',\n        key3: 'value3'\n    };\n    var cloneObj = Ink.UI.Common.clone( originalObj );\n"
					]
				},
				{
					"kind": "function",
					"name": "childIndex",
					"file": "src/js/Ink/UI/Common/1/lib.js",
					"text": "Gets an element's one-base index relative to its parent.",
					"params": [
						{
							"kind": "param",
							"name": "childEl",
							"type": "DOMElement",
							"isFirstLevel": true,
							"description": "Valid DOM Element."
						}
					],
					"static": true,
					"return": {
						"kind": "return",
						"type": "Number",
						"description": "Numerical position of an element relatively to its parent."
					},
					"examples": [
						"\n    <!-- Imagine the following HTML: -->\n    <ul>\n      <li>One</li>\n      <li>Two</li>\n      <li id=\"test\">Three</li>\n      <li>Four</li>\n    </ul>\n\n    <script>\n        var testLi = Ink.s('#test');\n        Ink.UI.Common.childIndex( testLi ); // Returned value: 3\n    </script>\n"
					]
				},
				{
					"kind": "function",
					"name": "ajaxJSON",
					"file": "src/js/Ink/UI/Common/1/lib.js",
					"text": "AJAX JSON request shortcut method\nIt provides a more convenient way to do an AJAX request and expect a JSON response.\nIt offers a callback option, as third parameter, for better async handling.",
					"params": [
						{
							"kind": "param",
							"name": "endpoint",
							"type": "String",
							"isFirstLevel": true,
							"description": "Valid URL to be used as target by the request."
						},
						{
							"kind": "param",
							"name": "params",
							"type": "Object",
							"isFirstLevel": true,
							"description": "This field is used in the thrown Exception to identify the parameter."
						},
						{
							"kind": "param",
							"name": "cb",
							"type": "Function",
							"isFirstLevel": true,
							"description": "Callback for the request."
						}
					],
					"static": true,
					"async": true,
					"examples": [
						"\n    // In case there are several .myInput, it will retrieve the first found\n    var el = Ink.UI.Common.elOrSelector('.myInput','My Input');\n"
					]
				},
				{
					"kind": "function",
					"name": "currentLayout",
					"file": "src/js/Ink/UI/Common/1/lib.js",
					"text": "Gets the current Ink layout.",
					"params": [],
					"static": true,
					"return": {
						"kind": "return",
						"type": "String",
						"description": "A string representation of the current layout name."
					},
					"examples": [
						"\n     var inkLayout = Ink.UI.Common.currentLayout();\n     if (inkLayout === 'small') {\n         // ...\n     }\n"
					]
				},
				{
					"kind": "function",
					"name": "hashSet",
					"file": "src/js/Ink/UI/Common/1/lib.js",
					"text": "Sets the location's hash (window.location.hash).",
					"params": [
						{
							"kind": "param",
							"name": "o",
							"type": "Object",
							"isFirstLevel": true,
							"description": "Object with the info to be placed in the location's hash."
						}
					],
					"static": true,
					"examples": [
						"\n    // It will set the location's hash like: <url>#key1=value1&key2=value2&key3=value3\n    Ink.UI.Common.hashSet({\n        key1: 'value1',\n        key2: 'value2',\n        key3: 'value3'\n    });\n"
					]
				},
				{
					"kind": "function",
					"name": "cleanChildren",
					"file": "src/js/Ink/UI/Common/1/lib.js",
					"text": "Removes children nodes from a given object.\nThis method was initially created to help solve a problem in Internet Explorer(s) that occurred when trying to set the innerHTML of some specific elements like 'table'.",
					"params": [
						{
							"kind": "param",
							"name": "parentEl",
							"type": "DOMElement",
							"isFirstLevel": true,
							"description": "Valid DOM Element"
						}
					],
					"static": true,
					"examples": [
						"\n    <!-- Imagine the following HTML: -->\n    <ul id=\"myUl\">\n      <li>One</li>\n      <li>Two</li>\n      <li>Three</li>\n      <li>Four</li>\n    </ul>\n\n    <script>\n    Ink.UI.Common.cleanChildren( Ink.s( '#myUl' ) );\n    </script>\n\n    <!-- After running it, the HTML changes to: -->\n    <ul id=\"myUl\"></ul>\n"
					]
				},
				{
					"kind": "function",
					"name": "storeIdAndClasses",
					"file": "src/js/Ink/UI/Common/1/lib.js",
					"text": "Stores the id and/or classes of an element in an object.",
					"params": [
						{
							"kind": "param",
							"name": "fromEl",
							"type": "DOMElement",
							"isFirstLevel": true,
							"description": "Valid DOM Element to get the id and classes from."
						},
						{
							"kind": "param",
							"name": "inObj",
							"type": "Object",
							"isFirstLevel": true,
							"description": "Object where the id and classes will be saved."
						}
					],
					"static": true,
					"examples": [
						"\n    <div id=\"myDiv\" class=\"aClass\"></div>\n\n    <script>\n        var storageObj = {};\n        Ink.UI.Common.storeIdAndClasses( Ink.s('#myDiv'), storageObj );\n        // storageObj changes to:\n        {\n          _id: 'myDiv',\n          _classes: 'aClass'\n        }\n    </script>\n"
					]
				},
				{
					"kind": "function",
					"name": "restoreIdAndClasses",
					"file": "src/js/Ink/UI/Common/1/lib.js",
					"text": "Sets the id and className properties of an element based",
					"params": [
						{
							"kind": "param",
							"name": "toEl",
							"type": "DOMElement",
							"isFirstLevel": true,
							"description": "Valid DOM Element to set the id and classes on."
						},
						{
							"kind": "param",
							"name": "inObj",
							"type": "Object",
							"isFirstLevel": true,
							"description": "Object where the id and classes to be set are. This method uses the same format as the one given in `storeIdAndClasses`"
						}
					],
					"static": true,
					"examples": [
						"\n    <div></div>\n\n    <script>\n        var storageObj = {\n          _id: 'myDiv',\n          _classes: 'aClass'\n        };\n\n        Ink.UI.Common.storeIdAndClasses( Ink.s('div'), storageObj );\n    </script>\n\n    <!-- After the code runs the div element changes to: -->\n    <div id=\"myDiv\" class=\"aClass\"></div>\n"
					]
				},
				{
					"kind": "function",
					"name": "registerInstance",
					"file": "src/js/Ink/UI/Common/1/lib.js",
					"text": "Saves a component's instance reference for later retrieval.",
					"params": [
						{
							"kind": "param",
							"name": "inst",
							"type": "Object",
							"isFirstLevel": true,
							"description": "Object that holds the instance."
						},
						{
							"kind": "param",
							"name": "el",
							"type": "DOMElement",
							"isFirstLevel": true,
							"description": "DOM Element to associate with the object."
						},
						{
							"kind": "param",
							"name": "optionalPrefix",
							"type": "Object",
							"isOptional": true,
							"isFirstLevel": true,
							"description": "Defaults to 'instance'"
						}
					],
					"static": true
				},
				{
					"kind": "function",
					"name": "unregisterInstance",
					"file": "src/js/Ink/UI/Common/1/lib.js",
					"text": "Deletes an instance with a given id.",
					"params": [
						{
							"kind": "param",
							"name": "id",
							"type": "String",
							"isFirstLevel": true,
							"description": "Id of the instance to be destroyed."
						}
					],
					"static": true
				},
				{
					"kind": "function",
					"name": "getInstance",
					"file": "src/js/Ink/UI/Common/1/lib.js",
					"text": "Gets an UI instance from an element or instance id.",
					"params": [
						{
							"kind": "param",
							"name": "instanceIdOrElement",
							"type": "String|DOMElement",
							"isFirstLevel": true,
							"description": "Instance's id or DOM Element from which we want the instances."
						}
					],
					"static": true,
					"return": {
						"kind": "return",
						"type": "Object|Array",
						"description": "Returns an instance or a collection of instances."
					}
				},
				{
					"kind": "function",
					"name": "getInstanceFromSelector",
					"file": "src/js/Ink/UI/Common/1/lib.js",
					"text": "Gets an instance based on a selector.",
					"params": [
						{
							"kind": "param",
							"name": "selector",
							"type": "String",
							"isFirstLevel": true,
							"description": "CSS selector to get the instances from."
						}
					],
					"static": true,
					"return": {
						"kind": "return",
						"type": "Object|Array",
						"description": "Returns an instance or a collection of instances."
					}
				},
				{
					"kind": "function",
					"name": "getInstanceIds",
					"file": "src/js/Ink/UI/Common/1/lib.js",
					"text": "Gets all the instance ids",
					"params": [],
					"static": true,
					"return": {
						"kind": "return",
						"type": "Array",
						"description": "Collection of instance ids"
					}
				},
				{
					"kind": "function",
					"name": "getInstances",
					"file": "src/js/Ink/UI/Common/1/lib.js",
					"text": "Gets all the instances",
					"params": [],
					"static": true,
					"return": {
						"kind": "return",
						"type": "Array",
						"description": "Collection of existing instances."
					}
				},
				{
					"kind": "function",
					"name": "destroyComponent",
					"file": "src/js/Ink/UI/Common/1/lib.js",
					"text": "Boilerplate method to destroy a component.\nComponents should copy this method as its destroy method and modify it.",
					"params": [],
					"static": true
				}
			],
			"attributes": [
				{
					"kind": "attribute",
					"name": "Layouts",
					"text": "Supported Ink Layouts",
					"type": "Object"
				}
			],
			"uses": [],
			"version": "1"
		},
		{
			"kind": "module",
			"name": "Ink.UI.DatePicker_1",
			"file": "src/js/Ink/UI/DatePicker/1/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink.UI.DatePicker",
					"file": "src/js/Ink/UI/DatePicker/1/lib.js",
					"functions": [
						{
							"kind": "function",
							"name": "DatePicker",
							"file": "src/js/Ink/UI/DatePicker/1/lib.js",
							"isConstructor": true,
							"params": [
								{
									"kind": "param",
									"name": "selector",
									"type": "String|DOMElement",
									"isFirstLevel": true
								},
								{
									"kind": "param",
									"name": "options",
									"type": "Object",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Options"
								},
								{
									"kind": "param",
									"name": "options.autoOpen",
									"type": "Boolean",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Flag to automatically open the datepicker."
								},
								{
									"kind": "param",
									"name": "options.cleanText",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Text for the clean button. Defaults to 'Limpar'."
								},
								{
									"kind": "param",
									"name": "options.closeText",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Text for the close button. Defaults to 'Fechar'."
								},
								{
									"kind": "param",
									"name": "options.cssClass",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "CSS class to be applied on the datepicker"
								},
								{
									"kind": "param",
									"name": "options.dateRange",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Enforce limits to year, month and day for the Date, ex: '1990-08-25:2020-11'"
								},
								{
									"kind": "param",
									"name": "options.displayInSelect",
									"type": "Boolean",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Flag to display the component in a select element."
								},
								{
									"kind": "param",
									"name": "options.dayField",
									"type": "String|DOMElement",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "(if using options.displayInSelect) `select` field with days."
								},
								{
									"kind": "param",
									"name": "options.monthField",
									"type": "String|DOMElement",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "(if using options.displayInSelect) `select` field with months."
								},
								{
									"kind": "param",
									"name": "options.yearField",
									"type": "String|DOMElement",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "(if using options.displayInSelect) `select` field with years."
								},
								{
									"kind": "param",
									"name": "options.format",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Date format string"
								},
								{
									"kind": "param",
									"name": "options.instance",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Unique id for the datepicker"
								},
								{
									"kind": "param",
									"name": "options.month",
									"type": "Object",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Hash of month names. Defaults to portuguese month names. January is 1."
								},
								{
									"kind": "param",
									"name": "options.nextLinkText",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Text for the previous button. Defaults to '«'."
								},
								{
									"kind": "param",
									"name": "options.ofText",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Text to show between month and year. Defaults to ' of '."
								},
								{
									"kind": "param",
									"name": "options.onFocus",
									"type": "Boolean",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "If the datepicker should open when the target element is focused. Defaults to true."
								},
								{
									"kind": "param",
									"name": "options.onMonthSelected",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Callback to execute when the month is selected."
								},
								{
									"kind": "param",
									"name": "options.onSetDate",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Callback to execute when the date is set."
								},
								{
									"kind": "param",
									"name": "options.onYearSelected",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Callback to execute when the year is selected."
								},
								{
									"kind": "param",
									"name": "options.position",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Position for the datepicker. Either 'right' or 'bottom'. Defaults to 'right'."
								},
								{
									"kind": "param",
									"name": "options.prevLinkText",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Text for the previous button. Defaults to '«'."
								},
								{
									"kind": "param",
									"name": "options.showClean",
									"type": "Boolean",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "If the clean button should be visible. Defaults to true."
								},
								{
									"kind": "param",
									"name": "options.showClose",
									"type": "Boolean",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "If the close button should be visible. Defaults to true."
								},
								{
									"kind": "param",
									"name": "options.shy",
									"type": "Boolean",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "If the datepicker should start automatically. Defaults to true."
								},
								{
									"kind": "param",
									"name": "options.startDate",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Date to define initial month. Must be in yyyy-mm-dd format."
								},
								{
									"kind": "param",
									"name": "options.startWeekDay",
									"type": "Number",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "First day of the week. Sunday is zero. Defaults to 1 (Monday)."
								},
								{
									"kind": "param",
									"name": "options.validYearFn",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Callback to execute when 'rendering' the month (in the month view)"
								},
								{
									"kind": "param",
									"name": "options.validMonthFn",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Callback to execute when 'rendering' the month (in the month view)"
								},
								{
									"kind": "param",
									"name": "options.validDayFn",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Callback to execute when 'rendering' the day (in the month view)"
								},
								{
									"kind": "param",
									"name": "options.nextValidDateFn",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Function to calculate the next valid date, given the current. Useful when there's invalid dates or time frames."
								},
								{
									"kind": "param",
									"name": "options.prevValidDateFn",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Function to calculate the previous valid date, given the current. Useful when there's invalid dates or time frames."
								},
								{
									"kind": "param",
									"name": "options.wDay",
									"type": "Object",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Hash of weekdays. Defaults to portuguese names. Sunday is 0."
								},
								{
									"kind": "param",
									"name": "options.yearRange",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Enforce limits to year for the Date, ex: '1990:2020' (deprecated)"
								}
							],
							"version": "1",
							"examples": [
								"\n    <input type=\"text\" id=\"dPicker\" />\n    <script>\n        Ink.requireModules(['Ink.Dom.Selector_1','Ink.UI.DatePicker_1'],function( Selector, DatePicker ){\n            var datePickerElement = Ink.s('#dPicker');\n            var datePickerObj = new DatePicker( datePickerElement );\n        });\n    </script>\n"
							]
						},
						{
							"kind": "function",
							"name": "_init",
							"file": "src/js/Ink/UI/DatePicker/1/lib.js",
							"text": "Initialization function. Called by the constructor and receives the same parameters.",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_render",
							"file": "src/js/Ink/UI/DatePicker/1/lib.js",
							"text": "Renders the DatePicker's markup.",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "show",
							"file": "src/js/Ink/UI/DatePicker/1/lib.js",
							"text": "Shows the calendar.",
							"params": []
						},
						{
							"kind": "function",
							"name": "_renderMonthSelector",
							"file": "src/js/Ink/UI/DatePicker/1/lib.js",
							"text": "Creates the markup of the view with months.",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_onChangerClick",
							"file": "src/js/Ink/UI/DatePicker/1/lib.js",
							"text": "Handles click events on a changer (« ») for next/prev year/month",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_onAbsoluteChangerClick",
							"file": "src/js/Ink/UI/DatePicker/1/lib.js",
							"text": "Handles click events on an atom-changer (day button, month button, year button)",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_hide",
							"file": "src/js/Ink/UI/DatePicker/1/lib.js",
							"text": "Hides the DatePicker.\nIf the component is shy (options.shy), behaves differently.",
							"params": [
								{
									"kind": "param",
									"name": "blur",
									"type": "Boolean",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "If false, forces hiding even if the component is shy."
								}
							]
						},
						{
							"kind": "function",
							"name": "_setMinMax",
							"file": "src/js/Ink/UI/DatePicker/1/lib.js",
							"text": "Sets the range of dates allowed to be selected in the Date Picker",
							"params": [
								{
									"kind": "param",
									"name": "dateRange",
									"type": "String",
									"isFirstLevel": true,
									"description": "Two dates separated by a ':'. Example: 2013-01-01:2013-12-12"
								}
							],
							"private": true
						},
						{
							"kind": "function",
							"name": "_fitDateToRange",
							"file": "src/js/Ink/UI/DatePicker/1/lib.js",
							"text": "Checks if a date is between the valid range.\nStarts by checking if the date passed is valid. If not, will fallback to the 'today' date.\nThen checks if the all params are inside of the date range specified. If not, it will fallback to the nearest valid date (either Min or Max).",
							"params": [
								{
									"kind": "param",
									"name": "year",
									"type": "Number",
									"isFirstLevel": true,
									"description": "Year with 4 digits (yyyy)"
								},
								{
									"kind": "param",
									"name": "month",
									"type": "Number",
									"isFirstLevel": true,
									"description": "Month"
								},
								{
									"kind": "param",
									"name": "day",
									"type": "Number",
									"isFirstLevel": true,
									"description": "Day"
								}
							],
							"return": {
								"kind": "return",
								"type": "Array",
								"description": "Array with the final processed date."
							},
							"private": true
						},
						{
							"kind": "function",
							"name": "_dateWithinRange",
							"file": "src/js/Ink/UI/DatePicker/1/lib.js",
							"text": "Checks whether a date is within the valid date range",
							"params": [
								{
									"kind": "param",
									"name": "year",
									"isFirstLevel": true
								},
								{
									"kind": "param",
									"name": "month",
									"isFirstLevel": true
								},
								{
									"kind": "param",
									"name": "day",
									"isFirstLevel": true
								}
							],
							"return": {
								"kind": "return",
								"type": "Boolean"
							},
							"private": true
						},
						{
							"kind": "function",
							"name": "_showDefaultView",
							"file": "src/js/Ink/UI/DatePicker/1/lib.js",
							"text": "Sets the markup in the default view mode (showing the days).\nAlso disables the previous and next buttons in case they don't meet the range requirements.",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_updateDate",
							"file": "src/js/Ink/UI/DatePicker/1/lib.js",
							"text": "Updates the date shown on the datepicker",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_updateDescription",
							"file": "src/js/Ink/UI/DatePicker/1/lib.js",
							"text": "Updates the date description shown at the top of the datepicker\n\nEG \"12 de November\"",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_showYearSelector",
							"file": "src/js/Ink/UI/DatePicker/1/lib.js",
							"text": "Renders the year selector view of the datepicker",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_showMonthSelector",
							"file": "src/js/Ink/UI/DatePicker/1/lib.js",
							"text": "Show the month selector (happens when you click a year, or the \"month\" link.",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_parseDate",
							"file": "src/js/Ink/UI/DatePicker/1/lib.js",
							"text": "This function returns the given date in the dateish format",
							"params": [
								{
									"kind": "param",
									"name": "dateStr",
									"type": "String",
									"isFirstLevel": true,
									"description": "A date on a string."
								}
							],
							"private": true
						},
						{
							"kind": "function",
							"name": "_isValidDate",
							"file": "src/js/Ink/UI/DatePicker/1/lib.js",
							"text": "Checks if a date is valid",
							"params": [
								{
									"kind": "param",
									"name": "date",
									"type": "Dateish",
									"isFirstLevel": true
								}
							],
							"private": true,
							"return": {
								"kind": "return",
								"type": "Boolean",
								"description": "True if the date is valid, false otherwise"
							}
						},
						{
							"kind": "function",
							"name": "_isDate",
							"file": "src/js/Ink/UI/DatePicker/1/lib.js",
							"text": "Checks if a given date is an valid format.",
							"params": [
								{
									"kind": "param",
									"name": "format",
									"type": "String",
									"isFirstLevel": true,
									"description": "A date format."
								},
								{
									"kind": "param",
									"name": "dateStr",
									"type": "String",
									"isFirstLevel": true,
									"description": "A date on a string."
								}
							],
							"private": true,
							"return": {
								"kind": "return",
								"type": "Boolean",
								"description": "True if the given date is valid according to the given format"
							}
						},
						{
							"kind": "function",
							"name": "_writeDateInFormat",
							"file": "src/js/Ink/UI/DatePicker/1/lib.js",
							"text": "This method returns the date written with the format specified on the options",
							"params": [],
							"private": true,
							"return": {
								"kind": "return",
								"type": "String",
								"description": "Returns the current date of the object in the specified format"
							}
						},
						{
							"kind": "function",
							"name": "setDate",
							"file": "src/js/Ink/UI/DatePicker/1/lib.js",
							"text": "This method allows the user to set the DatePicker's date on run-time.",
							"params": [
								{
									"kind": "param",
									"name": "dateString",
									"type": "String",
									"isFirstLevel": true,
									"description": "A date string in yyyy-mm-dd format."
								}
							]
						},
						{
							"kind": "function",
							"name": "getDate",
							"file": "src/js/Ink/UI/DatePicker/1/lib.js",
							"text": "Gets the current date as a JavaScript date.",
							"params": []
						},
						{
							"kind": "function",
							"name": "_setDate",
							"file": "src/js/Ink/UI/DatePicker/1/lib.js",
							"text": "Sets the chosen date on the target input field",
							"params": [
								{
									"kind": "param",
									"name": "objClicked",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "Clicked object inside the DatePicker's calendar."
								}
							],
							"private": true
						},
						{
							"kind": "function",
							"name": "_updateCal",
							"file": "src/js/Ink/UI/DatePicker/1/lib.js",
							"text": "Makes the necessary work to update the calendar\nwhen choosing a different month",
							"params": [
								{
									"kind": "param",
									"name": "inc",
									"type": "Number",
									"isFirstLevel": true,
									"description": "Indicates previous or next month"
								}
							],
							"private": true
						},
						{
							"kind": "function",
							"name": "_daysInMonth",
							"file": "src/js/Ink/UI/DatePicker/1/lib.js",
							"text": "Function that returns the number of days on a given month on a given year",
							"params": [
								{
									"kind": "param",
									"name": "_y",
									"type": "Number",
									"isFirstLevel": true,
									"description": "- year"
								},
								{
									"kind": "param",
									"name": "_m",
									"type": "Number",
									"isFirstLevel": true,
									"description": "- month"
								}
							],
							"private": true,
							"return": {
								"kind": "return",
								"type": "Number",
								"description": "The number of days on a given month on a given year"
							}
						},
						{
							"kind": "function",
							"name": "_updateMonth",
							"file": "src/js/Ink/UI/DatePicker/1/lib.js",
							"text": "Updates the calendar when a different month is chosen",
							"params": [
								{
									"kind": "param",
									"name": "incValue",
									"type": "Number",
									"isFirstLevel": true,
									"description": "- indicates previous or next month"
								}
							],
							"private": true
						},
						{
							"kind": "function",
							"name": "_renderMonth",
							"file": "src/js/Ink/UI/DatePicker/1/lib.js",
							"text": "Renders the current month",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_getDayButtonHtml",
							"file": "src/js/Ink/UI/DatePicker/1/lib.js",
							"text": "Get the HTML markup for a single day in month view, given year, month, day.",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_addMonthClassNames",
							"file": "src/js/Ink/UI/DatePicker/1/lib.js",
							"text": "This method adds class names to month buttons, to visually distinguish.",
							"params": [
								{
									"kind": "param",
									"name": "parent",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "DOMElement where all the months are."
								},
								{
									"kind": "param",
									"name": "options",
									"type": "Object",
									"isFirstLevel": true,
									"description": "Object with the texts' configuration."
								},
								{
									"kind": "param",
									"name": "options.closeText",
									"type": "String",
									"isFirstLevel": false,
									"description": "Text of the close anchor"
								},
								{
									"kind": "param",
									"name": "options.cleanText",
									"type": "String",
									"isFirstLevel": false,
									"description": "Text of the clean text anchor"
								},
								{
									"kind": "param",
									"name": "options.prevLinkText",
									"type": "String",
									"isFirstLevel": false,
									"description": "\"Previous\" link's text"
								},
								{
									"kind": "param",
									"name": "options.nextLinkText",
									"type": "String",
									"isFirstLevel": false,
									"description": "\"Next\" link's text"
								},
								{
									"kind": "param",
									"name": "options.ofText",
									"type": "String",
									"isFirstLevel": false,
									"description": "The text \"of\", present in 'May of 2013'"
								},
								{
									"kind": "param",
									"name": "options.month",
									"type": "Object",
									"isFirstLevel": false,
									"description": "An object with keys from 1 to 12 for the full months' names"
								},
								{
									"kind": "param",
									"name": "options.wDay",
									"type": "Object",
									"isFirstLevel": false,
									"description": "An object with keys from 0 to 6 for the full weekdays' names"
								}
							],
							"private": true,
							"return": {
								"kind": "return",
								"type": "Boolean",
								"description": "True if the calendar screen is in 'select day' mode"
							}
						}
					],
					"attributes": [
						{
							"kind": "attribute",
							"name": "_dateParsers",
							"text": "Key-value object that (for a given key) points to the correct parsing format for the DatePicker",
							"type": "Object"
						}
					]
				}
			],
			"functions": [],
			"attributes": [],
			"uses": [],
			"version": "1\nDate selector"
		},
		{
			"kind": "module",
			"name": "Ink.UI.Draggable_1",
			"file": "src/js/Ink/UI/Draggable/1/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink.UI.Draggable",
					"file": "src/js/Ink/UI/Draggable/1/lib.js",
					"functions": [
						{
							"kind": "function",
							"name": "Draggable",
							"file": "src/js/Ink/UI/Draggable/1/lib.js",
							"isConstructor": true,
							"params": [
								{
									"kind": "param",
									"name": "target",
									"type": "String|DOMElement",
									"isFirstLevel": true,
									"description": "Target element."
								},
								{
									"kind": "param",
									"name": "options",
									"type": "Object",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Optional object to configure the component."
								},
								{
									"kind": "param",
									"name": "options.constraint",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Movement constraint. None by default. Can be `vertical`, `horizontal`, or `both`."
								},
								{
									"kind": "param",
									"name": "options.constraintElm",
									"type": "String|DOMElement",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Constrain dragging to be within this element. None by default."
								},
								{
									"kind": "param",
									"name": "options.top",
									"type": "Number",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Limits to constrain draggable movement."
								},
								{
									"kind": "param",
									"name": "options.right",
									"type": "Number",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Limits to constrain draggable movement."
								},
								{
									"kind": "param",
									"name": "options.bottom",
									"type": "Number",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Limits to constrain draggable movement."
								},
								{
									"kind": "param",
									"name": "options.left",
									"type": "Number",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Limits to constrain draggable movement."
								},
								{
									"kind": "param",
									"name": "options.handle",
									"type": "String|DOMElement",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "If specified, this element or CSS ID will be used as a handle for dragging."
								},
								{
									"kind": "param",
									"name": "options.revert",
									"type": "Boolean",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Flag to revert the draggable to the original position when dragging stops."
								},
								{
									"kind": "param",
									"name": "options.cursor",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Cursor type (CSS `cursor` value) used when the mouse is over the draggable object."
								},
								{
									"kind": "param",
									"name": "options.zIndex",
									"type": "Number",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Z-index applied to the draggable element while dragged."
								},
								{
									"kind": "param",
									"name": "options.fps",
									"type": "Number",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "If set, throttles the drag effect to this number of frames per second."
								},
								{
									"kind": "param",
									"name": "options.droppableProxy",
									"type": "DOMElement",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "If set, a shallow copy of this element will be moved around with transparent background."
								},
								{
									"kind": "param",
									"name": "options.mouseAnchor",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Anchor for the drag. Can be one of: 'left','center','right','top','center','bottom'."
								},
								{
									"kind": "param",
									"name": "options.dragClass",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Class to add when the draggable is being dragged. Defaults to drag."
								},
								{
									"kind": "param",
									"name": "options.onStart",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Callback called when dragging starts."
								},
								{
									"kind": "param",
									"name": "options.onEnd",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Callback called when dragging stops."
								},
								{
									"kind": "param",
									"name": "options.onDrag",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Callback called while dragging, prior to position updates."
								},
								{
									"kind": "param",
									"name": "options.onChange",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Callback called while dragging, after position updates."
								}
							],
							"examples": [
								"\n    Ink.requireModules( ['Ink.UI.Draggable_1'], function( Draggable ){\n        new Draggable( '#myElementId' );\n    });\n"
							]
						},
						{
							"kind": "function",
							"name": "_init",
							"file": "src/js/Ink/UI/Draggable/1/lib.js",
							"text": "Init function called by the constructor",
							"params": [
								{
									"kind": "param",
									"name": "element",
									"type": "String|DOMElement",
									"isFirstLevel": true,
									"description": "Element ID of the element or DOM Element."
								},
								{
									"kind": "param",
									"name": "options",
									"type": "Object",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Options object for configuration of the module."
								}
							],
							"private": true
						},
						{
							"kind": "function",
							"name": "destroy",
							"file": "src/js/Ink/UI/Draggable/1/lib.js",
							"text": "Removes the ability of the element of being dragged",
							"params": []
						},
						{
							"kind": "function",
							"name": "_getCoords",
							"file": "src/js/Ink/UI/Draggable/1/lib.js",
							"text": "Gets coordinates for a given event (with added page scroll)",
							"params": [
								{
									"kind": "param",
									"name": "e",
									"type": "Object",
									"isFirstLevel": true,
									"description": "window.event object."
								}
							],
							"return": {
								"kind": "return",
								"type": "Array",
								"description": "Array where the first position is the x coordinate, the second is the y coordinate"
							},
							"private": true
						},
						{
							"kind": "function",
							"name": "_cloneStyle",
							"file": "src/js/Ink/UI/Draggable/1/lib.js",
							"text": "Clones src element's relevant properties to dst",
							"params": [
								{
									"kind": "param",
									"name": "src",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "Element from where we're getting the styles"
								},
								{
									"kind": "param",
									"name": "dst",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "Element where we're placing the styles."
								}
							],
							"private": true
						},
						{
							"kind": "function",
							"name": "_onStart",
							"file": "src/js/Ink/UI/Draggable/1/lib.js",
							"text": "onStart event handler",
							"params": [
								{
									"kind": "param",
									"name": "e",
									"type": "Object",
									"isFirstLevel": true,
									"description": "window.event object"
								}
							],
							"return": {
								"kind": "return",
								"type": "Boolean|void",
								"description": "In some cases return false. Otherwise is void"
							},
							"private": true
						},
						{
							"kind": "function",
							"name": "_onDragFacade",
							"file": "src/js/Ink/UI/Draggable/1/lib.js",
							"text": "Function that gets the timestamp of the current run from time to time. (FPS)",
							"params": [
								{
									"kind": "param",
									"name": "window.event",
									"type": "Object",
									"isFirstLevel": false,
									"description": "object."
								}
							],
							"private": true
						},
						{
							"kind": "function",
							"name": "_onDrag",
							"file": "src/js/Ink/UI/Draggable/1/lib.js",
							"text": "Function that handles the dragging movement",
							"params": [
								{
									"kind": "param",
									"name": "window.event",
									"type": "Object",
									"isFirstLevel": false,
									"description": "object."
								}
							],
							"private": true
						},
						{
							"kind": "function",
							"name": "_onEnd",
							"file": "src/js/Ink/UI/Draggable/1/lib.js",
							"text": "Function that handles the end of the dragging process",
							"params": [
								{
									"kind": "param",
									"name": "window.event",
									"type": "Object",
									"isFirstLevel": false,
									"description": "object."
								}
							],
							"private": true
						}
					],
					"attributes": [],
					"version": "1"
				}
			],
			"functions": [],
			"attributes": [],
			"uses": [],
			"version": "1"
		},
		{
			"kind": "module",
			"name": "Ink.UI.Drawer_1",
			"file": "src/js/Ink/UI/Drawer/1/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink.UI.Drawer_1",
					"text": "Displays off-canvas (to the left and to the right) content which can be triggered by clicking elements with the 'left-drawer-trigger' and 'right-drawer-trigger', respectively.\n\nThe left drawer has the 'left-drawer' class, and the right drawer has the 'right-drawer' class.\n\nThe content drawer (EG your `<div id=\"main\">`) must have the 'content-drawer' class.\n\nFor more, see the example below, or try the sample.",
					"file": "src/js/Ink/UI/Drawer/1/lib.js",
					"functions": [
						{
							"kind": "function",
							"name": "Drawer_1",
							"file": "src/js/Ink/UI/Drawer/1/lib.js",
							"isConstructor": true,
							"params": [
								{
									"kind": "param",
									"name": "options",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "{Object} object containing the following options:"
								},
								{
									"kind": "param",
									"name": "options.closeOnContentClick",
									"isOptional": true,
									"defaultValue": "true",
									"isFirstLevel": false,
									"description": "{Boolean}"
								},
								{
									"kind": "param",
									"name": "options.mode",
									"isOptional": true,
									"defaultValue": "'push'",
									"isFirstLevel": false,
									"description": "{String}"
								},
								{
									"kind": "param",
									"name": "options.sides",
									"isOptional": true,
									"defaultValue": "'both'",
									"isFirstLevel": false,
									"description": "{String}"
								}
							],
							"examples": [
								"\n\n     <body class=\"ink-drawer\">\n         <div class=\"left-drawer\">\n             Right drawer content...\n         </div>\n         <div class=\"right-drawer\">\n             Left drawer content...\n         </div>\n         <div id=\"main-content\" class=\"content-drawer ink-grid\">\n             <a class=\"left-drawer-trigger\" href=\"\">Open left drawer</a>\n             <a class=\"right-drawer-trigger\" href=\"\">Open right drawer</a>\n             Content...\n         </div>\n     </body>\n\n     <script>\n         Ink.requireModules(['Ink.UI.Drawer_1'], function (Drawer) {\n             new Drawer();\n         });\n     </script>\n"
							]
						},
						{
							"kind": "function",
							"name": "_onClick",
							"file": "src/js/Ink/UI/Drawer/1/lib.js",
							"text": "Click event handler. Listens to the body's click event",
							"params": [],
							"private": true
						}
					],
					"attributes": []
				}
			],
			"functions": [],
			"attributes": [],
			"uses": [],
			"version": "1"
		},
		{
			"kind": "module",
			"name": "Ink.UI.Dropdown_1",
			"file": "src/js/Ink/UI/Dropdown/1/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink.UI.Dropdown",
					"text": "Use this UI module to achieve a dropdown menu.",
					"file": "src/js/Ink/UI/Dropdown/1/lib.js",
					"functions": [
						{
							"kind": "function",
							"name": "Dropdown",
							"file": "src/js/Ink/UI/Dropdown/1/lib.js",
							"isConstructor": true,
							"params": [
								{
									"kind": "param",
									"name": "trigger",
									"type": "DOMElement|String",
									"isFirstLevel": true
								},
								{
									"kind": "param",
									"name": "options",
									"type": "Object",
									"isFirstLevel": true
								},
								{
									"kind": "param",
									"name": "options.target",
									"type": "DOMElement|String",
									"isFirstLevel": false,
									"description": "Target of the dropdown action."
								}
							]
						},
						{
							"kind": "function",
							"name": "_onMouseOver",
							"file": "src/js/Ink/UI/Dropdown/1/lib.js",
							"text": "Called when the mouse is over the toggler, or the dropdown.\n\nDeals with \"hoverOpen\" by setting the dropdown to open later. Also cancels \"dismissAfter\".",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_onMouseOut",
							"file": "src/js/Ink/UI/Dropdown/1/lib.js",
							"text": "Called when the mouse leaves either the toggler, or the dropdown.\n\nDeals with \"dismissAfter\" by setting the dropdown to be dismissed later. Also cancels \"hoverOpen\".",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_onInsideClick",
							"file": "src/js/Ink/UI/Dropdown/1/lib.js",
							"text": "Handle clicks on the dropdown.",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_onInsideClick",
							"file": "src/js/Ink/UI/Dropdown/1/lib.js",
							"text": "Handle clicks outside the dropdown.",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "dismiss",
							"file": "src/js/Ink/UI/Dropdown/1/lib.js",
							"text": "Dismiss the dropdown.",
							"params": [
								{
									"kind": "param",
									"name": "callHandler",
									"isOptional": true,
									"defaultValue": "false",
									"isFirstLevel": true,
									"description": "call onDismiss handler"
								}
							]
						},
						{
							"kind": "function",
							"name": "open",
							"file": "src/js/Ink/UI/Dropdown/1/lib.js",
							"text": "Open the dropdown",
							"params": [
								{
									"kind": "param",
									"name": "callHandler",
									"isOptional": true,
									"defaultValue": "false",
									"isFirstLevel": true,
									"description": "call onOpen handler"
								}
							]
						},
						{
							"kind": "function",
							"name": "_openOrDismiss",
							"file": "src/js/Ink/UI/Dropdown/1/lib.js",
							"text": "DRY'ing up open() and dismiss()",
							"params": [
								{
									"kind": "param",
									"name": "newState",
									"isOptional": true,
									"defaultValue": "false",
									"isFirstLevel": true
								},
								{
									"kind": "param",
									"name": "callHandler",
									"isOptional": true,
									"defaultValue": "false",
									"isFirstLevel": true
								}
							],
							"private": true
						},
						{
							"kind": "function",
							"name": "_handlerCall",
							"file": "src/js/Ink/UI/Dropdown/1/lib.js",
							"text": "call a method given by the user through the options",
							"params": [
								{
									"kind": "param",
									"name": "handler",
									"isFirstLevel": true,
									"description": "{String} The handler name in this._options"
								},
								{
									"kind": "param",
									"name": "args*",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Arguments to pass to function"
								}
							]
						}
					],
					"attributes": []
				}
			],
			"functions": [],
			"attributes": [],
			"uses": [],
			"author": "inkdev AT sapo.pt",
			"version": "1"
		},
		{
			"kind": "module",
			"name": "Ink.UI.Droppable_1",
			"file": "src/js/Ink/UI/Droppable/1/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink.UI.Droppable",
					"file": "src/js/Ink/UI/Droppable/1/lib.js",
					"functions": [
						{
							"kind": "function",
							"name": "add",
							"file": "src/js/Ink/UI/Droppable/1/lib.js",
							"text": "Makes an element droppable and adds it to the stack of droppable elements.\nCan consider it a constructor of droppable elements, but where no Droppable object is returned.\n\nIn the following arguments, any events/callbacks you may pass, can be either functions or strings. If the 'move' or 'copy' strings are passed, the draggable gets moved into this droppable. If 'revert' is passed, an acceptable droppable is moved back to the element it came from.",
							"params": [
								{
									"kind": "param",
									"name": "element",
									"type": "String|DOMElement",
									"isFirstLevel": true,
									"description": "Target element"
								},
								{
									"kind": "param",
									"name": "options",
									"type": "Object",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "options object"
								},
								{
									"kind": "param",
									"name": "options.hoverClass",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Classname(s) applied when an acceptable draggable element is hovering the element"
								},
								{
									"kind": "param",
									"name": "options.accept",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Selector for choosing draggables which can be dropped in this droppable."
								},
								{
									"kind": "param",
									"name": "options.onHover",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "callback called when an acceptable draggable element is hovering the droppable. Gets the draggable and the droppable element as parameters."
								},
								{
									"kind": "param",
									"name": "options.onDrop",
									"type": "Function|String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "callback called when an acceptable draggable element is dropped. Gets the draggable, the droppable and the event as parameters."
								},
								{
									"kind": "param",
									"name": "options.onDropOut",
									"type": "Function|String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "callback called when a droppable is dropped outside this droppable. Gets the draggable, the droppable and the event as parameters. (see above for string options)."
								}
							],
							"examples": [
								"\n\n      <style type=\"text/css\">\n          .hover {\n              border: 1px solid red;\n          }\n          .left, .right {\n              float: left; width: 50%;\n              outline: 1px solid gray;\n              min-height: 2em;\n          }\n      </style>\n       <ul class=\"left\">\n           <li>Draggable 1</li>\n           <li>Draggable 2</li>\n           <li>Draggable 3</li>\n       </ul>\n       <ul class=\"right\">\n       </ul>\n       <script type=\"text/javascript\">\n           Ink.requireModules(['Ink.UI.Draggable_1', 'Ink.UI.Droppable_1'], function (Draggable, Droppable) {\n               new Draggable('.left li:eq(0)', {});\n               new Draggable('.left li:eq(1)', {});\n               new Draggable('.left li:eq(2)', {});\n               Droppable.add('.left', {onDrop: 'move', onDropOut: 'revert'});\n               Droppable.add('.right', {onDrop: 'move', onDropOut: 'revert'});\n           })\n       </script>\n\n"
							]
						},
						{
							"kind": "function",
							"name": "_findData",
							"file": "src/js/Ink/UI/Droppable/1/lib.js",
							"text": "find droppable data about `element`. this data is added in `.add`",
							"params": [
								{
									"kind": "param",
									"name": "element",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "Needle"
								}
							],
							"return": {
								"kind": "return",
								"type": "object",
								"description": "Droppable data of the element"
							},
							"private": true
						},
						{
							"kind": "function",
							"name": "_findDraggable",
							"file": "src/js/Ink/UI/Droppable/1/lib.js",
							"text": "Find draggable data about `element`",
							"params": [
								{
									"kind": "param",
									"name": "element",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "Needle"
								}
							],
							"return": {
								"kind": "return",
								"type": "Object",
								"description": "Draggable data queried"
							},
							"private": true
						},
						{
							"kind": "function",
							"name": "updateAll",
							"file": "src/js/Ink/UI/Droppable/1/lib.js",
							"text": "Invoke every time a drag starts",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "update",
							"file": "src/js/Ink/UI/Droppable/1/lib.js",
							"text": "Updates location and size of droppable element",
							"params": [
								{
									"kind": "param",
									"name": "element",
									"type": "String|DOMElement",
									"isFirstLevel": true,
									"description": "- target element"
								}
							],
							"private": true
						},
						{
							"kind": "function",
							"name": "remove",
							"file": "src/js/Ink/UI/Droppable/1/lib.js",
							"text": "Removes an element from the droppable stack and removes the droppable behavior",
							"params": [
								{
									"kind": "param",
									"name": "elOrSelector",
									"type": "String|DOMElement",
									"isFirstLevel": true,
									"description": "Droppable element to disable."
								}
							],
							"return": {
								"kind": "return",
								"type": "Boolean",
								"description": "Whether the object was found and deleted"
							}
						},
						{
							"kind": "function",
							"name": "action",
							"file": "src/js/Ink/UI/Droppable/1/lib.js",
							"text": "Method called by a draggable to execute an action on a droppable",
							"params": [
								{
									"kind": "param",
									"name": "coords",
									"type": "Object",
									"isFirstLevel": true,
									"description": "coordinates where the action happened"
								},
								{
									"kind": "param",
									"name": "type",
									"type": "String",
									"isFirstLevel": true,
									"description": "type of action. drag or drop."
								},
								{
									"kind": "param",
									"name": "ev",
									"type": "Object",
									"isFirstLevel": true,
									"description": "Event object"
								},
								{
									"kind": "param",
									"name": "draggable",
									"type": "Object",
									"isFirstLevel": true,
									"description": "draggable element"
								}
							],
							"private": true
						}
					],
					"attributes": [
						{
							"kind": "attribute",
							"name": "debug",
							"text": "Flag that determines if it's in debug mode or not",
							"type": "Boolean",
							"private": true
						},
						{
							"kind": "attribute",
							"name": "_droppables",
							"text": "Array with the data of each element (`{element: ..., data: ..., options: ...}`)",
							"type": "Array",
							"private": true
						},
						{
							"kind": "attribute",
							"name": "_draggables",
							"text": "Array of data for each draggable. (`{element: ..., data: ...}`)",
							"type": "Array",
							"private": true
						}
					],
					"isNamespace": true,
					"version": "1",
					"static": true
				}
			],
			"functions": [],
			"attributes": [],
			"uses": [],
			"author": "inkdev AT sapo.pt",
			"version": "1"
		},
		{
			"kind": "module",
			"name": "Ink.UI.FormValidator_1",
			"file": "src/js/Ink/UI/FormValidator/1/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink.UI.FormValidator",
					"file": "src/js/Ink/UI/FormValidator/1/lib.js",
					"functions": [
						{
							"kind": "function",
							"name": "validate",
							"file": "src/js/Ink/UI/FormValidator/1/lib.js",
							"text": "Check if a form is valid or not",
							"params": [
								{
									"kind": "param",
									"name": "elm",
									"type": "DOMElement|String",
									"isFirstLevel": true,
									"description": "DOM form element or form id"
								},
								{
									"kind": "param",
									"name": "options",
									"type": "Object",
									"isFirstLevel": true,
									"description": "Options for"
								},
								{
									"kind": "param",
									"name": "options.onSuccess",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "function to run when form is valid"
								},
								{
									"kind": "param",
									"name": "options.onError",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "function to run when form is not valid"
								},
								{
									"kind": "param",
									"name": "options.customFlag",
									"type": "Array",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "custom flags to use to validate form fields"
								}
							],
							"return": {
								"kind": "return",
								"type": "Boolean",
								"description": "Whether the form is deemed valid or not."
							},
							"examples": [
								"\n\n## What markup do I need?\n\nBesides the markup structure you can see in\n<a href=\"http://ink.sapo.pt/forms#building\"></a>, you need to add\nthe `ink-fv-*` classes to your inputs, which correspond to validation\nrules in this component. Available classes are:\n\n- `ink-fv-required` : Required field\n- `ink-fv-email`    : Valid e-mail\n- `ink-fv-url`      : Valid URL address\n- `ink-fv-number`   : Valid number\n- `ink-fv-phone_pt`, `ink-fv-phone_cv`, `ink-fv-phone_mz`, `ink-fv-phone_ao` : Valid telephone number in Portugal, Cape Verde, Mozambique or Angola.\n- `ink-fv-date`     : Valid date\n- `ink-fv-confirm`  : Make the user type the same thing twice. Common rule for confirming passwords.\n- `ink-fv-custom`   : Custom rule (see below example \"Custom rule\")\n\n          E-mail field: <input class=\"ink-fv-required ink-fv-email\"><br>\n          Phone number field: <input class=\"ink-fv-number ink-fv-required\"><br>\n          Website field (optional): <input class=\"ink-fv-url\">\n\n## Simple usage\n\nSo you have a form and would like to validate it? This example shows\nhow to validate a form and stop it from being submitted when invalid.\nTo use this, add the several ink-fv-* classes to your input elements.\n\nThe validate() function will also add \"invalid\" classes to each of\nyour elements so the user gets a color feedback and an error message\nbelow each element (control-group, really).\n\n        var myForm = Ink.i('my-form');\n        InkEvent.observe(myForm, 'submit', function (ev) {\n            var formIsValid = FormValidator.validate(myForm);\n            if (!formIsValid) {\n                InkEvent.stop(ev);  // Cancel submission of form.\n            }\n        });\n\n",
								"\n\n## Custom rule.\n\nThe following code validates using a custom rule named `minthree`,\nwhich fails if the input string has less than three characters.\nTo do this, you must add the `ink-fv-custom` and `minthree` classes\nto the input elements you want to validate, and pass the `customFlag`\noption to this function, like so:\n\n        var isValid = FormValidator.validate(myForm, {\n            customFlag: [\n                {\n                    flag: 'minthree',  // The name of this rule (add this class to your <input>s\n                    msg: 'Please input at least three characters',  // Error message when rule fails\n                    callback: function (el) {\n                        return el.value.length >= 3  // Return true when okay, false when not\n                    }\n                }\n            ]\n        });\n"
							]
						},
						{
							"kind": "function",
							"name": "reset",
							"file": "src/js/Ink/UI/FormValidator/1/lib.js",
							"text": "Reset previously generated validation errors",
							"params": []
						},
						{
							"kind": "function",
							"name": "_free",
							"file": "src/js/Ink/UI/FormValidator/1/lib.js",
							"text": "Cleans the object",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_clearCache",
							"file": "src/js/Ink/UI/FormValidator/1/lib.js",
							"text": "Cleans the properties responsible for caching",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_getElements",
							"file": "src/js/Ink/UI/FormValidator/1/lib.js",
							"text": "Gets the form elements and stores them in the caching properties",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_validateElements",
							"file": "src/js/Ink/UI/FormValidator/1/lib.js",
							"text": "Runs the validation for each element",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_validateConfirmGroups",
							"file": "src/js/Ink/UI/FormValidator/1/lib.js",
							"text": "Runs the 'confirm' validation for each group of elements",
							"params": [
								{
									"kind": "param",
									"name": "oGroups",
									"type": "Array",
									"isFirstLevel": true,
									"description": "Array/Object that contains the group of confirm objects"
								},
								{
									"kind": "param",
									"name": "errors",
									"type": "Array",
									"isFirstLevel": true,
									"description": "Array that will store the errors"
								}
							],
							"private": true,
							"return": {
								"kind": "return",
								"type": "Array",
								"description": "Array of errors that was passed as 2nd parameter (either changed, or not, depending if errors were found)."
							}
						},
						{
							"kind": "function",
							"name": "_makeConfirmGroups",
							"file": "src/js/Ink/UI/FormValidator/1/lib.js",
							"text": "Creates the groups of 'confirm' objects",
							"params": [],
							"private": true,
							"return": {
								"kind": "return",
								"type": "Array|Boolean",
								"description": "Returns the array of confirm elements or false on error."
							}
						},
						{
							"kind": "function",
							"name": "_isCustomValid",
							"file": "src/js/Ink/UI/FormValidator/1/lib.js",
							"text": "Validates an element with a custom validation",
							"params": [
								{
									"kind": "param",
									"name": "elm",
									"type": "DOMElemenmt",
									"isFirstLevel": true,
									"description": "Element to be validated"
								}
							],
							"private": true,
							"return": {
								"kind": "return",
								"type": "Array",
								"description": "Array of errors. If no errors are found, results in an empty array."
							}
						},
						{
							"kind": "function",
							"name": "_isValid",
							"file": "src/js/Ink/UI/FormValidator/1/lib.js",
							"text": "Runs the normal validation functions for a specific element",
							"params": [
								{
									"kind": "param",
									"name": "elm",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "DOMElement that will be validated"
								},
								{
									"kind": "param",
									"name": "fieldType",
									"type": "String",
									"isFirstLevel": true,
									"description": "Rule to be validated. This must be one of the keys present in the _flagMap property."
								}
							],
							"private": true,
							"return": {
								"kind": "return",
								"type": "Boolean",
								"description": "The result of the validation."
							}
						},
						{
							"kind": "function",
							"name": "_showError",
							"file": "src/js/Ink/UI/FormValidator/1/lib.js",
							"text": "Makes the necessary changes to the markup to show the errors of a given element",
							"params": [
								{
									"kind": "param",
									"name": "formElm",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "The form element to be changed to show the errors"
								},
								{
									"kind": "param",
									"name": "aFail",
									"type": "Array",
									"isFirstLevel": true,
									"description": "An array with the errors found."
								}
							],
							"private": true
						},
						{
							"kind": "function",
							"name": "_clearErrors",
							"file": "src/js/Ink/UI/FormValidator/1/lib.js",
							"text": "Clears the error of a given element. Normally executed before any validation, for all elements, as a reset.",
							"params": [
								{
									"kind": "param",
									"name": "formElm",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "Form element to be cleared."
								}
							],
							"private": true
						},
						{
							"kind": "function",
							"name": "_trim",
							"file": "src/js/Ink/UI/FormValidator/1/lib.js",
							"text": "Removes unnecessary spaces to the left or right of a string",
							"params": [
								{
									"kind": "param",
									"name": "stri",
									"type": "String",
									"isFirstLevel": true,
									"description": "String to be trimmed"
								}
							],
							"private": true,
							"return": {
								"kind": "return",
								"type": "String|undefined",
								"description": "String trimmed."
							}
						}
					],
					"attributes": [
						{
							"kind": "attribute",
							"name": "version",
							"text": "Specifies the version of the component",
							"type": "String"
						},
						{
							"kind": "attribute",
							"name": "_flagMap",
							"text": "Available flags to use in the validation process.\nThe keys are the 'rules', and their values are objects with the key 'msg', determining\nwhat is the error message.",
							"type": "Object",
							"private": true
						},
						{
							"kind": "attribute",
							"name": "elements",
							"text": "This property holds all form elements for later validation",
							"type": "Object"
						},
						{
							"kind": "attribute",
							"name": "confirmElms",
							"text": "This property holds the objects needed to cross-check for the 'confirm' rule",
							"type": "Object"
						},
						{
							"kind": "attribute",
							"name": "hasConfirm",
							"text": "This property holds the previous elements in the confirmElms property, but with a\ntrue/false specifying if it has the class ink-fv-confirm.",
							"type": "Object"
						},
						{
							"kind": "attribute",
							"name": "_errorClassName",
							"text": "Defined class name to use in error messages label",
							"type": "String",
							"private": true
						},
						{
							"kind": "attribute",
							"name": "_errorValidationClassName",
							"text": "",
							"type": "String",
							"private": true
						},
						{
							"kind": "attribute",
							"name": "_errorTypeWarningClassName",
							"text": "",
							"type": "String",
							"private": true
						},
						{
							"kind": "attribute",
							"name": "_errorTypeErrorClassName",
							"text": "",
							"type": "String",
							"private": true
						}
					],
					"isNamespace": true,
					"version": "1"
				}
			],
			"functions": [],
			"attributes": [],
			"uses": [],
			"author": "inkdev AT sapo.pt",
			"version": "1"
		},
		{
			"kind": "module",
			"name": "Ink.UI.FormValidator_2",
			"file": "src/js/Ink/UI/FormValidator/2/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink.UI.FormValidator_2",
					"text": "",
					"file": "src/js/Ink/UI/FormValidator/2/lib.js",
					"functions": [
						{
							"kind": "function",
							"name": "FormValidator_2",
							"file": "src/js/Ink/UI/FormValidator/2/lib.js",
							"isConstructor": true,
							"params": [
								{
									"kind": "param",
									"name": "selector",
									"type": "String|DOMElement",
									"isFirstLevel": true,
									"description": "Either a CSS Selector string, or the form's DOMElement"
								},
								{
									"kind": "param",
									"name": "options.eventTrigger",
									"type": "String",
									"isOptional": true,
									"defaultValue": "'submit'",
									"isFirstLevel": false,
									"description": "What event do we listen for."
								},
								{
									"kind": "param",
									"name": "options.neverSubmit",
									"type": "Boolean",
									"isOptional": true,
									"defaultValue": "false",
									"isFirstLevel": false,
									"description": "Always cancel the event? Use this to avoid submitting the form."
								},
								{
									"kind": "param",
									"name": "options.searchFor",
									"type": "Selector",
									"isOptional": true,
									"defaultValue": "'input",
									"isFirstLevel": false,
									"description": "select, textarea, .control-group'] Look in these inputs for validation data-attributes."
								},
								{
									"kind": "param",
									"name": "options.beforeValidation",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Callback to be executed before validating the form"
								},
								{
									"kind": "param",
									"name": "options.onError",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Validation error callback"
								},
								{
									"kind": "param",
									"name": "options.onSuccess",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Validation success callback"
								}
							],
							"examples": [
								"\n    Ink.requireModules( ['Ink.UI.FormValidator_2'], function( FormValidator ){\n        var myValidator = new FormValidator( '#my-form' );\n    });\n"
							]
						},
						{
							"kind": "function",
							"name": "setRule",
							"file": "src/js/Ink/UI/FormValidator/2/lib.js",
							"text": "Method used to set validation functions (either custom or ovewrite the existent ones)",
							"params": [
								{
									"kind": "param",
									"name": "name",
									"type": "String",
									"isFirstLevel": true,
									"description": "Name of the function. E.g. 'required'"
								},
								{
									"kind": "param",
									"name": "errorMessage",
									"type": "String",
									"isFirstLevel": true,
									"description": "Error message to be displayed in case of returning false. E.g. 'Oops, you passed {param1} as parameter1, lorem ipsum dolor...'"
								},
								{
									"kind": "param",
									"name": "cb",
									"type": "Function",
									"isFirstLevel": true,
									"description": "Function to be executed when calling this rule"
								}
							],
							"static": true
						},
						{
							"kind": "function",
							"name": "getI18n",
							"file": "src/js/Ink/UI/FormValidator/2/lib.js",
							"text": "Get the i18n object in charge of the error messages",
							"params": [],
							"return": {
								"kind": "return",
								"type": "Ink.Util.I18n",
								"description": "The i18n object the FormValidator is using."
							}
						},
						{
							"kind": "function",
							"name": "setI18n",
							"file": "src/js/Ink/UI/FormValidator/2/lib.js",
							"text": "Sets the I18n object for validation error messages",
							"params": [
								{
									"kind": "param",
									"name": "i18n",
									"type": "Ink.Util.I18n",
									"isFirstLevel": true,
									"description": "The I18n object."
								}
							]
						},
						{
							"kind": "function",
							"name": "AppendI18n",
							"file": "src/js/Ink/UI/FormValidator/2/lib.js",
							"text": "Add to the I18n dictionary. See `Ink.Util.I18n.append()` documentation.",
							"params": []
						},
						{
							"kind": "function",
							"name": "setLanguage",
							"file": "src/js/Ink/UI/FormValidator/2/lib.js",
							"text": "Sets the language of the error messages. pt_PT and en_US are available, but you can add new languages by using append()\n\nSee the `Ink.Util.I18n.lang()` setter",
							"params": [
								{
									"kind": "param",
									"name": "language",
									"isFirstLevel": true,
									"description": "The language to set i18n to."
								}
							]
						},
						{
							"kind": "function",
							"name": "getRules",
							"file": "src/js/Ink/UI/FormValidator/2/lib.js",
							"text": "Method used to get the existing defined validation functions",
							"params": [],
							"return": {
								"kind": "return",
								"type": "Object",
								"description": "Object with the rules defined"
							},
							"static": true
						},
						{
							"kind": "function",
							"name": "getElements",
							"file": "src/js/Ink/UI/FormValidator/2/lib.js",
							"text": "Function that searches for the elements of the form, based in the\nthis._options.searchFor configuration.",
							"params": [],
							"return": {
								"kind": "return",
								"type": "Object",
								"description": "An object with the elements in the form, indexed by name/id"
							}
						},
						{
							"kind": "function",
							"name": "validate",
							"file": "src/js/Ink/UI/FormValidator/2/lib.js",
							"text": "Runs the validate function of each FormElement in the this._formElements\nobject.\nAlso, based on the this._options.beforeValidation, this._options.onError\nand this._options.onSuccess, this callbacks are executed when defined.",
							"params": [
								{
									"kind": "param",
									"name": "event",
									"type": "Event",
									"isFirstLevel": true,
									"description": "window.event object"
								}
							],
							"return": {
								"kind": "return",
								"type": "Boolean"
							}
						}
					],
					"attributes": [
						{
							"kind": "attribute",
							"name": "_rootElement",
							"text": "DOMElement of the <form> being validated",
							"type": "DOMElement"
						},
						{
							"kind": "attribute",
							"name": "_formElements",
							"text": "Object that will gather the form elements by name",
							"type": "Object"
						},
						{
							"kind": "attribute",
							"name": "_errorMessages",
							"text": "Error message DOMElements"
						},
						{
							"kind": "attribute",
							"name": "_markedErrorElements",
							"text": "Array of elements marked with validation errors"
						},
						{
							"kind": "attribute",
							"name": "_options",
							"text": "Configuration options. Fetches the data attributes first, then the ones passed when executing the constructor.\nBy doing that, the latter will be the one with highest priority.",
							"type": "Object"
						}
					],
					"version": "2"
				}
			],
			"functions": [
				{
					"kind": "function",
					"name": "required",
					"file": "src/js/Ink/UI/FormValidator/2/lib.js",
					"text": "Checks if the value is actually defined and is not empty\n@",
					"params": [
						{
							"kind": "param",
							"name": "value",
							"type": "String",
							"isFirstLevel": true,
							"description": "Value to be checked"
						}
					],
					"return": {
						"kind": "return",
						"type": "Boolean",
						"description": "True case is defined, false if it's empty or not defined."
					}
				},
				{
					"kind": "function",
					"name": "min_length",
					"file": "src/js/Ink/UI/FormValidator/2/lib.js",
					"text": "Checks if the value has a minimum length",
					"params": [
						{
							"kind": "param",
							"name": "value",
							"type": "String",
							"isFirstLevel": true,
							"description": "Value to be checked"
						},
						{
							"kind": "param",
							"name": "minSize",
							"type": "String|Number",
							"isFirstLevel": true,
							"description": "Number of characters that the value at least must have."
						}
					],
					"return": {
						"kind": "return",
						"type": "Boolean",
						"description": "True if the length of value is equal or bigger than the minimum chars defined. False if not."
					}
				},
				{
					"kind": "function",
					"name": "max_length",
					"file": "src/js/Ink/UI/FormValidator/2/lib.js",
					"text": "Checks if the value has a maximum length",
					"params": [
						{
							"kind": "param",
							"name": "value",
							"type": "String",
							"isFirstLevel": true,
							"description": "Value to be checked"
						},
						{
							"kind": "param",
							"name": "maxSize",
							"type": "String|Number",
							"isFirstLevel": true,
							"description": "Number of characters that the value at maximum can have."
						}
					],
					"return": {
						"kind": "return",
						"type": "Boolean",
						"description": "True if the length of value is equal or smaller than the maximum chars defined. False if not."
					}
				},
				{
					"kind": "function",
					"name": "exact_length",
					"file": "src/js/Ink/UI/FormValidator/2/lib.js",
					"text": "Checks if the value has an exact length",
					"params": [
						{
							"kind": "param",
							"name": "value",
							"type": "String",
							"isFirstLevel": true,
							"description": "Value to be checked"
						},
						{
							"kind": "param",
							"name": "exactSize",
							"type": "String|Number",
							"isFirstLevel": true,
							"description": "Number of characters that the value must have."
						}
					],
					"return": {
						"kind": "return",
						"type": "Boolean",
						"description": "True if the length of value is equal to the size defined. False if not."
					}
				},
				{
					"kind": "function",
					"name": "email",
					"file": "src/js/Ink/UI/FormValidator/2/lib.js",
					"text": "Checks if the value has a valid e-mail address",
					"params": [
						{
							"kind": "param",
							"name": "value",
							"type": "String",
							"isFirstLevel": true,
							"description": "Value to be checked"
						}
					],
					"return": {
						"kind": "return",
						"type": "Boolean",
						"description": "True if the value is a valid e-mail address. False if not."
					}
				},
				{
					"kind": "function",
					"name": "url",
					"file": "src/js/Ink/UI/FormValidator/2/lib.js",
					"text": "Checks if the value has a valid URL",
					"params": [
						{
							"kind": "param",
							"name": "value",
							"type": "String",
							"isFirstLevel": true,
							"description": "Value to be checked"
						},
						{
							"kind": "param",
							"name": "fullCheck",
							"type": "Boolean",
							"isFirstLevel": true,
							"description": "Flag that specifies if the value must be validated as a full url (with the protocol) or not."
						}
					],
					"return": {
						"kind": "return",
						"type": "Boolean",
						"description": "True if the URL is considered valid. False if not."
					}
				},
				{
					"kind": "function",
					"name": "ip",
					"file": "src/js/Ink/UI/FormValidator/2/lib.js",
					"text": "Checks if the value is a valid IP. Supports ipv4 and ipv6",
					"params": [
						{
							"kind": "param",
							"name": "value",
							"type": "String",
							"isFirstLevel": true,
							"description": "Value to be checked"
						},
						{
							"kind": "param",
							"name": "ipType",
							"type": "String",
							"isFirstLevel": true,
							"description": "Type of IP to be validated. The values are: ipv4, ipv6. By default is ipv4."
						}
					],
					"return": {
						"kind": "return",
						"type": "Boolean",
						"description": "True if the value is a valid IP address. False if not."
					}
				},
				{
					"kind": "function",
					"name": "phone",
					"file": "src/js/Ink/UI/FormValidator/2/lib.js",
					"text": "Checks if the value is a valid phone number. Supports several countries, based in the Ink.Util.Validator class.",
					"params": [
						{
							"kind": "param",
							"name": "value",
							"type": "String",
							"isFirstLevel": true,
							"description": "Value to be checked"
						},
						{
							"kind": "param",
							"name": "phoneType",
							"type": "String",
							"isFirstLevel": true,
							"description": "Country's initials to specify the type of phone number to be validated. Ex: 'AO'."
						}
					],
					"return": {
						"kind": "return",
						"type": "Boolean",
						"description": "True if it's a valid phone number. False if not."
					}
				},
				{
					"kind": "function",
					"name": "credit_card",
					"file": "src/js/Ink/UI/FormValidator/2/lib.js",
					"text": "Checks if it's a valid credit card.",
					"params": [
						{
							"kind": "param",
							"name": "value",
							"type": "String",
							"isFirstLevel": true,
							"description": "Value to be checked"
						},
						{
							"kind": "param",
							"name": "cardType",
							"type": "String",
							"isFirstLevel": true,
							"description": "Type of credit card to be validated. The card types available are in the Ink.Util.Validator class."
						}
					],
					"return": {
						"kind": "return",
						"type": "Boolean",
						"description": "True if the value is a valid credit card number. False if not."
					}
				},
				{
					"kind": "function",
					"name": "date",
					"file": "src/js/Ink/UI/FormValidator/2/lib.js",
					"text": "Checks if the value is a valid date.",
					"params": [
						{
							"kind": "param",
							"name": "value",
							"type": "String",
							"isFirstLevel": true,
							"description": "Value to be checked"
						},
						{
							"kind": "param",
							"name": "format",
							"type": "String",
							"isFirstLevel": true,
							"description": "Specific format of the date."
						}
					],
					"return": {
						"kind": "return",
						"type": "Boolean",
						"description": "True if the value is a valid date. False if not."
					}
				},
				{
					"kind": "function",
					"name": "alpha",
					"file": "src/js/Ink/UI/FormValidator/2/lib.js",
					"text": "Checks if the value only contains alphabetical values.",
					"params": [
						{
							"kind": "param",
							"name": "value",
							"type": "String",
							"isFirstLevel": true,
							"description": "Value to be checked"
						},
						{
							"kind": "param",
							"name": "supportSpaces",
							"type": "Boolean",
							"isFirstLevel": true,
							"description": "Allow whitespace"
						}
					],
					"return": {
						"kind": "return",
						"type": "Boolean",
						"description": "True if the value is alphabetical-only. False if not."
					}
				},
				{
					"kind": "function",
					"name": "alpha_numeric",
					"file": "src/js/Ink/UI/FormValidator/2/lib.js",
					"text": "Checks if the value only contains alphabetical and numerical characters.",
					"params": [
						{
							"kind": "param",
							"name": "value",
							"type": "String",
							"isFirstLevel": true,
							"description": "Value to be checked"
						}
					],
					"return": {
						"kind": "return",
						"type": "Boolean",
						"description": "True if the value is a valid alphanumerical. False if not."
					}
				},
				{
					"kind": "function",
					"name": "alpha_dashes",
					"file": "src/js/Ink/UI/FormValidator/2/lib.js",
					"text": "Checks if the value only contains alphabetical, dash or underscore characteres.",
					"params": [
						{
							"kind": "param",
							"name": "value",
							"type": "String",
							"isFirstLevel": true,
							"description": "Value to be checked"
						}
					],
					"return": {
						"kind": "return",
						"type": "Boolean",
						"description": "True if the value is a valid. False if not."
					}
				},
				{
					"kind": "function",
					"name": "digit",
					"file": "src/js/Ink/UI/FormValidator/2/lib.js",
					"text": "Checks if the value is a digit (an integer of length = 1).",
					"params": [
						{
							"kind": "param",
							"name": "value",
							"type": "String",
							"isFirstLevel": true,
							"description": "Value to be checked"
						}
					],
					"return": {
						"kind": "return",
						"type": "Boolean",
						"description": "True if the value is a valid digit. False if not."
					}
				},
				{
					"kind": "function",
					"name": "integer",
					"file": "src/js/Ink/UI/FormValidator/2/lib.js",
					"text": "Checks if the value is a valid integer.",
					"params": [
						{
							"kind": "param",
							"name": "value",
							"type": "String",
							"isFirstLevel": true,
							"description": "Value to be checked"
						},
						{
							"kind": "param",
							"name": "positive",
							"type": "String",
							"isFirstLevel": true,
							"description": "Flag that specifies if the integer is must be positive (unsigned)."
						}
					],
					"return": {
						"kind": "return",
						"type": "Boolean",
						"description": "True if the value is a valid integer. False if not."
					}
				},
				{
					"kind": "function",
					"name": "decimal",
					"file": "src/js/Ink/UI/FormValidator/2/lib.js",
					"text": "Checks if the value is a valid decimal number.",
					"params": [
						{
							"kind": "param",
							"name": "value",
							"type": "String",
							"isFirstLevel": true,
							"description": "Value to be checked"
						},
						{
							"kind": "param",
							"name": "decimalSeparator",
							"type": "String",
							"isFirstLevel": true,
							"description": "Character that splits the integer part from the decimal one. By default is '.'."
						},
						{
							"kind": "param",
							"name": "decimalPlaces",
							"type": "String",
							"isOptional": true,
							"isFirstLevel": true,
							"description": "Maximum number of digits that the decimal part must have."
						},
						{
							"kind": "param",
							"name": "leftDigits",
							"type": "String",
							"isOptional": true,
							"isFirstLevel": true,
							"description": "Maximum number of digits that the integer part must have, when provided."
						}
					],
					"return": {
						"kind": "return",
						"type": "Boolean",
						"description": "True if the value is a valid decimal number. False if not."
					}
				},
				{
					"kind": "function",
					"name": "numeric",
					"file": "src/js/Ink/UI/FormValidator/2/lib.js",
					"text": "Checks if it is a numeric value.",
					"params": [
						{
							"kind": "param",
							"name": "value",
							"type": "String",
							"isFirstLevel": true,
							"description": "Value to be checked"
						},
						{
							"kind": "param",
							"name": "decimalSeparator",
							"type": "String",
							"isFirstLevel": true,
							"description": "Verifies if it's a valid decimal. Otherwise checks if it's a valid integer."
						},
						{
							"kind": "param",
							"name": "decimalPlaces",
							"type": "String",
							"isOptional": true,
							"isFirstLevel": true,
							"description": "(when the number is decimal) Maximum number of digits that the decimal part must have."
						},
						{
							"kind": "param",
							"name": "leftDigits",
							"type": "String",
							"isOptional": true,
							"isFirstLevel": true,
							"description": "(when the number is decimal) Maximum number of digits that the integer part must have, when provided."
						}
					],
					"return": {
						"kind": "return",
						"type": "Boolean",
						"description": "True if the value is numeric. False if not."
					}
				},
				{
					"kind": "function",
					"name": "range",
					"file": "src/js/Ink/UI/FormValidator/2/lib.js",
					"text": "Checks if the value is in a specific range of values. The parameters after the first one are used for specifying the range, and are similar in function to python's range() function.",
					"params": [
						{
							"kind": "param",
							"name": "value",
							"type": "String",
							"isFirstLevel": true,
							"description": "Value to be checked"
						},
						{
							"kind": "param",
							"name": "minValue",
							"type": "String",
							"isFirstLevel": true,
							"description": "Left limit of the range."
						},
						{
							"kind": "param",
							"name": "maxValue",
							"type": "String",
							"isFirstLevel": true,
							"description": "Right limit of the range."
						},
						{
							"kind": "param",
							"name": "multipleOf",
							"type": "String",
							"isOptional": true,
							"isFirstLevel": true,
							"description": "In case you want numbers that are only multiples of another number."
						}
					],
					"return": {
						"kind": "return",
						"type": "Boolean",
						"description": "True if the value is within the range. False if not."
					}
				},
				{
					"kind": "function",
					"name": "color",
					"file": "src/js/Ink/UI/FormValidator/2/lib.js",
					"text": "Checks if the value is a valid color.",
					"params": [
						{
							"kind": "param",
							"name": "value",
							"type": "String",
							"isFirstLevel": true,
							"description": "Value to be checked"
						}
					],
					"return": {
						"kind": "return",
						"type": "Boolean",
						"description": "True if the value is a valid color. False if not."
					}
				},
				{
					"kind": "function",
					"name": "matches",
					"file": "src/js/Ink/UI/FormValidator/2/lib.js",
					"text": "Checks if the value matches the value of a different field.",
					"params": [
						{
							"kind": "param",
							"name": "value",
							"type": "String",
							"isFirstLevel": true,
							"description": "Value to be checked"
						},
						{
							"kind": "param",
							"name": "fieldToCompare",
							"type": "String",
							"isFirstLevel": true,
							"description": "Name or ID of the field to compare."
						},
						{
							"kind": "param",
							"name": "element",
							"type": "DOMElement",
							"isFirstLevel": true,
							"description": "DOM Element"
						},
						{
							"kind": "param",
							"name": "options",
							"type": "Object",
							"isFirstLevel": true,
							"description": "Object with configuration options"
						}
					],
					"return": {
						"kind": "return",
						"type": "FormElement",
						"description": "FormElement object"
					},
					"private": true,
					"static": true
				},
				{
					"kind": "function",
					"name": "_getLabel",
					"file": "src/js/Ink/UI/FormValidator/2/lib.js",
					"text": "Function to get the label that identifies the field.\nIf it can't find one, it will use the name or the id\n(depending on what is defined)",
					"params": [],
					"return": {
						"kind": "return",
						"type": "String",
						"description": "Label to be used in the error messages"
					},
					"private": true
				},
				{
					"kind": "function",
					"name": "_parseRules",
					"file": "src/js/Ink/UI/FormValidator/2/lib.js",
					"text": "Function to parse a rules' string.\nEx: required|number|max_length[30]",
					"params": [
						{
							"kind": "param",
							"name": "rules",
							"type": "String",
							"isFirstLevel": true,
							"description": "String with the rules"
						}
					],
					"private": true
				},
				{
					"kind": "function",
					"name": "_addError",
					"file": "src/js/Ink/UI/FormValidator/2/lib.js",
					"text": "Function to add an error to the FormElement's 'errors' object.\nIt basically receives the rule where the error occurred, the parameters passed to it (if any)\nand the error message.\nThen it replaces some tokens in the message for a more 'custom' reading",
					"params": [
						{
							"kind": "param",
							"name": "rule",
							"type": "String|null",
							"isFirstLevel": true,
							"description": "Rule that failed, or null if no rule was found."
						}
					],
					"private": true,
					"static": true
				},
				{
					"kind": "function",
					"name": "getValue",
					"file": "src/js/Ink/UI/FormValidator/2/lib.js",
					"text": "Function to retrieve the element's value",
					"params": [],
					"return": {
						"kind": "return",
						"type": "mixed",
						"description": "The DOM Element's value"
					}
				},
				{
					"kind": "function",
					"name": "getErrors",
					"file": "src/js/Ink/UI/FormValidator/2/lib.js",
					"text": "Function that returns the constructed errors object.",
					"params": [],
					"return": {
						"kind": "return",
						"type": "Object",
						"description": "Errors' object"
					}
				},
				{
					"kind": "function",
					"name": "getElement",
					"file": "src/js/Ink/UI/FormValidator/2/lib.js",
					"text": "Function that returns the DOM element related to it.",
					"params": [],
					"return": {
						"kind": "return",
						"type": "Object",
						"description": "DOM Element"
					}
				},
				{
					"kind": "function",
					"name": "getFormElements",
					"file": "src/js/Ink/UI/FormValidator/2/lib.js",
					"text": "Get other elements in the same form.",
					"params": [],
					"return": {
						"kind": "return",
						"type": "Object",
						"description": "A mapping of keys to other elements in this form."
					}
				},
				{
					"kind": "function",
					"name": "validate",
					"file": "src/js/Ink/UI/FormValidator/2/lib.js",
					"text": "Function used to validate the element based on the rules defined.\nIt parses the rules defined in the _options.rules property.",
					"params": [],
					"return": {
						"kind": "return",
						"type": "Boolean",
						"description": "True if every rule was valid. False if one fails."
					}
				}
			],
			"attributes": [],
			"uses": [],
			"author": "inkdev AT sapo.pt",
			"version": "2",
			"private": true,
			"static": true
		},
		{
			"kind": "module",
			"name": "Ink.UI.ImageQuery_1",
			"file": "src/js/Ink/UI/ImageQuery/1/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink.UI.ImageQuery",
					"file": "src/js/Ink/UI/ImageQuery/1/lib.js",
					"functions": [
						{
							"kind": "function",
							"name": "ImageQuery",
							"file": "src/js/Ink/UI/ImageQuery/1/lib.js",
							"isConstructor": true,
							"params": [
								{
									"kind": "param",
									"name": "selector",
									"type": "String|DOMElement",
									"isFirstLevel": true
								},
								{
									"kind": "param",
									"name": "options",
									"type": "Object",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Options"
								},
								{
									"kind": "param",
									"name": "options.src",
									"type": "String|Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "String or Callback function (that returns a string) with the path to be used to get the images."
								},
								{
									"kind": "param",
									"name": "options.retina",
									"type": "String|Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "String or Callback function (that returns a string) with the path to be used to get RETINA specific images."
								},
								{
									"kind": "param",
									"name": "options.queries",
									"type": "Array",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Array of queries"
								},
								{
									"kind": "param",
									"name": "options.queries.label",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Label of the query. Ex. 'small'"
								},
								{
									"kind": "param",
									"name": "options.queries.width",
									"type": "Number",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Min-width to use this query"
								},
								{
									"kind": "param",
									"name": "options.onLoad",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Date format string"
								},
								{
									"kind": "param",
									"name": "queries",
									"type": "array",
									"isFirstLevel": true,
									"description": "Array of objects that determine the label/name and its min-width to be applied."
								},
								{
									"kind": "param",
									"name": "allowFirstLoad",
									"type": "boolean",
									"isFirstLevel": true,
									"description": "Boolean flag to allow the loading of the first element."
								}
							],
							"version": "1",
							"examples": [
								"\n     <div class=\"imageQueryExample all-100 content-center clearfix vspace\">\n         <img src=\"/assets/imgs/imagequery/small/image.jpg\" />\n     </div>\n     <script type=\"text/javascript\">\n     Ink.requireModules( ['Ink.Dom.Selector_1', 'Ink.UI.ImageQuery_1'], function( Selector, ImageQuery ){\n         var imageQueryElement = Ink.s('.imageQueryExample img');\n         var imageQueryObj = new ImageQuery('.imageQueryExample img',{\n             src: '/assets/imgs/imagequery/{:label}/{:file}',\n             queries: [\n                 {\n                     label: 'small',\n                     width: 480\n                 },\n                 {\n                     label: 'medium',\n                     width: 640\n                 },\n                 {\n                     label: 'large',\n                     width: 1024\n                 }   \n             ]\n         });\n     } );\n     </script>\n"
							]
						},
						{
							"kind": "function",
							"name": "_init",
							"file": "src/js/Ink/UI/ImageQuery/1/lib.js",
							"text": "Init function called by the constructor",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_onResize",
							"file": "src/js/Ink/UI/ImageQuery/1/lib.js",
							"text": "Handles the resize event (as specified in the _init function)",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_onLoad",
							"file": "src/js/Ink/UI/ImageQuery/1/lib.js",
							"text": "Handles the element loading (img onload) event",
							"params": [],
							"private": true
						}
					],
					"attributes": []
				}
			],
			"functions": [],
			"attributes": [],
			"uses": [],
			"author": "inkdev AT sapo.pt",
			"version": "1"
		},
		{
			"kind": "module",
			"name": "Ink.UI.LazyLoad_1",
			"file": "src/js/Ink/UI/LazyLoad/1/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink.UI.LazyLoad_1",
					"text": "Stop the browser from loading a barrage of content at once.\n\nThis delays the loading of images and other content until the\ncorresponding elements are visible in the browser viewport.\n\nThis was created to load images later, but can be also used for\nwidgets which are slow to load and are only useful when on screen.\n\nThis works through copying the `src` attribute into `data-src`,\nand placing a `placeholder` string in the `src` attribute. Then,\nwhen the element is on screen, the `data-src` attribute is copied\nback to `src` and the content starts loading. You can use the options\nbelow to change what attributes are involved in the exchange.\n\nYou can also provide your `onInsideViewport` callback and use it to\nstart widgets which need javascript, such as an interactive map\nor an animation.",
					"file": "src/js/Ink/UI/LazyLoad/1/lib.js",
					"functions": [
						{
							"kind": "function",
							"name": "LazyLoad_1",
							"file": "src/js/Ink/UI/LazyLoad/1/lib.js",
							"isConstructor": true,
							"params": [
								{
									"kind": "param",
									"name": "rootElement",
									"isFirstLevel": true,
									"description": "{String|DOMElement} The element which contains the lazily-loaded items."
								},
								{
									"kind": "param",
									"name": "options",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Options object, containing:"
								},
								{
									"kind": "param",
									"name": "options.item",
									"isOptional": true,
									"defaultValue": "'.lazyload-item'",
									"isFirstLevel": false,
									"description": "{String} Use this to select and define what is to be considered an `item`."
								},
								{
									"kind": "param",
									"name": "options.placeholder",
									"isOptional": true,
									"defaultValue": "null",
									"isFirstLevel": false,
									"description": "{String} Placeholder value for items which are still outside the screen (in case they don't already have a value set)"
								},
								{
									"kind": "param",
									"name": "options.source",
									"isOptional": true,
									"defaultValue": "'data-src'",
									"isFirstLevel": false,
									"description": "{String} When an `item` is within the viewport, take the value it has in this attribute then set its `destination` attribute to it."
								},
								{
									"kind": "param",
									"name": "options.destination",
									"isOptional": true,
									"defaultValue": "'src'",
									"isFirstLevel": false,
									"description": "{String} attribute which gets the value in `source` when the element is visible."
								},
								{
									"kind": "param",
									"name": "options.delay",
									"isOptional": true,
									"defaultValue": "100",
									"isFirstLevel": false,
									"description": "{Number} Wait a few milliseconds before trying to load."
								},
								{
									"kind": "param",
									"name": "options.delta",
									"isOptional": true,
									"defaultValue": "0",
									"isFirstLevel": false,
									"description": "{Number} Distance in px from the outside of the viewport. Elements touching within this \"margin\", items are considered to be inside even if they are outside the viewport limits. Can be negative if you want an element to be considered inside only when it is a certain distance into the viewport."
								},
								{
									"kind": "param",
									"name": "options.image",
									"isOptional": true,
									"defaultValue": "true",
									"isFirstLevel": false,
									"description": "{Boolean} Set to false to make this component do nothing to any elements and just give you the onInsideViewport callback."
								},
								{
									"kind": "param",
									"name": "options.scrollElement",
									"isOptional": true,
									"defaultValue": "window",
									"isFirstLevel": false,
									"description": "{Element} (advanced) What element is to be listened for the scroll event."
								},
								{
									"kind": "param",
									"name": "options.touchEvents",
									"isOptional": true,
									"defaultValue": "true",
									"isFirstLevel": false,
									"description": "{Boolean} Subscribe to touch events in addition to scroll events. Useful in mobile safari because 'scroll' events aren't frequent enough."
								},
								{
									"kind": "param",
									"name": "options.onInsideViewport",
									"isOptional": true,
									"defaultValue": "false",
									"isFirstLevel": false,
									"description": "{Function} Called when an `item` is within the viewport. Receives `{ element }`"
								},
								{
									"kind": "param",
									"name": "options.onAfterAttributeChange",
									"isOptional": true,
									"defaultValue": "false",
									"isFirstLevel": false,
									"description": "{Function} (advanced) Called after `source` is copied over to `destination`. Receives `{ element }`"
								},
								{
									"kind": "param",
									"name": "options.autoInit",
									"isOptional": true,
									"defaultValue": "true",
									"isFirstLevel": false,
									"description": "{Boolean} (advanced) Set to false if you want to start LazyLoad yourself with `reload()`"
								}
							]
						},
						{
							"kind": "function",
							"name": "_elInViewport",
							"file": "src/js/Ink/UI/LazyLoad/1/lib.js",
							"text": "Called when an element is detected inside the viewport",
							"params": [
								{
									"kind": "param",
									"name": "curElm",
									"type": "LazyLoadInternalElementData",
									"isFirstLevel": true
								}
							],
							"private": true
						},
						{
							"kind": "function",
							"name": "_userCallback",
							"file": "src/js/Ink/UI/LazyLoad/1/lib.js",
							"text": "Call a callback if it exists and its `typeof` is `\"function\"`.",
							"params": [
								{
									"kind": "param",
									"name": "name",
									"isFirstLevel": true,
									"description": "{String} Callback name in this._options."
								}
							],
							"private": true
						},
						{
							"kind": "function",
							"name": "reload",
							"file": "src/js/Ink/UI/LazyLoad/1/lib.js",
							"text": "Load or reload the component. Adding the 'scroll' event listener if\nnecessary and checks if anything needs to be lazily loaded now.\n\nYou can use this if some elements may have appeared on screen but\nno user scrolling happened.",
							"params": []
						},
						{
							"kind": "function",
							"name": "destroy",
							"file": "src/js/Ink/UI/LazyLoad/1/lib.js",
							"text": "Destroy this component",
							"params": []
						}
					],
					"attributes": []
				}
			],
			"functions": [],
			"attributes": [],
			"uses": []
		},
		{
			"kind": "module",
			"name": "Ink.UI.Modal_1",
			"file": "src/js/Ink/UI/Modal/1/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink.UI.Modal",
					"file": "src/js/Ink/UI/Modal/1/lib.js",
					"functions": [
						{
							"kind": "function",
							"name": "Modal",
							"file": "src/js/Ink/UI/Modal/1/lib.js",
							"isConstructor": true,
							"params": [
								{
									"kind": "param",
									"name": "selector",
									"type": "String|DOMElement",
									"isFirstLevel": true
								},
								{
									"kind": "param",
									"name": "options",
									"type": "Object",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Options"
								},
								{
									"kind": "param",
									"name": "options.width",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Default/Initial width. Ex: '600px'"
								},
								{
									"kind": "param",
									"name": "options.height",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Default/Initial height. Ex: '400px'"
								},
								{
									"kind": "param",
									"name": "options.shadeClass",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Custom class to be added to the div.ink-shade"
								},
								{
									"kind": "param",
									"name": "options.modalClass",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Custom class to be added to the div.ink-modal"
								},
								{
									"kind": "param",
									"name": "options.trigger",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "CSS Selector to target elements that will trigger the Modal."
								},
								{
									"kind": "param",
									"name": "options.triggerEvent",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Trigger's event to be listened. 'click' is the default value. Ex: 'mouseover', 'touchstart'..."
								},
								{
									"kind": "param",
									"name": "options.autoDisplay",
									"type": "Boolean",
									"isOptional": true,
									"defaultValue": "true",
									"isFirstLevel": false,
									"description": "Display the Modal automatically when constructed."
								},
								{
									"kind": "param",
									"name": "options.markup",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Markup to be placed in the Modal when created"
								},
								{
									"kind": "param",
									"name": "options.onShow",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Callback function to run when the Modal is opened."
								},
								{
									"kind": "param",
									"name": "options.onDismiss",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Callback function to run when the Modal is closed. Return `false` to cancel dismissing the Modal."
								},
								{
									"kind": "param",
									"name": "options.closeOnClick",
									"type": "Boolean",
									"isOptional": true,
									"defaultValue": "false",
									"isFirstLevel": false,
									"description": "Determines if the Modal should close when clicked outside of it."
								},
								{
									"kind": "param",
									"name": "options.closeOnEscape",
									"type": "Boolean",
									"isOptional": true,
									"defaultValue": "true",
									"isFirstLevel": false,
									"description": "Determines if the Modal should close when \"Esc\" key is pressed."
								},
								{
									"kind": "param",
									"name": "options.responsive",
									"type": "Boolean",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Determines if the Modal should behave responsively (adapt to smaller viewports)."
								},
								{
									"kind": "param",
									"name": "options.disableScroll",
									"type": "Boolean",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Determines if the Modal should 'disable' the page's scroll (not the Modal's body)."
								}
							],
							"version": "1",
							"examples": [
								"\n     <div class=\"ink-shade fade\">\n         <div id=\"test\" class=\"ink-modal fade\" data-trigger=\"#bModal\" data-width=\"800px\" data-height=\"400px\">\n             <div class=\"modal-header\">\n                 <button class=\"modal-close ink-dismiss\"></button>\n                 <h5>Modal windows can have headers</h5>\n             </div>\n             <div class=\"modal-body\" id=\"modalContent\">\n                 <h3>Please confirm your previous choice</h3>\n                 <p>\"No,\" said Peleg, \"and he hasn't been baptized right either, or it would have washed some of that devil's blue off his face.\"</p>\n                 <p>\n                     <img src=\"http://placehold.it/800x400\" style=\"width: 100%;\" alt=\"\">\n                 </p>\n                 <p>\"Do tell, now,\" cried Bildad, \"is this Philistine a regular member of Deacon Deuteronomy's meeting? I never saw him going there, and I pass it every Lord's day.\"</p>\n                 <p>\"I don't know anything about Deacon Deuteronomy or his meeting,\" said I; \"all I know is, that Queequeg here is a born member of the First Congregational Church. He is a deacon himself, Queequeg is.\"</p>\n             </div>\n             <div class=\"modal-footer\">\n                 <div class=\"push-right\">\n                     <button class=\"ink-button info\">Confirm</button>\n                     <button class=\"ink-button caution ink-dismiss\">Cancel</button>\n                 </div>\n             </div>\n         </div>\n     </div>\n     <a href=\"#\" id=\"bModal\">Open modal</a>\n     <script>\n         Ink.requireModules( ['Ink.Dom.Selector_1','Ink.UI.Modal_1'], function( Selector, Modal ){\n             var modalElement = Ink.s('#test');\n             var modalObj = new Modal( modalElement );\n         });\n     </script>\n"
							]
						},
						{
							"kind": "function",
							"name": "_reposition",
							"file": "src/js/Ink/UI/Modal/1/lib.js",
							"text": "Responsible for repositioning the modal",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_onResize",
							"file": "src/js/Ink/UI/Modal/1/lib.js",
							"text": "Responsible for resizing the modal",
							"params": [
								{
									"kind": "param",
									"name": "runNow",
									"type": "Boolean|Event",
									"isFirstLevel": true,
									"description": "Its executed in the begining to resize/reposition accordingly to the viewport. But usually it's an event object."
								}
							],
							"private": true
						},
						{
							"kind": "function",
							"name": "_timeoutResizeFunction",
							"file": "src/js/Ink/UI/Modal/1/lib.js",
							"text": "Timeout Resize Function",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_onShadeClick",
							"file": "src/js/Ink/UI/Modal/1/lib.js",
							"text": "Handle clicks on the shade element.",
							"params": [
								{
									"kind": "param",
									"name": "ev",
									"type": "Event",
									"isFirstLevel": true
								}
							],
							"private": true
						},
						{
							"kind": "function",
							"name": "_onKeyDown",
							"file": "src/js/Ink/UI/Modal/1/lib.js",
							"text": "Responsible for handling the escape key pressing.",
							"params": [
								{
									"kind": "param",
									"name": "ev",
									"type": "Event",
									"isFirstLevel": true
								}
							],
							"private": true
						},
						{
							"kind": "function",
							"name": "_resizeContainer",
							"file": "src/js/Ink/UI/Modal/1/lib.js",
							"text": "Responsible for setting the size of the modal (and position) based on the viewport.",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_disableScroll",
							"file": "src/js/Ink/UI/Modal/1/lib.js",
							"text": "Responsible for 'disabling' the page scroll",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "open",
							"file": "src/js/Ink/UI/Modal/1/lib.js",
							"text": "Display this Modal. Useful if you have initialized the modal",
							"params": [
								{
									"kind": "param",
									"name": "event",
									"type": "Event",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "(internal) In case its fired by the internal trigger."
								}
							]
						},
						{
							"kind": "function",
							"name": "dismiss",
							"file": "src/js/Ink/UI/Modal/1/lib.js",
							"text": "Dismisses the modal",
							"params": []
						},
						{
							"kind": "function",
							"name": "destroy",
							"file": "src/js/Ink/UI/Modal/1/lib.js",
							"text": "Removes the modal from the DOM",
							"params": []
						},
						{
							"kind": "function",
							"name": "getContentElement",
							"file": "src/js/Ink/UI/Modal/1/lib.js",
							"text": "Returns the content DOM element",
							"params": [],
							"return": {
								"kind": "return",
								"type": "DOMElement",
								"description": "Modal main cointainer."
							}
						},
						{
							"kind": "function",
							"name": "setContentMarkup",
							"file": "src/js/Ink/UI/Modal/1/lib.js",
							"text": "Replaces the content markup",
							"params": [
								{
									"kind": "param",
									"name": "contentMarkup",
									"type": "String",
									"isFirstLevel": true
								}
							]
						}
					],
					"attributes": []
				}
			],
			"functions": [],
			"attributes": [],
			"uses": [],
			"author": "inkdev AT sapo.pt",
			"version": "1"
		},
		{
			"kind": "module",
			"name": "Ink.UI.Pagination_1",
			"file": "src/js/Ink/UI/Pagination/1/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink.UI.Pagination",
					"file": "src/js/Ink/UI/Pagination/1/lib.js",
					"functions": [
						{
							"kind": "function",
							"name": "Pagination",
							"file": "src/js/Ink/UI/Pagination/1/lib.js",
							"isConstructor": true,
							"params": [
								{
									"kind": "param",
									"name": "selector",
									"type": "String|DOMElement",
									"isFirstLevel": true
								},
								{
									"kind": "param",
									"name": "options",
									"type": "Object",
									"isFirstLevel": true,
									"description": "Options"
								},
								{
									"kind": "param",
									"name": "options.size",
									"type": "Number",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "number of pages."
								},
								{
									"kind": "param",
									"name": "options.totalItemCount",
									"type": "Number",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Total numeber of items to display"
								},
								{
									"kind": "param",
									"name": "options.itemsPerPage",
									"type": "Number",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "number of items per page."
								},
								{
									"kind": "param",
									"name": "options.maxSize",
									"type": "Number",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "If passed, only shows at most maxSize items. displays also first|prev page and next page|last buttons"
								},
								{
									"kind": "param",
									"name": "options.start",
									"type": "Number",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "start page. defaults to 1"
								},
								{
									"kind": "param",
									"name": "options.sideButtons",
									"type": "Boolean",
									"isOptional": true,
									"defaultValue": "true",
									"isFirstLevel": false,
									"description": "whether to show the first, last, previous, next, previousPage and lastPage buttons. Do not use together with maxSize."
								},
								{
									"kind": "param",
									"name": "options.firstLabel",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "label to display on first page button"
								},
								{
									"kind": "param",
									"name": "options.lastLabel",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "label to display on last page button"
								},
								{
									"kind": "param",
									"name": "options.previousLabel",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "label to display on previous button"
								},
								{
									"kind": "param",
									"name": "options.nextLabel",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "label to display on next button"
								},
								{
									"kind": "param",
									"name": "options.previousPageLabel",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "label to display on previous page button"
								},
								{
									"kind": "param",
									"name": "options.nextPageLabel",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "label to display on next page button"
								},
								{
									"kind": "param",
									"name": "options.onChange",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "optional callback. Called with `(thisPaginator, newPageNumber)`."
								},
								{
									"kind": "param",
									"name": "options.hashParameter",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "parameter to use on setHash. by default uses 'page'"
								},
								{
									"kind": "param",
									"name": "options.parentTag",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "HTML Tag used as the parent node."
								},
								{
									"kind": "param",
									"name": "options.childTag",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "HTML Tag used as the child nodes."
								},
								{
									"kind": "param",
									"name": "options.wrapperClass",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "CSS Class used in the wrapper element"
								},
								{
									"kind": "param",
									"name": "options.paginationClass",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "CSS Class used in the pagination element"
								},
								{
									"kind": "param",
									"name": "options.activeClass",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "CSS Class used to mark page as active"
								},
								{
									"kind": "param",
									"name": "options.disabledClass",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "CSS Class used to mark page as disabled"
								},
								{
									"kind": "param",
									"name": "options.hideClass",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "CSS Class used to hide elements"
								},
								{
									"kind": "param",
									"name": "options.previousClass",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "CSS Class used in the previous element"
								},
								{
									"kind": "param",
									"name": "options.previousPageClass",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "CSS Class used in the previous page element"
								},
								{
									"kind": "param",
									"name": "options.nextClass",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "CSS Class used in the next element"
								},
								{
									"kind": "param",
									"name": "options.nextPageClass",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "CSS Class used in the next page element"
								},
								{
									"kind": "param",
									"name": "options.numberFormatter",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "optional function which takes and 0-indexed number and returns the string which appears on a numbered button"
								}
							],
							"version": "1"
						},
						{
							"kind": "function",
							"name": "_init",
							"file": "src/js/Ink/UI/Pagination/1/lib.js",
							"text": "Init function called by the constructor",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_observe",
							"file": "src/js/Ink/UI/Pagination/1/lib.js",
							"text": "Responsible for setting listener in the 'click' event of the Pagination element.",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_calculateSize",
							"file": "src/js/Ink/UI/Pagination/1/lib.js",
							"text": "Calculate how many pages are necessary for `count` items, and `itemsPerPage` items per page.",
							"params": [
								{
									"kind": "param",
									"name": "count",
									"isFirstLevel": true
								},
								{
									"kind": "param",
									"name": "itemsPerPage",
									"isFirstLevel": true
								}
							],
							"private": true
						},
						{
							"kind": "function",
							"name": "_updateItems",
							"file": "src/js/Ink/UI/Pagination/1/lib.js",
							"text": "Updates the markup everytime there's a change in the Pagination object.",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_generateMarkup",
							"file": "src/js/Ink/UI/Pagination/1/lib.js",
							"text": "Returns the top element for the gallery DOM representation",
							"params": [
								{
									"kind": "param",
									"name": "el",
									"type": "DOMElement",
									"isFirstLevel": true
								}
							],
							"private": true
						},
						{
							"kind": "function",
							"name": "_onClick",
							"file": "src/js/Ink/UI/Pagination/1/lib.js",
							"text": "Click handler",
							"params": [
								{
									"kind": "param",
									"name": "ev",
									"type": "Event",
									"isFirstLevel": true
								}
							],
							"private": true
						},
						{
							"kind": "function",
							"name": "setOnChange",
							"file": "src/js/Ink/UI/Pagination/1/lib.js",
							"text": "Allows you to subscribe to the onChange event",
							"params": [
								{
									"kind": "param",
									"name": "cb",
									"isFirstLevel": true,
									"description": "{Function} Callback called with `(thisPaginator, newPageNumber)`."
								}
							]
						},
						{
							"kind": "function",
							"name": "setSize",
							"file": "src/js/Ink/UI/Pagination/1/lib.js",
							"text": "Sets the number of pages",
							"params": [
								{
									"kind": "param",
									"name": "sz",
									"type": "Number",
									"isFirstLevel": true,
									"description": "number of pages"
								},
								{
									"kind": "param",
									"name": "setSizeInItems",
									"isFirstLevel": true
								},
								{
									"kind": "param",
									"name": "totalItems",
									"type": "Number",
									"isFirstLevel": true
								},
								{
									"kind": "param",
									"name": "itemsPerPage",
									"type": "Number",
									"isFirstLevel": true
								}
							]
						},
						{
							"kind": "function",
							"name": "setCurrent",
							"file": "src/js/Ink/UI/Pagination/1/lib.js",
							"text": "Sets the current page",
							"params": [
								{
									"kind": "param",
									"name": "nr",
									"type": "Number",
									"isFirstLevel": true,
									"description": "sets the current page to given number"
								},
								{
									"kind": "param",
									"name": "isRelative",
									"type": "Boolean",
									"isFirstLevel": true,
									"description": "trueish to set relative change instead of absolute (default)"
								}
							]
						},
						{
							"kind": "function",
							"name": "getSize",
							"file": "src/js/Ink/UI/Pagination/1/lib.js",
							"text": "Returns the number of pages",
							"params": [],
							"return": {
								"kind": "return",
								"type": "Number",
								"description": "Number of pages"
							}
						},
						{
							"kind": "function",
							"name": "getCurrent",
							"file": "src/js/Ink/UI/Pagination/1/lib.js",
							"text": "Returns current page",
							"params": [],
							"return": {
								"kind": "return",
								"type": "Number",
								"description": "Current page"
							}
						},
						{
							"kind": "function",
							"name": "isFirst",
							"file": "src/js/Ink/UI/Pagination/1/lib.js",
							"text": "Returns true iif at first page",
							"params": [],
							"return": {
								"kind": "return",
								"type": "Boolean",
								"description": "True if at first page"
							}
						},
						{
							"kind": "function",
							"name": "isLast",
							"file": "src/js/Ink/UI/Pagination/1/lib.js",
							"text": "Returns true iif at last page",
							"params": [],
							"return": {
								"kind": "return",
								"type": "Boolean",
								"description": "True if at last page"
							}
						},
						{
							"kind": "function",
							"name": "hasPrevious",
							"file": "src/js/Ink/UI/Pagination/1/lib.js",
							"text": "Returns true iif has prior pages",
							"params": [],
							"return": {
								"kind": "return",
								"type": "Boolean",
								"description": "True if has prior pages"
							}
						},
						{
							"kind": "function",
							"name": "hasNext",
							"file": "src/js/Ink/UI/Pagination/1/lib.js",
							"text": "Returns true iif has pages ahead",
							"params": [],
							"return": {
								"kind": "return",
								"type": "Boolean",
								"description": "True if has pages ahead"
							}
						},
						{
							"kind": "function",
							"name": "hasPreviousPage",
							"file": "src/js/Ink/UI/Pagination/1/lib.js",
							"text": "Returns true iif has prior set of page(s)",
							"params": [],
							"return": {
								"kind": "return",
								"type": "Boolean",
								"description": "Returns true iif has prior set of page(s)"
							}
						},
						{
							"kind": "function",
							"name": "hasNextPage",
							"file": "src/js/Ink/UI/Pagination/1/lib.js",
							"text": "Returns true iif has set of page(s) ahead",
							"params": [],
							"return": {
								"kind": "return",
								"type": "Boolean",
								"description": "Returns true iif has set of page(s) ahead"
							}
						},
						{
							"kind": "function",
							"name": "destroy",
							"file": "src/js/Ink/UI/Pagination/1/lib.js",
							"text": "Unregisters the component and removes its markup from the DOM",
							"params": []
						}
					],
					"attributes": []
				}
			],
			"functions": [
				{
					"kind": "function",
					"name": "genAel",
					"file": "src/js/Ink/UI/Pagination/1/lib.js",
					"text": "Function to create the pagination anchors",
					"params": [
						{
							"kind": "param",
							"name": "inner",
							"type": "String",
							"isFirstLevel": true,
							"description": "HTML to be placed inside the anchor."
						}
					],
					"private": true,
					"return": {
						"kind": "return",
						"type": "DOMElement",
						"description": "Anchor created"
					}
				}
			],
			"attributes": [],
			"uses": [],
			"author": "inkdev AT sapo.pt",
			"version": "1"
		},
		{
			"kind": "module",
			"name": "Ink.UI.ProgressBar_1",
			"file": "src/js/Ink/UI/ProgressBar/1/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink.UI.ProgressBar",
					"text": "Associated to a .ink-progress-bar element, it provides the necessary\nmethod - setValue() - for the user to change the element's value.",
					"file": "src/js/Ink/UI/ProgressBar/1/lib.js",
					"functions": [
						{
							"kind": "function",
							"name": "ProgressBar",
							"file": "src/js/Ink/UI/ProgressBar/1/lib.js",
							"isConstructor": true,
							"params": [
								{
									"kind": "param",
									"name": "selector",
									"type": "String|DOMElement",
									"isFirstLevel": true
								},
								{
									"kind": "param",
									"name": "options",
									"type": "Object",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Options"
								},
								{
									"kind": "param",
									"name": "options.startValue",
									"type": "Number",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Percentage of the bar that is filled. Range between 0 and 100. Default: 0"
								},
								{
									"kind": "param",
									"name": "options.onStart",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Callback that is called when a change of value is started"
								},
								{
									"kind": "param",
									"name": "options.onEnd",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Callback that is called when a change of value ends"
								}
							],
							"version": "1",
							"examples": [
								"\n     <div class=\"ink-progress-bar grey\" data-start-value=\"70%\">\n         <span class=\"caption\">I am a grey progress bar</span>\n         <div class=\"bar grey\"></div>\n     </div>\n     <script>\n         Ink.requireModules( ['Ink.Dom.Selector_1','Ink.UI.ProgressBar_1'], function( Selector, ProgressBar ){\n             var progressBarElement = Ink.s('.ink-progress-bar');\n             var progressBarObj = new ProgressBar( progressBarElement );\n         });\n     </script>\n"
							]
						},
						{
							"kind": "function",
							"name": "_init",
							"file": "src/js/Ink/UI/ProgressBar/1/lib.js",
							"text": "Init function called by the constructor",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "setValue",
							"file": "src/js/Ink/UI/ProgressBar/1/lib.js",
							"text": "Sets the value of the Progressbar",
							"params": [
								{
									"kind": "param",
									"name": "newValue",
									"type": "Number",
									"isFirstLevel": true,
									"description": "Numeric value, between 0 and 100, that represents the percentage of the bar."
								}
							]
						}
					],
					"attributes": []
				}
			],
			"functions": [],
			"attributes": [],
			"uses": [],
			"author": "inkdev AT sapo.pt",
			"version": "1"
		},
		{
			"kind": "module",
			"name": "Ink.UI.SmoothScroller_1",
			"file": "src/js/Ink/UI/SmoothScroller/1/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink.UI.SmoothScroller",
					"file": "src/js/Ink/UI/SmoothScroller/1/lib.js",
					"functions": [
						{
							"kind": "function",
							"name": "getTop",
							"file": "src/js/Ink/UI/SmoothScroller/1/lib.js",
							"text": "Returns the Y position of an element, relative to the document",
							"params": [
								{
									"kind": "param",
									"name": "d",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "DOMElement to get the Y position from"
								}
							],
							"return": {
								"kind": "return",
								"type": "Number",
								"description": "Y position of div 'd'"
							},
							"static": true
						},
						{
							"kind": "function",
							"name": "scrollTop",
							"file": "src/js/Ink/UI/SmoothScroller/1/lib.js",
							"text": "Returns the current scroll position",
							"params": [],
							"return": {
								"kind": "return",
								"type": "Number",
								"description": "Current scroll position"
							},
							"static": true
						},
						{
							"kind": "function",
							"name": "add",
							"file": "src/js/Ink/UI/SmoothScroller/1/lib.js",
							"text": "Attaches an event for an element",
							"params": [
								{
									"kind": "param",
									"name": "el",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "DOMElement to make the listening of the event"
								},
								{
									"kind": "param",
									"name": "event",
									"type": "String",
									"isFirstLevel": true,
									"description": "Event name to be listened"
								},
								{
									"kind": "param",
									"name": "fn",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "Callback function to run when the event is triggered."
								}
							],
							"static": true
						},
						{
							"kind": "function",
							"name": "end",
							"file": "src/js/Ink/UI/SmoothScroller/1/lib.js",
							"text": "Kill an event of an element",
							"params": [
								{
									"kind": "param",
									"name": "e",
									"type": "String",
									"isFirstLevel": true,
									"description": "Event to be killed/stopped"
								}
							],
							"static": true
						},
						{
							"kind": "function",
							"name": "scroll",
							"file": "src/js/Ink/UI/SmoothScroller/1/lib.js",
							"text": "Moves the scrollbar to the target element. This is the function\nwhich animates the scroll position bit by bit. It calls itself in\nthe end through requestAnimationFrame",
							"params": [
								{
									"kind": "param",
									"name": "d",
									"type": "Number",
									"isFirstLevel": true,
									"description": "Y coordinate value to stop"
								}
							],
							"static": true
						},
						{
							"kind": "function",
							"name": "init",
							"file": "src/js/Ink/UI/SmoothScroller/1/lib.js",
							"text": "Has smooth scrolling applied to relevant elements upon page load.",
							"params": [
								{
									"kind": "param",
									"name": "selector",
									"isOptional": true,
									"defaultValue": "'a.scrollableLink,a.ink-smooth-scroll'",
									"isFirstLevel": true,
									"description": "Selector string for finding links with smooth scrolling enabled."
								}
							],
							"static": true
						},
						{
							"kind": "function",
							"name": "render",
							"file": "src/js/Ink/UI/SmoothScroller/1/lib.js",
							"text": "This method extracts all the anchors and validates them as # and attaches the events",
							"params": [],
							"static": true
						},
						{
							"kind": "function",
							"name": "onClick",
							"file": "src/js/Ink/UI/SmoothScroller/1/lib.js",
							"text": "Click handler",
							"params": [],
							"static": true
						}
					],
					"attributes": [
						{
							"kind": "attribute",
							"name": "speed",
							"text": "Sets the speed of the scrolling",
							"type": "Number",
							"static": true
						}
					],
					"isNamespace": true,
					"version": "1",
					"static": true,
					"examples": [
						"\n\n     <a href=\"#part1\" class=\"ink-smooth-scroll\" data-margin=\"10\">go to Part 1</a>\n\n     [lots and lots of content...]\n\n     <h1 id=\"part1\">Part 1</h1>\n\n     <script>\n         // ...Although you don't need to do this if you have autoload.js\n         Ink.requireModules(['Ink.UI.SmoothScroller_1'], function (SmoothScroller) {\n             SmoothScroller.init('.ink-smooth-scroll');\n         })\n     </script>\n"
					]
				}
			],
			"functions": [],
			"attributes": [],
			"uses": [],
			"author": "inkdev AT sapo.pt",
			"version": "1"
		},
		{
			"kind": "module",
			"name": "Ink.UI.SortableList_1",
			"file": "src/js/Ink/UI/SortableList/1/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink.UI.SortableList",
					"text": "Adds sortable behaviour to any list!",
					"file": "src/js/Ink/UI/SortableList/1/lib.js",
					"functions": [
						{
							"kind": "function",
							"name": "SortableList",
							"file": "src/js/Ink/UI/SortableList/1/lib.js",
							"isConstructor": true,
							"params": [
								{
									"kind": "param",
									"name": "selector",
									"type": "String|DOMElement",
									"isFirstLevel": true
								},
								{
									"kind": "param",
									"name": "options.placeholderClass",
									"type": "String",
									"isOptional": true,
									"defaultValue": "'placeholder'",
									"isFirstLevel": false,
									"description": "CSS class to be added to the \"ghost\" element being dragged around"
								},
								{
									"kind": "param",
									"name": "options.draggedClass",
									"type": "String",
									"isOptional": true,
									"defaultValue": "'hide-all'",
									"isFirstLevel": false,
									"description": "CSS class added to the original element."
								},
								{
									"kind": "param",
									"name": "options.draggingClass",
									"type": "String",
									"isOptional": true,
									"defaultValue": "'dragging'",
									"isFirstLevel": false,
									"description": "CSS class added to the html element when the user is dragging."
								},
								{
									"kind": "param",
									"name": "options.dragSelector",
									"type": "String",
									"isOptional": true,
									"defaultValue": "'li'",
									"isFirstLevel": false,
									"description": "CSS selector for the drag enabled nodes."
								},
								{
									"kind": "param",
									"name": "options.handleSelector",
									"type": "String",
									"isOptional": true,
									"defaultValue": "null",
									"isFirstLevel": false,
									"description": "CSS selector for the drag handle. If present, you can only drag nodes by this selector."
								},
								{
									"kind": "param",
									"name": "options.moveSelector",
									"type": "String",
									"isOptional": true,
									"defaultValue": "null",
									"isFirstLevel": false,
									"description": "CSS selector to validate a node move. If present, you can only move nodes into this selector."
								},
								{
									"kind": "param",
									"name": "options.swap",
									"type": "Boolean",
									"isOptional": true,
									"defaultValue": "false",
									"isFirstLevel": false,
									"description": "Flag to swap moving element with target element instead of changing its order."
								},
								{
									"kind": "param",
									"name": "options.cancelMouseOut",
									"type": "Boolean",
									"isOptional": true,
									"defaultValue": "false",
									"isFirstLevel": false,
									"description": "Flag to cancel moving if mouse leaves the container element."
								}
							],
							"version": "1",
							"examples": [
								"\n     <ul class=\"unstyled ink-sortable-list\" id=\"slist\" data-handle-selector=\".ink-label\">\n         <li><span class=\"ink-label info\">drag here</span>primeiro</li>\n         <li><span class=\"ink-label info\">drag here</span>segundo</li>\n         <li><span class=\"ink-label info\">drag here</span>terceiro</li>\n     </ul>\n     <script>\n         Ink.requireModules( ['Ink.Dom.Selector_1','Ink.UI.SortableList_1'], function( Selector, SortableList ){\n             var sortableListElement = Ink.s('.ink-sortable-list');\n             var sortableListObj = new SortableList( sortableListElement );\n         });\n     <\\/script>\n"
							]
						},
						{
							"kind": "function",
							"name": "_init",
							"file": "src/js/Ink/UI/SortableList/1/lib.js",
							"text": "Init function called by the constructor.",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_observe",
							"file": "src/js/Ink/UI/SortableList/1/lib.js",
							"text": "Sets the event handlers.",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_onDown",
							"file": "src/js/Ink/UI/SortableList/1/lib.js",
							"text": "Mousedown or touchstart handler",
							"params": [
								{
									"kind": "param",
									"name": "ev",
									"type": "Event",
									"isFirstLevel": true
								}
							],
							"private": true
						},
						{
							"kind": "function",
							"name": "_onMove",
							"file": "src/js/Ink/UI/SortableList/1/lib.js",
							"text": "Mousemove or touchmove handler",
							"params": [
								{
									"kind": "param",
									"name": "ev",
									"type": "Event",
									"isFirstLevel": true
								}
							],
							"private": true
						},
						{
							"kind": "function",
							"name": "_onUp",
							"file": "src/js/Ink/UI/SortableList/1/lib.js",
							"text": "Mouseup or touchend handler",
							"params": [
								{
									"kind": "param",
									"name": "ev",
									"type": "Event",
									"isFirstLevel": true
								}
							],
							"private": true
						},
						{
							"kind": "function",
							"name": "_addMovingClasses",
							"file": "src/js/Ink/UI/SortableList/1/lib.js",
							"text": "Adds the CSS classes to interactive elements",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_removeMovingClasses",
							"file": "src/js/Ink/UI/SortableList/1/lib.js",
							"text": "Removes the CSS classes from interactive elements",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_movePlaceholder",
							"file": "src/js/Ink/UI/SortableList/1/lib.js",
							"text": "Moves the placeholder element relative to the target element",
							"params": [
								{
									"kind": "param",
									"name": "target_position",
									"type": "Element",
									"isFirstLevel": true
								}
							],
							"private": true
						},
						{
							"kind": "function",
							"name": "destroy",
							"file": "src/js/Ink/UI/SortableList/1/lib.js",
							"text": "Unregisters the component and removes its markup from the DOM",
							"params": []
						},
						{
							"kind": "function",
							"name": "_movePlaceholder",
							"file": "src/js/Ink/UI/SortableList/1/lib.js",
							"text": "Visually stops moving. Removes the placeholder as well as the styling classes.",
							"params": []
						},
						{
							"kind": "function",
							"name": "_movePlaceholder",
							"file": "src/js/Ink/UI/SortableList/1/lib.js",
							"text": "Validation method for the move handler",
							"params": [
								{
									"kind": "param",
									"name": "elem",
									"type": "Element",
									"isFirstLevel": true
								}
							]
						}
					],
					"attributes": []
				}
			],
			"functions": [],
			"attributes": [],
			"uses": [],
			"author": "inkdev AT sapo.pt",
			"version": "1"
		},
		{
			"kind": "module",
			"name": "Ink.UI.Spy_1",
			"file": "src/js/Ink/UI/Spy/1/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink.UI.Spy",
					"text": "Spy is a component that 'spies' an element (or a group of elements) and when they leave the viewport (through the top),\nhighlight an option - related to that element being spied - that resides in a menu, initially identified as target.",
					"file": "src/js/Ink/UI/Spy/1/lib.js",
					"functions": [
						{
							"kind": "function",
							"name": "Spy",
							"file": "src/js/Ink/UI/Spy/1/lib.js",
							"isConstructor": true,
							"params": [
								{
									"kind": "param",
									"name": "selector",
									"type": "String|DOMElement",
									"isFirstLevel": true
								},
								{
									"kind": "param",
									"name": "options",
									"type": "Object",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Options"
								},
								{
									"kind": "param",
									"name": "options.target",
									"type": "DOMElement|String",
									"isFirstLevel": false,
									"description": "Target menu on where the spy will highlight the right option."
								}
							],
							"version": "1",
							"examples": [
								"\n     <script>\n         Ink.requireModules( ['Ink.Dom.Selector_1','Ink.UI.Spy_1'], function( Selector, Spy ){\n             var menuElement = Ink.s('#menu');\n             var specialAnchorToSpy = Ink.s('#specialAnchor');\n             var spyObj = new Spy( specialAnchorToSpy, {\n                 target: menuElement\n             });\n         });\n     </script>\n"
							]
						},
						{
							"kind": "function",
							"name": "_init",
							"file": "src/js/Ink/UI/Spy/1/lib.js",
							"text": "Init function called by the constructor",
							"params": [],
							"private": true
						}
					],
					"attributes": []
				}
			],
			"functions": [],
			"attributes": [],
			"uses": [],
			"author": "inkdev AT sapo.pt",
			"version": "1"
		},
		{
			"kind": "module",
			"name": "Ink.UI.Stacker_1",
			"file": "src/js/Ink/UI/Stacker/1/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink.UI.Stacker_1",
					"text": "This module combines several stacks of items together, in smaller screen sizes.\n\nThe purpose is to have several stacks of items which may have different heights and as such cannot be used because of `float: left` quirks.\n\nFor example, when you have three different columns of information:\n\n    [col. A: 1] [col. B: 1] [col. C: 1]\n    [col. B: 2] [col. C: 2] [col. C: 2]\n\nand the screen resizes and you need a layout of 2 columns, Stacker reorders the stacks so that you get:\n\n    [col. A: 1] [col. B: 1]\n    [col. C: 1] [col. A: 2]\n    [col. B: 2] [col. C: 2]\n\nNote: If you just want to use a different amount of columns for your items in several viewports, but these items are guaranteed to have a fixed height, don't use this module. Use the `small-*`, `medium-*` and `large-*` classes instead.",
					"file": "src/js/Ink/UI/Stacker/1/lib.js",
					"functions": [
						{
							"kind": "function",
							"name": "Stacker_1",
							"file": "src/js/Ink/UI/Stacker/1/lib.js",
							"isConstructor": true,
							"params": [
								{
									"kind": "param",
									"name": "container",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "{DOMElement|String} Element which contains the stacks (identified by the options.column selector)"
								},
								{
									"kind": "param",
									"name": "options",
									"isOptional": true,
									"isFirstLevel": true
								},
								{
									"kind": "param",
									"name": "options.column",
									"isOptional": true,
									"defaultValue": "'.stacker-column'",
									"isFirstLevel": false,
									"description": "{String}   Select the columns inside the `container`"
								},
								{
									"kind": "param",
									"name": "options.item",
									"isOptional": true,
									"defaultValue": "'.stacker-item'",
									"isFirstLevel": false,
									"description": "{String}   Select items in your stack"
								},
								{
									"kind": "param",
									"name": "options.customBreakPoints",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "{Object}   options for each breakpoint name. Use this if you have more breakpoints than Ink by default (`large`, `medium`, `small`)"
								},
								{
									"kind": "param",
									"name": "options.customBreakpoints.BREAKPOINT_NAME",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "{Object}"
								},
								{
									"kind": "param",
									"name": "options.customBreakpoints.BREAKPOINT_NAME.max",
									"isFirstLevel": false,
									"description": "Maximum screen size as seen in your media query"
								},
								{
									"kind": "param",
									"name": "options.customBreakpoints.BREAKPOINT_NAME.min",
									"isFirstLevel": false,
									"description": "Minimum screen size as seen in your media query"
								},
								{
									"kind": "param",
									"name": "options.customBreakpoints.BREAKPOINT_NAME.cols",
									"isFirstLevel": false,
									"description": "Column count for this size."
								},
								{
									"kind": "param",
									"name": "options.largeMax",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "{Number}   Upper bound of `large` breakpoint"
								},
								{
									"kind": "param",
									"name": "options.largeMin",
									"isOptional": true,
									"defaultValue": "961",
									"isFirstLevel": false,
									"description": "{Number}   Lower bound of `large` breakpoint"
								},
								{
									"kind": "param",
									"name": "options.mediumMax",
									"isOptional": true,
									"defaultValue": "960",
									"isFirstLevel": false,
									"description": "{Number}   Upper bound of `medium` breakpoint"
								},
								{
									"kind": "param",
									"name": "options.mediumMin",
									"isOptional": true,
									"defaultValue": "651",
									"isFirstLevel": false,
									"description": "{Number}   Lower bound of `medium` breakpoint"
								},
								{
									"kind": "param",
									"name": "options.smallMax",
									"isOptional": true,
									"defaultValue": "650",
									"isFirstLevel": false,
									"description": "{Number}   Upper bound of `small` breakpoint"
								},
								{
									"kind": "param",
									"name": "options.smallMin",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "{Number}   Lower bound of `small` breakpoint"
								},
								{
									"kind": "param",
									"name": "options.largeCols",
									"isOptional": true,
									"defaultValue": "3",
									"isFirstLevel": false,
									"description": "{Integer}  Number of columns in the `large` viewport"
								},
								{
									"kind": "param",
									"name": "options.mediumCols",
									"isOptional": true,
									"defaultValue": "2",
									"isFirstLevel": false,
									"description": "{Integer}  Number of columns in the `medium` viewport"
								},
								{
									"kind": "param",
									"name": "options.smallCols",
									"isOptional": true,
									"defaultValue": "1",
									"isFirstLevel": false,
									"description": "{Integer}  Number of columns in the `small` viewport"
								},
								{
									"kind": "param",
									"name": "options.isOrdered",
									"isOptional": true,
									"defaultValue": "true",
									"isFirstLevel": false,
									"description": "{Boolean}  When `false`, do not reorder stacks when combining them."
								},
								{
									"kind": "param",
									"name": "options.onRunCallback",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "{Function} Called when instantiated"
								},
								{
									"kind": "param",
									"name": "options.onResizeCallback",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "{Function} Called when resized because the window resized."
								},
								{
									"kind": "param",
									"name": "options.onAPIReloadCallback",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "{Function} Called when you ask to reload stack items from the DOM."
								}
							],
							"examples": [
								"\n\nHtml:\n\n    <div id=\"stacker-container\">  <!-- Stacker element -->\n        <div class=\"xlarge-33 large-33 medium-50 tiny-100 stacker-column\"> <!-- Column element ('.stacker-column' is the default selector) -->\n            <div id=\"a\" class=\"stacker-item\">a</div> <!-- Item ('.stacker-item' is the default selector) -->\n            <div id=\"d\" class=\"stacker-item\">d</div>\n            <div id=\"g\" class=\"stacker-item\">g</div>\n        </div>\n        <div class=\"xlarge-33 large-33 medium-50 tiny-100 hide-small stacker-column\">\n            <div id=\"b\" class=\"stacker-item\">b</div>\n            <div id=\"e\" class=\"stacker-item\">e</div>\n            <div id=\"h\" class=\"stacker-item\">h</div>\n        </div>\n        <div class=\"xlarge-33 large-33 medium-50 tiny-100 hide-medium hide-small stacker-column\">\n            <div id=\"c\" class=\"stacker-item\">c</div>\n            <div id=\"f\" class=\"stacker-item\">f</div>\n            <div id=\"i\" class=\"stacker-item\">i</div>\n        </div>\n    </div>\n\nJavascript:\n\n    Ink.requireModules(['Ink.UI.Stacker_1'], function (Stacker) {\n        var stacker = new Stacker('#stacker-container');\n        // Keep the \"stacker\" variable around if you want to call addItem and reloadItems\n    });\n"
							]
						},
						{
							"kind": "function",
							"name": "addItem",
							"file": "src/js/Ink/UI/Stacker/1/lib.js",
							"text": "Add an item to the end of your stacks. Call `reloadItems()` when you are done adding items.",
							"params": [
								{
									"kind": "param",
									"name": "item",
									"type": "DOMElement",
									"isFirstLevel": true
								}
							]
						},
						{
							"kind": "function",
							"name": "reloadItems",
							"file": "src/js/Ink/UI/Stacker/1/lib.js",
							"text": "Update the layout of your items.\n\nCall this when:\n\n - The width has changed, but not because of the window resizing.\n - You used addItem to add some items",
							"params": []
						}
					],
					"attributes": []
				}
			],
			"functions": [],
			"attributes": [],
			"uses": []
		},
		{
			"kind": "module",
			"name": "Ink.UI.Sticky_1",
			"file": "src/js/Ink/UI/Sticky/1/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink.UI.Sticky",
					"text": "The Sticky component takes an element and transforms it's behavior in order to, when the user scrolls he sets its position\nto fixed and maintain it until the user scrolls back to the same place.",
					"file": "src/js/Ink/UI/Sticky/1/lib.js",
					"functions": [
						{
							"kind": "function",
							"name": "Sticky",
							"file": "src/js/Ink/UI/Sticky/1/lib.js",
							"isConstructor": true,
							"params": [
								{
									"kind": "param",
									"name": "selector",
									"type": "String|DOMElement",
									"isFirstLevel": true
								},
								{
									"kind": "param",
									"name": "options",
									"type": "Object",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Options"
								},
								{
									"kind": "param",
									"name": "options.offsetBottom",
									"type": "Number",
									"isOptional": true,
									"defaultValue": "0",
									"isFirstLevel": false,
									"description": "Number of pixels of distance from the bottomElement."
								},
								{
									"kind": "param",
									"name": "options.offsetTop",
									"type": "Number",
									"isOptional": true,
									"defaultValue": "0",
									"isFirstLevel": false,
									"description": "Number of pixels of distance from the topElement."
								},
								{
									"kind": "param",
									"name": "options.inlineDimensions",
									"type": "Boolean",
									"isOptional": true,
									"defaultValue": "true",
									"isFirstLevel": false,
									"description": "Whether to set \"style.height\" and \"style.width\" in the stuck element. Turn this off when your `stickyClass` has its own height and width and you don't want this to be dealt with through javascript."
								},
								{
									"kind": "param",
									"name": "options.inlinePosition",
									"type": "Boolean",
									"isOptional": true,
									"defaultValue": "true",
									"isFirstLevel": false,
									"description": "Whether to set \"style.left\" in the stuck element. Turn this off when your `stickyClass` has its own \"left\" position and you don't want this to be dealt with through javascript."
								},
								{
									"kind": "param",
									"name": "options.wrapperClass",
									"type": "String",
									"isOptional": true,
									"defaultValue": "\"ink-sticky-wrapper\"",
									"isFirstLevel": false,
									"description": "Css class for the wrapper element."
								},
								{
									"kind": "param",
									"name": "options.stickyClass",
									"type": "String",
									"isOptional": true,
									"defaultValue": "\"ink-sticky-stuck\"",
									"isFirstLevel": false,
									"description": "Css class for sticking the sticky to the screen. Add your own \"stuck\" class to define your own sticky behaviour."
								},
								{
									"kind": "param",
									"name": "options.topElement",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "CSS Selector that specifies a top element with which the component could collide."
								},
								{
									"kind": "param",
									"name": "options.bottomElement",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "CSS Selector that specifies a bottom element with which the component could collide."
								},
								{
									"kind": "param",
									"name": "options.activateInLayouts",
									"type": "Array|String",
									"isOptional": true,
									"defaultValue": "'medium,large'",
									"isFirstLevel": false,
									"description": "Layouts in which the sticky behaviour is present. Pass an array or comma-separated string."
								}
							],
							"version": "1",
							"examples": [
								"\n     <script>\n         Ink.requireModules( ['Ink.Dom.Selector_1','Ink.UI.Sticky_1'], function( Selector, Sticky ) {\n             var menuElement = Ink.s('#menu');\n             var stickyObj = new Sticky( menuElement );\n         });\n     </script>\n"
							]
						},
						{
							"kind": "function",
							"name": "_init",
							"file": "src/js/Ink/UI/Sticky/1/lib.js",
							"text": "Init function called by the constructor",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "isDisabledInLayout",
							"file": "src/js/Ink/UI/Sticky/1/lib.js",
							"text": "Returns whether the sticky is disabled in the current view",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_onScroll",
							"file": "src/js/Ink/UI/Sticky/1/lib.js",
							"text": "Scroll handler.",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_stickTo",
							"file": "src/js/Ink/UI/Sticky/1/lib.js",
							"text": "Have the sticky stick nowhere, to the screen, or to the bottom.",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_unstick",
							"file": "src/js/Ink/UI/Sticky/1/lib.js",
							"text": "\"unstick\" the sticky from the screen or bottom of the document",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_onResize",
							"file": "src/js/Ink/UI/Sticky/1/lib.js",
							"text": "Resize handler",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_inlineDimensions",
							"file": "src/js/Ink/UI/Sticky/1/lib.js",
							"text": "Set style.height and style.width, but not if options.inlineDimensions === false",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_getBottomOffset",
							"file": "src/js/Ink/UI/Sticky/1/lib.js",
							"text": "Get the distance between the bottom of the element and the bottom of the page",
							"params": [],
							"private": true
						}
					],
					"attributes": []
				}
			],
			"functions": [],
			"attributes": [],
			"uses": [],
			"author": "inkdev AT sapo.pt",
			"version": "1"
		},
		{
			"kind": "module",
			"name": "Ink.UI.Swipe",
			"file": "src/js/Ink/UI/Swipe/1/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink.UI.Swipe",
					"text": "Subscribe swipe gestures!\n\nSupports filtering swipes be any combination of the criteria supported in the options.",
					"file": "src/js/Ink/UI/Swipe/1/lib.js",
					"functions": [
						{
							"kind": "function",
							"name": "Swipe",
							"file": "src/js/Ink/UI/Swipe/1/lib.js",
							"isConstructor": true,
							"params": [
								{
									"kind": "param",
									"name": "el",
									"type": "String|DOMElement",
									"isFirstLevel": true
								},
								{
									"kind": "param",
									"name": "options",
									"type": "Object",
									"isFirstLevel": true
								},
								{
									"kind": "param",
									"name": "options.onEnd",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "callback function for the `touchend` event. Gets all the gesture information, and is filtered by min/max Dist and Duration options (see below)"
								},
								{
									"kind": "param",
									"name": "options.onStart",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "callback function for `touchstart` event"
								},
								{
									"kind": "param",
									"name": "options.onMove",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "callback function for every `touchmove` event. Gets current gesture information."
								},
								{
									"kind": "param",
									"name": "options.minDist",
									"type": "Number",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "minimum allowed distance, in pixels"
								},
								{
									"kind": "param",
									"name": "options.maxDist",
									"type": "Number",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "maximum allowed distance, in pixels"
								},
								{
									"kind": "param",
									"name": "options.minDuration",
									"type": "Number",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "minimum allowed duration, in seconds"
								},
								{
									"kind": "param",
									"name": "options.maxDuration",
									"type": "Number",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "maximum allowed duration, in seconds"
								},
								{
									"kind": "param",
									"name": "options.axis",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "if either 'x' or 'y' is passed, only swipes where the dominant axis is the given one trigger the callback"
								},
								{
									"kind": "param",
									"name": "options.storeGesture",
									"type": "String",
									"isOptional": true,
									"defaultValue": "false",
									"isFirstLevel": false,
									"description": "store gesture information and provide to the callback"
								},
								{
									"kind": "param",
									"name": "options.stopEvents",
									"type": "String",
									"isOptional": true,
									"defaultValue": "true",
									"isFirstLevel": false,
									"description": "stop (default and propagation) of the received events"
								}
							]
						}
					],
					"attributes": []
				}
			],
			"functions": [],
			"attributes": [],
			"uses": [],
			"author": "ink AT sapo.pt",
			"version": "1"
		},
		{
			"kind": "module",
			"name": "Ink.UI.Table_1",
			"file": "src/js/Ink/UI/Table/1/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink.UI.Table",
					"text": "The Table component transforms the native/DOM table element into a\nsortable, paginated component.",
					"file": "src/js/Ink/UI/Table/1/lib.js",
					"functions": [
						{
							"kind": "function",
							"name": "Table",
							"file": "src/js/Ink/UI/Table/1/lib.js",
							"isConstructor": true,
							"params": [
								{
									"kind": "param",
									"name": "selector",
									"type": "String|DOMElement",
									"isFirstLevel": true
								},
								{
									"kind": "param",
									"name": "options",
									"type": "Object",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Options"
								},
								{
									"kind": "param",
									"name": "options.pageSize",
									"type": "Number",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Number of rows per page. Omit to avoid paginating."
								},
								{
									"kind": "param",
									"name": "options.endpoint",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Endpoint to get the records via AJAX. Omit if you don't want to do AJAX"
								},
								{
									"kind": "param",
									"name": "options.createEndpointUrl",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Callback to customise what URL the AJAX endpoint is at. Receives three"
								},
								{
									"kind": "param",
									"name": "options.getDataFromEndPoint",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Callback to allow the user to retrieve the data himself given an URL."
								},
								{
									"kind": "param",
									"name": "options.processJSONRows",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Retrieve an array of rows from the data which came from AJAX."
								},
								{
									"kind": "param",
									"name": "options.processJSONHeaders",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Get an object with all the headers' names as keys, and a { label, sortable }"
								},
								{
									"kind": "param",
									"name": "options.processJSONRow",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Process a row object before it gets on the table."
								},
								{
									"kind": "param",
									"name": "options.processJSONField",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Process the field data before putting it on the table."
								},
								{
									"kind": "param",
									"name": "options.processJSONField.FIELD_NAME",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "The same as processJSONField, but for a particular field."
								},
								{
									"kind": "param",
									"name": "options.processJSONTotalRows",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "A callback where you have a chance to say how many rows"
								},
								{
									"kind": "param",
									"name": "options.getSortKey",
									"type": "Function",
									"isOptional": true,
									"defaultValue": "null",
									"isFirstLevel": false,
									"description": "A function taking a `{ columnIndex, columnName, data, element }`"
								},
								{
									"kind": "param",
									"name": "options.getSortKey.FIELD_NAME",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Same as `options.getSortKey`, but for a particular field."
								},
								{
									"kind": "param",
									"name": "options.tdClassNames",
									"type": "Object",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "An object mapping each field to what classes it gets."
								},
								{
									"kind": "param",
									"name": "options.pagination",
									"type": "String|DomElement|Ink.UI.Pagination",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Pagination instance or element."
								},
								{
									"kind": "param",
									"name": "options.paginationOptions",
									"type": "Object",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Override the options with which we instantiate the Ink.UI.Pagination."
								},
								{
									"kind": "param",
									"name": "options.allowResetSorting",
									"type": "Boolean",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Allow sort order to be set to \"none\" in addition to \"ascending\" and \"descending\""
								},
								{
									"kind": "param",
									"name": "options.visibleFields",
									"type": "String|Array",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Set of fields which get shown on the table"
								}
							],
							"version": "1",
							"examples": [
								"\n     <table class=\"ink-table alternating\" data-page-size=\"6\">\n         <thead>\n             <tr>\n                 <th data-sortable=\"true\" width=\"75%\">Pepper</th>\n                 <th data-sortable=\"true\" width=\"25%\">Scoville Rating</th>\n             </tr>\n         </thead>\n         <tbody>\n             <tr>\n                 <td>Trinidad Moruga Scorpion</td>\n                 <td>1500000</td>\n             </tr>\n             <tr>\n                 <td>Bhut Jolokia</td>\n                 <td>1000000</td>\n             </tr>\n             <tr>\n                 <td>Naga Viper</td>\n                 <td>1463700</td>\n             </tr>\n             <tr>\n                 <td>Red Savina Habanero</td>\n                 <td>580000</td>\n             </tr>\n             <tr>\n                 <td>Habanero</td>\n                 <td>350000</td>\n             </tr>\n             <tr>\n                 <td>Scotch Bonnet</td>\n                 <td>180000</td>\n             </tr>\n             <tr>\n                 <td>Malagueta</td>\n                 <td>50000</td>\n             </tr>\n             <tr>\n                 <td>Tabasco</td>\n                 <td>35000</td>\n             </tr>\n             <tr>\n                 <td>Serrano Chili</td>\n                 <td>27000</td>\n             </tr>\n             <tr>\n                 <td>Jalapeño</td>\n                 <td>8000</td>\n             </tr>\n             <tr>\n                 <td>Poblano</td>\n                 <td>1500</td>\n             </tr>\n             <tr>\n                 <td>Peperoncino</td>\n                 <td>500</td>\n             </tr>\n         </tbody>\n     </table>\n     <nav class=\"ink-navigation\"><ul class=\"pagination\"></ul></nav>\n     <script>\n         Ink.requireModules( ['Ink.Dom.Selector_1','Ink.UI.Table_1'], function( Selector, Table ){\n             var tableElement = Ink.s('.ink-table');\n             var tableObj = new Table( tableElement );\n         });\n     </script>\n"
							]
						},
						{
							"kind": "function",
							"name": "_init",
							"file": "src/js/Ink/UI/Table/1/lib.js",
							"text": "Init function called by the constructor",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_addHeadersClasses",
							"file": "src/js/Ink/UI/Table/1/lib.js",
							"text": "Add the classes in this._options.tdClassNames to our table headers.",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_onThClick",
							"file": "src/js/Ink/UI/Table/1/lib.js",
							"text": "Click handler. This will mainly handle the sorting (when you click in the headers)",
							"params": [
								{
									"kind": "param",
									"name": "event",
									"type": "Event",
									"isFirstLevel": true,
									"description": "Event obj"
								}
							],
							"private": true
						},
						{
							"kind": "function",
							"name": "_paginate",
							"file": "src/js/Ink/UI/Table/1/lib.js",
							"text": "Applies and/or changes the CSS classes in order to show the right columns",
							"params": [
								{
									"kind": "param",
									"name": "page",
									"type": "Number",
									"isFirstLevel": true,
									"description": "Current page"
								}
							],
							"private": true
						},
						{
							"kind": "function",
							"name": "_sort",
							"file": "src/js/Ink/UI/Table/1/lib.js",
							"text": "Sorts by a specific column.",
							"params": [
								{
									"kind": "param",
									"name": "index",
									"type": "Number",
									"isFirstLevel": true,
									"description": "Column number (starting at 0)"
								}
							],
							"private": true
						},
						{
							"kind": "function",
							"name": "_createHeadersFromJson",
							"file": "src/js/Ink/UI/Table/1/lib.js",
							"text": "Assembles the headers markup",
							"params": [
								{
									"kind": "param",
									"name": "headers",
									"type": "Object",
									"isFirstLevel": true,
									"description": "Key-value object that contains the fields as keys, their configuration (label and sorting ability) as value"
								}
							],
							"private": true
						},
						{
							"kind": "function",
							"name": "_resetSortOrder",
							"file": "src/js/Ink/UI/Table/1/lib.js",
							"text": "Reset the sort order as marked on the table headers to \"none\"",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_createRowsFromJSON",
							"file": "src/js/Ink/UI/Table/1/lib.js",
							"text": "This method gets the rows from AJAX and places them as <tr> and <td>",
							"params": [
								{
									"kind": "param",
									"name": "rows",
									"type": "Object",
									"isFirstLevel": true,
									"description": "Array of objects with the data to be showed"
								}
							],
							"private": true
						},
						{
							"kind": "function",
							"name": "_setEndpoint",
							"file": "src/js/Ink/UI/Table/1/lib.js",
							"text": "Sets the endpoint. Useful for changing the endpoint in runtime.",
							"params": [
								{
									"kind": "param",
									"name": "endpoint",
									"type": "String",
									"isFirstLevel": true,
									"description": "New endpoint"
								}
							]
						},
						{
							"kind": "function",
							"name": "_setPagination",
							"file": "src/js/Ink/UI/Table/1/lib.js",
							"text": "Sets the instance's pagination, if necessary.\n\nPrecondition: this._totalRows needs to be known.",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_getData",
							"file": "src/js/Ink/UI/Table/1/lib.js",
							"text": "Method to choose which is the best way to get the data based on the endpoint:\n    - AJAX\n    - JSONP",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_getSortOrder",
							"file": "src/js/Ink/UI/Table/1/lib.js",
							"text": "Return an object describing sort order { field: [field name] ,\norder: [\"asc\" or \"desc\"] }, or null if there is no sorting\ngoing on.",
							"params": [
								{
									"kind": "param",
									"name": "endpointUri",
									"isFirstLevel": true,
									"description": "Endpoint to get data from, after processing."
								}
							],
							"private": true
						}
					],
					"attributes": []
				}
			],
			"functions": [],
			"attributes": [],
			"uses": [],
			"author": "inkdev AT sapo.pt",
			"version": "1"
		},
		{
			"kind": "module",
			"name": "Ink.UI.Tabs_1",
			"file": "src/js/Ink/UI/Tabs/1/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink.UI.Tabs",
					"text": "Tabs component",
					"file": "src/js/Ink/UI/Tabs/1/lib.js",
					"functions": [
						{
							"kind": "function",
							"name": "Tabs",
							"file": "src/js/Ink/UI/Tabs/1/lib.js",
							"isConstructor": true,
							"params": [
								{
									"kind": "param",
									"name": "selector",
									"type": "String|DOMElement",
									"isFirstLevel": true
								},
								{
									"kind": "param",
									"name": "options",
									"type": "Object",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Options"
								},
								{
									"kind": "param",
									"name": "options.preventUrlChange",
									"type": "Boolean",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Flag that determines if follows the link on click or stops the event"
								},
								{
									"kind": "param",
									"name": "options.active",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "ID of the tab to activate on creation"
								},
								{
									"kind": "param",
									"name": "options.disabled",
									"type": "Array",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "IDs of the tabs that will be disabled on creation"
								},
								{
									"kind": "param",
									"name": "options.onBeforeChange",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Callback to be executed before changing tabs"
								},
								{
									"kind": "param",
									"name": "options.onChange",
									"type": "Function",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Callback to be executed after changing tabs"
								},
								{
									"kind": "param",
									"name": "options.triggerEventsOnLoad",
									"type": "Boolean",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Trigger the above events when the page is loaded."
								}
							],
							"version": "1",
							"examples": [
								"\n     <div class=\"ink-tabs top\"> <!-- replace 'top' with 'bottom', 'left' or 'right' to place navigation -->\n         \n         <!-- put navigation first if using top, left or right positioning -->\n         <ul class=\"tabs-nav\">\n             <li><a href=\"#home\">Home</a></li>\n             <li><a href=\"#news\">News</a></li>\n             <li><a href=\"#description\">Description</a></li>\n             <li><a href=\"#stuff\">Stuff</a></li>\n             <li><a href=\"#more_stuff\">More stuff</a></li>\n         </ul>\n         \n         <!-- Put your content second if using top, left or right navigation -->\n         <div id=\"home\" class=\"tabs-content\"><p>Content</p></div>\n         <div id=\"news\" class=\"tabs-content\"><p>Content</p></div>\n         <div id=\"description\" class=\"tabs-content\"><p>Content</p></div>\n         <div id=\"stuff\" class=\"tabs-content\"><p>Content</p></div>\n         <div id=\"more_stuff\" class=\"tabs-content\"><p>Content</p></div>\n         <!-- If you're using bottom navigation, switch the nav block with the content blocks -->\n      \n     </div>\n     <script>\n         Ink.requireModules( ['Ink.Dom.Selector_1','Ink.UI.Tabs_1'], function( Selector, Tabs ){\n             var tabsElement = Ink.s('.ink-tabs');\n             var tabsObj = new Tabs( tabsElement );\n         });\n     </script>\n"
							]
						},
						{
							"kind": "function",
							"name": "_init",
							"file": "src/js/Ink/UI/Tabs/1/lib.js",
							"text": "Init function called by the constructor",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_initializeDom",
							"file": "src/js/Ink/UI/Tabs/1/lib.js",
							"text": "Initialization of the tabs, hides all content before setting the active tab",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_observe",
							"file": "src/js/Ink/UI/Tabs/1/lib.js",
							"text": "Subscribe events",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_setFirstActive",
							"file": "src/js/Ink/UI/Tabs/1/lib.js",
							"text": "Run at instantiation, to determine which is the first active tab\nfallsback from window.location.href to options.active to the first not disabled tab",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_changeTab",
							"file": "src/js/Ink/UI/Tabs/1/lib.js",
							"text": "Changes to the desired tab",
							"params": [
								{
									"kind": "param",
									"name": "link",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "anchor linking to the content container"
								},
								{
									"kind": "param",
									"name": "runCallbacks",
									"type": "boolean",
									"isFirstLevel": true,
									"description": "defines if the callbacks should be run or not"
								}
							],
							"private": true
						},
						{
							"kind": "function",
							"name": "_onTabClicked",
							"file": "src/js/Ink/UI/Tabs/1/lib.js",
							"text": "Tab clicked handler",
							"params": [
								{
									"kind": "param",
									"name": "ev",
									"type": "Event",
									"isFirstLevel": true
								}
							],
							"private": true
						},
						{
							"kind": "function",
							"name": "_onDisabledTabClicked",
							"file": "src/js/Ink/UI/Tabs/1/lib.js",
							"text": "Disabled tab clicked handler",
							"params": [
								{
									"kind": "param",
									"name": "ev",
									"type": "Event",
									"isFirstLevel": true
								}
							],
							"private": true
						},
						{
							"kind": "function",
							"name": "_onResize",
							"file": "src/js/Ink/UI/Tabs/1/lib.js",
							"text": "Resize handler",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_hashify",
							"file": "src/js/Ink/UI/Tabs/1/lib.js",
							"text": "Allows the hash to be passed with or without the cardinal sign",
							"params": [
								{
									"kind": "param",
									"name": "hash",
									"type": "String",
									"isFirstLevel": true,
									"description": "the string to be hashified"
								}
							],
							"return": {
								"kind": "return",
								"type": "String",
								"description": "Resulting hash"
							},
							"private": true
						},
						{
							"kind": "function",
							"name": "_findLinkBuHref",
							"file": "src/js/Ink/UI/Tabs/1/lib.js",
							"text": "Returns the anchor with the desired href",
							"params": [
								{
									"kind": "param",
									"name": "href",
									"type": "String",
									"isFirstLevel": true,
									"description": "the href to be found on the returned link"
								}
							],
							"return": {
								"kind": "return",
								"type": "String|undefined",
								"description": "[description]"
							},
							"private": true
						},
						{
							"kind": "function",
							"name": "changeTab",
							"file": "src/js/Ink/UI/Tabs/1/lib.js",
							"text": "Changes to the desired tag",
							"params": [
								{
									"kind": "param",
									"name": "selector",
									"type": "String|DOMElement",
									"isFirstLevel": true,
									"description": "the id of the desired tab or the link that links to it"
								}
							]
						},
						{
							"kind": "function",
							"name": "disable",
							"file": "src/js/Ink/UI/Tabs/1/lib.js",
							"text": "Disables the desired tag",
							"params": [
								{
									"kind": "param",
									"name": "selector",
									"type": "String|DOMElement",
									"isFirstLevel": true,
									"description": "the id of the desired tab or the link that links to it"
								}
							]
						},
						{
							"kind": "function",
							"name": "enable",
							"file": "src/js/Ink/UI/Tabs/1/lib.js",
							"text": "Enables the desired tag",
							"params": [
								{
									"kind": "param",
									"name": "selector",
									"type": "String|DOMElement",
									"isFirstLevel": true,
									"description": "the id of the desired tab or the link that links to it"
								}
							]
						},
						{
							"kind": "function",
							"name": "activeTab",
							"file": "src/js/Ink/UI/Tabs/1/lib.js",
							"text": "Returns the active tab id",
							"params": [],
							"return": {
								"kind": "return",
								"type": "String",
								"description": "ID of the active tab."
							}
						},
						{
							"kind": "function",
							"name": "activeMenuTab",
							"file": "src/js/Ink/UI/Tabs/1/lib.js",
							"text": "Returns the current active Menu LI",
							"params": [],
							"return": {
								"kind": "return",
								"type": "DOMElement",
								"description": "Active menu LI."
							}
						},
						{
							"kind": "function",
							"name": "activeMenuLink",
							"file": "src/js/Ink/UI/Tabs/1/lib.js",
							"text": "Returns the current active Menu anchorChanges to the desired tag",
							"params": [],
							"return": {
								"kind": "return",
								"type": "DOMElement",
								"description": "Active menu link"
							}
						},
						{
							"kind": "function",
							"name": "activeContentTab",
							"file": "src/js/Ink/UI/Tabs/1/lib.js",
							"text": "Returns the current active Content Tab",
							"params": [],
							"return": {
								"kind": "return",
								"type": "DOMElement",
								"description": "Active Content Tab"
							}
						},
						{
							"kind": "function",
							"name": "destroy",
							"file": "src/js/Ink/UI/Tabs/1/lib.js",
							"text": "Unregisters the component and removes its markup from the DOM",
							"params": []
						}
					],
					"attributes": []
				}
			],
			"functions": [],
			"attributes": [],
			"uses": [],
			"author": "inkdev AT sapo.pt",
			"version": "1"
		},
		{
			"kind": "module",
			"name": "Ink.UI.Toggle_1",
			"file": "src/js/Ink/UI/Toggle/1/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink.UI.Toggle",
					"text": "Toggle component",
					"file": "src/js/Ink/UI/Toggle/1/lib.js",
					"functions": [
						{
							"kind": "function",
							"name": "Toggle",
							"file": "src/js/Ink/UI/Toggle/1/lib.js",
							"isConstructor": true,
							"params": [
								{
									"kind": "param",
									"name": "selector",
									"type": "String|DOMElement",
									"isFirstLevel": true
								},
								{
									"kind": "param",
									"name": "options",
									"type": "Object",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Options"
								},
								{
									"kind": "param",
									"name": "options.target",
									"type": "String",
									"isFirstLevel": false,
									"description": "CSS Selector that specifies the elements that this component will toggle"
								},
								{
									"kind": "param",
									"name": "options.classNameOn",
									"type": "String",
									"isOptional": true,
									"defaultValue": "'show-all'",
									"isFirstLevel": false,
									"description": "className when toggle is On"
								},
								{
									"kind": "param",
									"name": "options.classNameOff",
									"type": "String",
									"isOptional": true,
									"defaultValue": "'hide-all'",
									"isFirstLevel": false,
									"description": "className when toggle is Off."
								},
								{
									"kind": "param",
									"name": "options.triggerEvent",
									"type": "String",
									"isOptional": true,
									"defaultValue": "'click'",
									"isFirstLevel": false,
									"description": "Event that will trigger the toggling."
								},
								{
									"kind": "param",
									"name": "options.closeOnClick",
									"type": "Boolean",
									"isOptional": true,
									"defaultValue": "true",
									"isFirstLevel": false,
									"description": "When this is on, if the user clicks outside of the toggled content, the target is toggled off."
								},
								{
									"kind": "param",
									"name": "options.closeOnInsideClick",
									"type": "Selector",
									"isOptional": true,
									"defaultValue": "'a[href]'",
									"isFirstLevel": false,
									"description": "Toggle off when an element matching this selector is clicked. Set to null to deactivate the check. Default: 'a[href]' (finds links)"
								},
								{
									"kind": "param",
									"name": "options.initialState",
									"type": "Boolean",
									"isOptional": true,
									"defaultValue": "null",
									"isFirstLevel": false,
									"description": "Whether to start toggled off, on, or as found in the markup. (false: off, true: on, null: markup)"
								},
								{
									"kind": "param",
									"name": "options.onChangeState",
									"type": "Function",
									"isOptional": true,
									"defaultValue": "null",
									"isFirstLevel": false,
									"description": "Callback to be called when the toggle state changes. Return `false` to cancel the event."
								}
							],
							"version": "1",
							"examples": [
								"\n     <div class=\"ink-dropdown\">\n         <button class=\"ink-button toggle\" data-target=\"#dropdown\">Dropdown <span class=\"fa fa-caret-down\"></span></button>\n         <ul id=\"dropdown\" class=\"dropdown-menu\">\n             <li class=\"heading\">Heading</li>\n             <li class=\"separator-above\"><a href=\"#\">Option</a></li>\n             <li><a href=\"#\">Option</a></li>\n             <li class=\"separator-above disabled\"><a href=\"#\">Disabled option</a></li>\n             <li class=\"submenu\">\n                 <a href=\"#\" class=\"toggle\" data-target=\"#submenu1\">A longer option name</a>\n                 <ul id=\"submenu1\" class=\"dropdown-menu\">\n                     <li class=\"submenu\">\n                         <a href=\"#\" class=\"toggle\" data-target=\"#ultrasubmenu\">Sub option</a>\n                         <ul id=\"ultrasubmenu\" class=\"dropdown-menu\">\n                             <li><a href=\"#\">Sub option</a></li>\n                             <li><a href=\"#\" data-target=\"ultrasubmenu\">Sub option</a></li>\n                             <li><a href=\"#\">Sub option</a></li>\n                         </ul>\n                     </li>\n                     <li><a href=\"#\">Sub option</a></li>\n                     <li><a href=\"#\">Sub option</a></li>\n                 </ul>\n             </li>\n             <li><a href=\"#\">Option</a></li>\n         </ul>\n     </div>\n     <script>\n         Ink.requireModules( ['Ink.Dom.Selector_1','Ink.UI.Toggle_1'], function( Selector, Toggle ){\n             var toggleElement = Ink.s('.toggle');\n             var toggleObj = new Toggle( toggleElement );\n         });\n     </script>\n"
							]
						},
						{
							"kind": "function",
							"name": "_init",
							"file": "src/js/Ink/UI/Toggle/1/lib.js",
							"text": "Init function called by the constructor",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_bindEvents",
							"file": "src/js/Ink/UI/Toggle/1/lib.js",
							"text": "",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "_onTriggerEvent",
							"file": "src/js/Ink/UI/Toggle/1/lib.js",
							"text": "Event handler. It's responsible for handling the `triggerEvent` as defined in the options.\n\nThis will trigger the toggle.",
							"params": [
								{
									"kind": "param",
									"name": "event",
									"type": "Event",
									"isFirstLevel": true
								}
							],
							"private": true
						},
						{
							"kind": "function",
							"name": "_updateAccordion",
							"file": "src/js/Ink/UI/Toggle/1/lib.js",
							"text": "Be compatible with accordions",
							"params": []
						},
						{
							"kind": "function",
							"name": "_onOutsideClick",
							"file": "src/js/Ink/UI/Toggle/1/lib.js",
							"text": "Click handler. Will handle clicks outside the toggle component.",
							"params": [
								{
									"kind": "param",
									"name": "event",
									"type": "Event",
									"isFirstLevel": true
								},
								{
									"kind": "param",
									"name": "on",
									"isFirstLevel": true,
									"description": "{Boolean} New state (on/off)"
								}
							],
							"private": true
						},
						{
							"kind": "function",
							"name": "setState",
							"file": "src/js/Ink/UI/Toggle/1/lib.js",
							"params": []
						},
						{
							"kind": "function",
							"name": "getState",
							"file": "src/js/Ink/UI/Toggle/1/lib.js",
							"text": "Gets the state of the toggle. (on/off)",
							"params": [],
							"return": {
								"kind": "return",
								"type": "Boolean",
								"description": "whether the toggle is toggled on."
							}
						}
					],
					"attributes": []
				}
			],
			"functions": [],
			"attributes": [],
			"uses": [],
			"author": "inkdev AT sapo.pt",
			"version": "1"
		},
		{
			"kind": "module",
			"name": "Ink.UI.Tooltip_1",
			"file": "src/js/Ink/UI/Tooltip/1/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink.UI.Tooltip",
					"text": "Tooltips are useful as a means to display information about functionality while avoiding clutter.\n\nTooltips show up when you hover elements which \"have\" tooltips.\n\nThis class will \"give\" a tooltip to many elements, selected by its first argument (`target`). This is contrary to the other UI modules in Ink, which are created once per element.\n\nYou can define options either through the second argument of the Tooltip constructor, or as data-attributes in each `target` element. Options set through data-attributes all start with \"data-tip\", and override options passed into the Tooltip constructor.",
					"file": "src/js/Ink/UI/Tooltip/1/lib.js",
					"functions": [
						{
							"kind": "function",
							"name": "Tooltip",
							"file": "src/js/Ink/UI/Tooltip/1/lib.js",
							"isConstructor": true,
							"params": [
								{
									"kind": "param",
									"name": "target",
									"type": "DOMElement|String",
									"isFirstLevel": true,
									"description": "Target element or selector of elements, to display the tooltips on."
								},
								{
									"kind": "param",
									"name": "options",
									"type": "Object",
									"isOptional": true,
									"isFirstLevel": true
								},
								{
									"kind": "param",
									"name": "options.text",
									"isOptional": true,
									"defaultValue": "''",
									"isFirstLevel": false,
									"description": "Text content for the tooltip."
								},
								{
									"kind": "param",
									"name": "options.html",
									"isOptional": true,
									"defaultValue": "''",
									"isFirstLevel": false,
									"description": "HTML for the tooltip. Same as above, but won't escape HTML."
								},
								{
									"kind": "param",
									"name": "options.where",
									"isOptional": true,
									"defaultValue": "'up'",
									"isFirstLevel": false,
									"description": "Positioning for the tooltip. Options are 'up', 'down', 'left', 'right', which place the tooltip in the corresponding direction (and show an arrow), 'mousemove', which follows the mouse as it moves, and 'mousefix', which stays in one place."
								},
								{
									"kind": "param",
									"name": "options.color",
									"isOptional": true,
									"defaultValue": "''",
									"isFirstLevel": false,
									"description": "Color of the tooltip. Options are red, orange, blue, green and black. Default is white."
								},
								{
									"kind": "param",
									"name": "options.fade",
									"isOptional": true,
									"defaultValue": "0.3",
									"isFirstLevel": false,
									"description": "Fade time; Duration of the fade in/out effect."
								},
								{
									"kind": "param",
									"name": "options.forever",
									"isOptional": true,
									"defaultValue": "0",
									"isFirstLevel": false,
									"description": "Set to 1/true to prevent the tooltip from being erased when the mouse hovers away from the target"
								},
								{
									"kind": "param",
									"name": "options.timeout",
									"isOptional": true,
									"defaultValue": "0",
									"isFirstLevel": false,
									"description": "Time for the tooltip to live. Useful together with [options.forever]."
								},
								{
									"kind": "param",
									"name": "options.delay",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Time the tooltip waits until it is displayed. Useful to avoid getting the attention of the user unnecessarily"
								},
								{
									"kind": "param",
									"name": "options.template",
									"isOptional": true,
									"defaultValue": "null",
									"isFirstLevel": false,
									"description": "Element or selector containing HTML to be cloned into the tooltips. Can be a hidden element, because CSS `display` is set to `block`."
								},
								{
									"kind": "param",
									"name": "options.templatefield",
									"isOptional": true,
									"defaultValue": "null",
									"isFirstLevel": false,
									"description": "Selector within the template element to choose where the text is inserted into the tooltip. Useful when a wrapper DIV is required."
								},
								{
									"kind": "param",
									"name": "options.left",
									"isOptional": true,
									"defaultValue": "10",
									"isFirstLevel": false,
									"description": "(Nitty-gritty) Spacing from the target to the tooltip, when `where` is `mousemove` or `mousefix`"
								},
								{
									"kind": "param",
									"name": "options.top",
									"isOptional": true,
									"defaultValue": "10",
									"isFirstLevel": false,
									"description": "(Nitty-gritty) Spacing from the target to the tooltip, when `where` is `mousemove` or `mousefix`"
								},
								{
									"kind": "param",
									"name": "options.spacing",
									"isOptional": true,
									"defaultValue": "8",
									"isFirstLevel": false,
									"description": "(Nitty-gritty) Spacing between the tooltip and the target element, when `where` is `up`, `down`, `left`, or `right`"
								}
							],
							"examples": [
								"\n    <ul class=\"buttons\">\n        <li class=\"button\" data-tip-text=\"Create a new document\">New</li>\n        <li class=\"button\" data-tip-text=\"Exit the program\">Quit</li>\n        <li class=\"button\" data-tip-text=\"Save the document you are working on\">Save</li>\n    </ul>\n    \n    [...]\n\n    <script>\n        Ink.requireModules(['Ink.UI.Tooltip_1'], function (Tooltip) {\n            new Tooltip('.button', {where: 'mousefix'});\n        });\n    </script>\n"
							]
						},
						{
							"kind": "function",
							"name": "destroy",
							"file": "src/js/Ink/UI/Tooltip/1/lib.js",
							"text": "Destroys the tooltips created by this instance",
							"params": []
						},
						{
							"kind": "function",
							"name": "_getWhereValueInsideViewport",
							"file": "src/js/Ink/UI/Tooltip/1/lib.js",
							"text": "Get a value for \"where\" (left/right/up/down) which doesn't put the\ntooltip off the screen",
							"params": [
								{
									"kind": "param",
									"name": "where",
									"isFirstLevel": true,
									"description": "{String} \"where\" value which was given by the user and we might change"
								},
								{
									"kind": "param",
									"name": "bbox",
									"isFirstLevel": true,
									"description": "{BoundingBox} A bounding box like what you get from getBoundingClientRect ({top, bottom, left, right}) with pixel positions from the top left corner of the viewport."
								},
								{
									"kind": "param",
									"name": "viewport",
									"isFirstLevel": true,
									"description": "{BoundingBox} Bounding box for the viewport. \"top\" and \"left\" are omitted because these coordinates are relative to the top-left corner of the viewport so they are zero."
								}
							]
						}
					],
					"attributes": []
				}
			],
			"functions": [],
			"attributes": [],
			"uses": [],
			"author": "inkdev AT sapo.pt"
		},
		{
			"kind": "module",
			"name": "Ink.UI.TreeView_1",
			"file": "src/js/Ink/UI/TreeView/1/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink.UI.TreeView",
					"text": "Shows elements in a tree structure which can be expanded and contracted.\n\nA TreeView is built with \"node\"s and \"children\". \"node\"s are `li` tags, and\n\"children\" are `ul` tags.\n\nYou can build your TreeView out of a regular UL and  LI element structure which\nyou already use to display lists with several levels.\n\nIf you want a node (LI) to be open when the TreeView is built, just add the \ndata-open=\"true\" attribute to it.",
					"file": "src/js/Ink/UI/TreeView/1/lib.js",
					"functions": [
						{
							"kind": "function",
							"name": "TreeView",
							"file": "src/js/Ink/UI/TreeView/1/lib.js",
							"isConstructor": true,
							"params": [
								{
									"kind": "param",
									"name": "selector",
									"type": "String|DOMElement",
									"isFirstLevel": true
								},
								{
									"kind": "param",
									"name": "options",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Options object, containing:"
								},
								{
									"kind": "param",
									"name": "options.node",
									"type": "String",
									"isOptional": true,
									"defaultValue": "'li'",
									"isFirstLevel": false,
									"description": "Selector to define which elements are seen as nodes."
								},
								{
									"kind": "param",
									"name": "options.children",
									"type": "String",
									"isOptional": true,
									"defaultValue": "'ul'",
									"isFirstLevel": false,
									"description": "Selector to define which elements are represented as children."
								},
								{
									"kind": "param",
									"name": "options.parentClass",
									"type": "String",
									"isOptional": true,
									"defaultValue": "'parent'",
									"isFirstLevel": false,
									"description": "Classes to be added to the parent node."
								},
								{
									"kind": "param",
									"name": "options.openClass",
									"type": "String",
									"isOptional": true,
									"defaultValue": "'fa",
									"isFirstLevel": false,
									"description": "fa-minus-circle' Classes to be added to the icon when a parent is open."
								},
								{
									"kind": "param",
									"name": "options.closedClass",
									"type": "String",
									"isOptional": true,
									"defaultValue": "'fa",
									"isFirstLevel": false,
									"description": "fa-plus-circle' Classes to be added to the icon when a parent is closed."
								},
								{
									"kind": "param",
									"name": "options.hideClass",
									"type": "String",
									"isOptional": true,
									"defaultValue": "'hide-all'",
									"isFirstLevel": false,
									"description": "Class to toggle visibility of the children."
								},
								{
									"kind": "param",
									"name": "options.iconTag",
									"type": "String",
									"isOptional": true,
									"defaultValue": "'i'",
									"isFirstLevel": false,
									"description": "The name of icon tag. The component tries to find a tag with that name as a direct child of the node. If it doesn't find it, it creates it."
								},
								{
									"kind": "param",
									"name": "options.stopDefault",
									"type": "Boolean",
									"isOptional": true,
									"defaultValue": "true",
									"isFirstLevel": false,
									"description": "Stops the default behavior of the click handler."
								}
							],
							"version": "1",
							"examples": [
								"\n     <ul class=\"ink-tree-view\">\n       <li data-open=\"true\"><a href=\"#\">root</a>\n         <ul>\n           <li><a href=\"#\">child 1</a></li>\n           <li><a href=\"#\">child 2</a>\n             <ul>\n               <li><a href=\"#\">grandchild 2a</a></li>\n               <li><a href=\"#\">grandchild 2b</a>\n                 <ul>\n                   <li><a href=\"#\">grandgrandchild 1bA</a></li>\n                   <li><a href=\"#\">grandgrandchild 1bB</a></li>\n                 </ul>\n               </li>\n             </ul>\n           </li>\n           <li><a href=\"#\">child 3</a></li>\n         </ul>\n       </li>\n     </ul>\n     <script>\n         Ink.requireModules( ['Ink.Dom.Selector_1','Ink.UI.TreeView_1'], function( Selector, TreeView ){\n             var treeViewElement = Ink.s('.ink-tree-view');\n             var treeViewObj = new TreeView( treeViewElement );\n         });\n     </script>\n"
							]
						},
						{
							"kind": "function",
							"name": "_init",
							"file": "src/js/Ink/UI/TreeView/1/lib.js",
							"text": "Init function called by the constructor. Sets the necessary event handlers.",
							"params": [],
							"private": true
						},
						{
							"kind": "function",
							"name": "isOpen",
							"file": "src/js/Ink/UI/TreeView/1/lib.js",
							"text": "Check whether a node is open",
							"params": [
								{
									"kind": "param",
									"name": "node",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "The tree node to check"
								}
							]
						},
						{
							"kind": "function",
							"name": "isParent",
							"file": "src/js/Ink/UI/TreeView/1/lib.js",
							"text": "Returns whether a node is a parent in this tree.",
							"params": [
								{
									"kind": "param",
									"name": "node",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "Node to check"
								}
							]
						},
						{
							"kind": "function",
							"name": "open",
							"file": "src/js/Ink/UI/TreeView/1/lib.js",
							"text": "Open one of the tree nodes\n\nMake sure you pass the node's DOMElement",
							"params": [
								{
									"kind": "param",
									"name": "node",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "The node you wish to open."
								}
							]
						},
						{
							"kind": "function",
							"name": "close",
							"file": "src/js/Ink/UI/TreeView/1/lib.js",
							"text": "close one of the tree nodes\n\nMake sure you pass the node's DOMElement",
							"params": [
								{
									"kind": "param",
									"name": "node",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "The node you wish to close."
								}
							]
						},
						{
							"kind": "function",
							"name": "toggle",
							"file": "src/js/Ink/UI/TreeView/1/lib.js",
							"text": "Toggle a node",
							"params": [
								{
									"kind": "param",
									"name": "node",
									"type": "DOMElement",
									"isFirstLevel": true,
									"description": "The node to toggle."
								}
							]
						},
						{
							"kind": "function",
							"name": "_onClick",
							"file": "src/js/Ink/UI/TreeView/1/lib.js",
							"text": "Handles the click event (as specified in the _init function).",
							"params": [
								{
									"kind": "param",
									"name": "event",
									"type": "Event",
									"isFirstLevel": true
								}
							],
							"private": true
						}
					],
					"attributes": []
				}
			],
			"functions": [],
			"attributes": [],
			"uses": [],
			"author": "inkdev AT sapo.pt",
			"version": "1"
		},
		{
			"kind": "module",
			"name": "Ink.Util.Array_1",
			"file": "src/js/Ink/Util/Array/1/lib.js",
			"classes": [],
			"functions": [
				{
					"kind": "function",
					"name": "inArray",
					"file": "src/js/Ink/Util/Array/1/lib.js",
					"text": "Checks if a value exists in array",
					"params": [
						{
							"kind": "param",
							"name": "value",
							"type": "Mixed",
							"isFirstLevel": true,
							"description": "Value to check"
						},
						{
							"kind": "param",
							"name": "arr",
							"type": "Array",
							"isFirstLevel": true,
							"description": "Array to search in"
						}
					],
					"static": true,
					"return": {
						"kind": "return",
						"type": "Boolean",
						"description": "True if value exists in the array"
					},
					"examples": [
						"\n    Ink.requireModules(['Ink.Util.Array_1'], function( InkArray ){\n        var testArray = [ 'value1', 'value2', 'value3' ];\n        if( InkArray.inArray( 'value2', testArray ) === true ){\n            console.log( \"Yep it's in the array.\" );\n        } else {\n            console.log( \"No it's NOT in the array.\" );\n        }\n    });\n"
					]
				},
				{
					"kind": "function",
					"name": "sortMulti",
					"file": "src/js/Ink/Util/Array/1/lib.js",
					"text": "Sorts an array of objects by an object property",
					"params": [
						{
							"kind": "param",
							"name": "arr",
							"type": "Array",
							"isFirstLevel": true,
							"description": "Array of objects to sort"
						},
						{
							"kind": "param",
							"name": "key",
							"type": "String",
							"isFirstLevel": true,
							"description": "Property to sort by"
						}
					],
					"return": {
						"kind": "return",
						"type": "Array|Boolean",
						"description": "False if it's not an array, returns a sorted array if it's an array."
					},
					"static": true,
					"examples": [
						"\n    Ink.requireModules(['Ink.Util.Array_1'], function( InkArray ){\n        var testArray = [\n            { 'myKey': 'value1' },\n            { 'myKey': 'value2' },\n            { 'myKey': 'value3' }\n        ];\n\n        InkArray.sortMulti( testArray, 'myKey' );\n    });\n"
					]
				},
				{
					"kind": "function",
					"name": "keyValue",
					"file": "src/js/Ink/Util/Array/1/lib.js",
					"text": "Gets the indexes of a value in an array",
					"params": [
						{
							"kind": "param",
							"name": "value",
							"type": "String",
							"isFirstLevel": true,
							"description": "Value to search for."
						},
						{
							"kind": "param",
							"name": "arr",
							"type": "Array",
							"isFirstLevel": true,
							"description": "Array to run the search in."
						},
						{
							"kind": "param",
							"name": "first",
							"type": "Boolean",
							"isOptional": true,
							"isFirstLevel": true,
							"description": "Flag to stop the search at the first match. It also returns an index number instead of an array of indexes."
						}
					],
					"return": {
						"kind": "return",
						"type": "Boolean|Number|Array",
						"description": "False for no matches. Array of matches or first match index."
					},
					"static": true,
					"examples": [
						"\n    Ink.requireModules(['Ink.Util.Array_1'], function( InkArray ){\n        var testArray = [ 'value1', 'value2', 'value3', 'value2' ];\n        console.log( InkArray.keyValue( 'value2', testArray, true ) ); // Result: 1\n        console.log( InkArray.keyValue( 'value2', testArray ) ); // Result: [1, 3]\n    });\n"
					]
				},
				{
					"kind": "function",
					"name": "shuffle",
					"file": "src/js/Ink/Util/Array/1/lib.js",
					"text": "Shuffles an array.",
					"params": [
						{
							"kind": "param",
							"name": "arr",
							"type": "Array",
							"isFirstLevel": true,
							"description": "Array to shuffle"
						}
					],
					"return": {
						"kind": "return",
						"type": "Array|Boolean",
						"description": "Shuffled Array or false if not an array."
					},
					"static": true,
					"examples": [
						"\n    Ink.requireModules(['Ink.Util.Array_1'], function( InkArray ){\n        var testArray = [ 'value1', 'value2', 'value3', 'value2' ];\n        console.log( InkArray.shuffle( testArray ) ); // Result example: [ 'value3', 'value2', 'value2', 'value1' ]\n    });\n"
					]
				},
				{
					"kind": "function",
					"name": "forEach",
					"file": "src/js/Ink/Util/Array/1/lib.js",
					"text": "Runs a function through each of the elements of an array",
					"params": [
						{
							"kind": "param",
							"name": "arr",
							"type": "Array",
							"isFirstLevel": true,
							"description": "The array to be cycled/iterated"
						},
						{
							"kind": "param",
							"name": "cb",
							"type": "Function",
							"isFirstLevel": true,
							"description": "The function receives as arguments the value, index and array."
						}
					],
					"return": {
						"kind": "return",
						"type": "Array",
						"description": "Iterated array."
					},
					"static": true,
					"examples": [
						"\n    Ink.requireModules(['Ink.Util.Array_1'], function( InkArray ){\n        var testArray = [ 'value1', 'value2', 'value3', 'value2' ];\n        InkArray.forEach( testArray, function( value, index, arr ){\n            console.log( 'The value is: ' + value + ' | The index is: ' + index );\n        });\n    });\n"
					]
				},
				{
					"kind": "function",
					"name": "each",
					"file": "src/js/Ink/Util/Array/1/lib.js",
					"text": "Alias for backwards compatibility. See forEach",
					"params": []
				},
				{
					"kind": "function",
					"name": "map",
					"file": "src/js/Ink/Util/Array/1/lib.js",
					"text": "Runs a function for each item in the array. \nThat function will receive each item as an argument and its return value will change the corresponding array item.",
					"params": [
						{
							"kind": "param",
							"name": "array",
							"type": "Array",
							"isFirstLevel": true,
							"description": "The array to map over"
						},
						{
							"kind": "param",
							"name": "map",
							"type": "Function",
							"isFirstLevel": true,
							"description": "The map function. Will take `(item, index, array)` as arguments and `this` will be the `context` argument."
						},
						{
							"kind": "param",
							"name": "context",
							"type": "Object",
							"isOptional": true,
							"isFirstLevel": true,
							"description": "Object to be `this` in the map function."
						},
						{
							"kind": "param",
							"name": "array",
							"type": "Array",
							"isFirstLevel": true,
							"description": "The array to filter"
						},
						{
							"kind": "param",
							"name": "test",
							"type": "Function",
							"isFirstLevel": true,
							"description": "A test function taking `(item, index, array)`"
						},
						{
							"kind": "param",
							"name": "context",
							"type": "Object",
							"isOptional": true,
							"isFirstLevel": true,
							"description": "Object to be `this` in the test function."
						}
					],
					"examples": [
						"\n     InkArray.map([1, 2, 3, 4], function (item) {\n         return item + 1;\n     }); // -> [2, 3, 4, 5]\n",
						"\n     InkArray.filter([1, 2, 3, 4, 5], function (val) {\n         return val > 2;\n     })  // -> [3, 4, 5]\n"
					],
					"return": {
						"kind": "return",
						"type": "Array",
						"description": "Returns the filtered array"
					}
				},
				{
					"kind": "function",
					"name": "some",
					"file": "src/js/Ink/Util/Array/1/lib.js",
					"text": "Checks if some element in the array passes a truth test",
					"params": [
						{
							"kind": "param",
							"name": "arr",
							"type": "Array",
							"isFirstLevel": true,
							"description": "The array to iterate through"
						},
						{
							"kind": "param",
							"name": "cb",
							"type": "Function",
							"isFirstLevel": true,
							"description": "The callback to be called on the array's elements. It receives the value, the index and the array as arguments."
						},
						{
							"kind": "param",
							"name": "context",
							"type": "Object",
							"isFirstLevel": true,
							"description": "Object of the callback function"
						}
					],
					"return": {
						"kind": "return",
						"type": "Boolean",
						"description": "True if the callback returns true at any point, false otherwise"
					},
					"static": true,
					"examples": [
						"\n    Ink.requireModules(['Ink.Util.Array_1'], function( InkArray ){\n        var testArray1 = [ 10, 20, 50, 100, 30 ];\n        var testArray2 = [ 1, 2, 3, 4, 5 ];\n\n        function myTestFunction( value, index, arr ){\n            if( value > 90 ){\n                return true;\n            }\n            return false;\n        }\n        console.log( InkArray.some( testArray1, myTestFunction, null ) ); // Result: true\n        console.log( InkArray.some( testArray2, myTestFunction, null ) ); // Result: false\n    });\n"
					]
				},
				{
					"kind": "function",
					"name": "intersect",
					"file": "src/js/Ink/Util/Array/1/lib.js",
					"text": "Compares the values of two arrays and return the matches",
					"params": [
						{
							"kind": "param",
							"name": "arr1",
							"type": "Array",
							"isFirstLevel": true,
							"description": "First array"
						},
						{
							"kind": "param",
							"name": "arr2",
							"type": "Array",
							"isFirstLevel": true,
							"description": "Second array"
						}
					],
					"return": {
						"kind": "return",
						"type": "Array",
						"description": "Empty array if one of the arrays is false (or do not intersect) | Array with the intersected values"
					},
					"static": true,
					"examples": [
						"\n    Ink.requireModules(['Ink.Util.Array_1'], function( InkArray ){\n        var testArray1 = [ 'value1', 'value2', 'value3' ];\n        var testArray2 = [ 'value2', 'value3', 'value4', 'value5', 'value6' ];\n        console.log( InkArray.intersect( testArray1,testArray2 ) ); // Result: [ 'value2', 'value3' ]\n    });\n"
					]
				},
				{
					"kind": "function",
					"name": "convert",
					"file": "src/js/Ink/Util/Array/1/lib.js",
					"text": "Converts an array-like object to an array",
					"params": [
						{
							"kind": "param",
							"name": "arr",
							"type": "Array",
							"isFirstLevel": true,
							"description": "Array to be converted"
						}
					],
					"return": {
						"kind": "return",
						"type": "Array",
						"description": "Array resulting of the conversion"
					},
					"static": true,
					"examples": [
						"\n    Ink.requireModules(['Ink.Util.Array_1'], function( InkArray ){\n        var testArray = [ 'value1', 'value2' ];\n        testArray.myMethod = function(){\n            console.log('stuff');\n        }\n\n        console.log( InkArray.convert( testArray ) ); // Result: [ 'value1', 'value2' ]\n    });\n"
					]
				},
				{
					"kind": "function",
					"name": "insert",
					"file": "src/js/Ink/Util/Array/1/lib.js",
					"text": "Inserts a value on a specified index",
					"params": [
						{
							"kind": "param",
							"name": "arr",
							"type": "Array",
							"isFirstLevel": true,
							"description": "Array where the value will be inserted"
						},
						{
							"kind": "param",
							"name": "idx",
							"type": "Number",
							"isFirstLevel": true,
							"description": "Index of the array where the value should be inserted"
						},
						{
							"kind": "param",
							"name": "value",
							"type": "Mixed",
							"isFirstLevel": true,
							"description": "Value to be inserted"
						}
					],
					"static": true,
					"examples": [
						"\n    Ink.requireModules(['Ink.Util.Array_1'], function( InkArray ){\n        var testArray = [ 'value1', 'value2' ];\n        console.log( InkArray.insert( testArray, 1, 'value3' ) ); // Result: [ 'value1', 'value3', 'value2' ]\n    });\n"
					]
				},
				{
					"kind": "function",
					"name": "remove",
					"file": "src/js/Ink/Util/Array/1/lib.js",
					"text": "Removes a range of values from the array",
					"params": [
						{
							"kind": "param",
							"name": "arr",
							"type": "Array",
							"isFirstLevel": true,
							"description": "Array where the value will be removed"
						},
						{
							"kind": "param",
							"name": "from",
							"type": "Number",
							"isFirstLevel": true,
							"description": "Index of the array where the removal will start removing."
						},
						{
							"kind": "param",
							"name": "rLen",
							"type": "Number",
							"isFirstLevel": true,
							"description": "Number of items to be removed from the index onwards."
						}
					],
					"return": {
						"kind": "return",
						"type": "Array",
						"description": "An array with the remaining values"
					},
					"static": true,
					"examples": [
						"\n    Ink.requireModules(['Ink.Util.Array_1'], function( InkArray ){\n        var testArray = [ 'value1', 'value2', 'value3', 'value4', 'value5' ];\n        console.log( InkArray.remove( testArray, 1, 3 ) ); // Result: [ 'value1', 'value4', 'value5' ]\n    });\n"
					]
				}
			],
			"attributes": [],
			"uses": [],
			"version": "1"
		},
		{
			"kind": "module",
			"name": "Ink.Util.BinPack_1",
			"file": "src/js/Ink/Util/BinPack/1/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink.Util.BinPack",
					"text": "Binary Packing algorithm implementation\n\nBased on the work of Jake Gordon\n\nsee https://github.com/jakesgordon/bin-packing/",
					"file": "src/js/Ink/Util/BinPack/1/lib.js",
					"functions": [
						{
							"kind": "function",
							"name": "binPack",
							"file": "src/js/Ink/Util/BinPack/1/lib.js",
							"text": "",
							"params": [
								{
									"kind": "param",
									"name": "o",
									"type": "Object",
									"isFirstLevel": true,
									"description": "Options"
								},
								{
									"kind": "param",
									"name": "o.blocks",
									"type": "Array",
									"isFirstLevel": false,
									"description": "Array of items with width and height integer attributes."
								},
								{
									"kind": "param",
									"name": "o.dimensions",
									"type": "Array",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Flag to fix container dimensions"
								},
								{
									"kind": "param",
									"name": "o.sorter",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": false,
									"description": "Sorting function. One of: random, height, width, area, maxside"
								}
							],
							"return": {
								"kind": "return",
								"type": "Object",
								"description": "Returns an object containing container dimensions, filled ratio, fitted blocks, unfitted blocks and all blocks"
							},
							"static": true
						}
					],
					"attributes": [],
					"isNamespace": true,
					"version": "1",
					"static": true
				}
			],
			"functions": [],
			"attributes": [],
			"uses": [],
			"version": "1"
		},
		{
			"kind": "module",
			"name": "Ink.Util.Cookie_1",
			"file": "src/js/Ink/Util/Cookie/1/lib.js",
			"classes": [],
			"functions": [
				{
					"kind": "function",
					"name": "get",
					"file": "src/js/Ink/Util/Cookie/1/lib.js",
					"text": "Gets an object with the current page cookies.",
					"params": [
						{
							"kind": "param",
							"name": "name",
							"type": "String",
							"isFirstLevel": true,
							"description": "The cookie name."
						}
					],
					"return": {
						"kind": "return",
						"type": "String|Object",
						"description": "If the name is specified, it returns the value of that key. Otherwise it returns the full cookie object"
					},
					"static": true,
					"examples": [
						"\n    Ink.requireModules(['Ink.Util.Cookie_1'], function( InkCookie ){\n        var myCookieValue = InkCookie.get('someVarThere');\n        console.log( myCookieValue ); // This will output the value of the cookie 'someVarThere', from the cookie object.\n    });\n"
					]
				},
				{
					"kind": "function",
					"name": "set",
					"file": "src/js/Ink/Util/Cookie/1/lib.js",
					"text": "Sets a cookie.",
					"params": [
						{
							"kind": "param",
							"name": "name",
							"type": "String",
							"isFirstLevel": true,
							"description": "Cookie name."
						},
						{
							"kind": "param",
							"name": "value",
							"type": "String",
							"isFirstLevel": true,
							"description": "Cookie value."
						},
						{
							"kind": "param",
							"name": "expires",
							"type": "Number",
							"isOptional": true,
							"isFirstLevel": true,
							"description": "Number of seconds the cookie will be valid for."
						},
						{
							"kind": "param",
							"name": "path",
							"type": "String",
							"isOptional": true,
							"isFirstLevel": true,
							"description": "Path for the cookie. Defaults to '/'."
						},
						{
							"kind": "param",
							"name": "domain",
							"type": "String",
							"isOptional": true,
							"isFirstLevel": true,
							"description": "Domain for the cookie. Defaults to current hostname."
						},
						{
							"kind": "param",
							"name": "secure",
							"type": "Boolean",
							"isOptional": true,
							"isFirstLevel": true,
							"description": "Flag for secure. Default 'false'."
						}
					],
					"static": true,
					"examples": [
						"\n    Ink.requireModules(['Ink.Util.Cookie_1'], function( InkCookie ){\n        var expireDate = new Date( 2014,00,01, 0,0,0);\n        InkCookie.set( 'someVarThere', 'anyValueHere', expireDate.getTime() );\n    });\n"
					]
				},
				{
					"kind": "function",
					"name": "remove",
					"file": "src/js/Ink/Util/Cookie/1/lib.js",
					"text": "Deletes a cookie.",
					"params": [
						{
							"kind": "param",
							"name": "cookieName",
							"type": "String",
							"isFirstLevel": true,
							"description": "Cookie name."
						},
						{
							"kind": "param",
							"name": "path",
							"type": "String",
							"isOptional": true,
							"isFirstLevel": true,
							"description": "Path of the cookie. Defaults to '/'."
						},
						{
							"kind": "param",
							"name": "domain",
							"type": "String",
							"isOptional": true,
							"isFirstLevel": true,
							"description": "Domain of the cookie. Defaults to current hostname."
						}
					],
					"static": true,
					"examples": [
						"\n    Ink.requireModules(['Ink.Util.Cookie_1'], function( InkCookie ){\n        InkCookie.remove( 'someVarThere' );\n    });\n"
					]
				}
			],
			"attributes": [],
			"uses": [],
			"version": "1"
		},
		{
			"kind": "module",
			"name": "Ink.Util.Date_1",
			"file": "src/js/Ink/Util/Date/1/lib.js",
			"classes": [],
			"functions": [
				{
					"kind": "function",
					"name": "_months",
					"file": "src/js/Ink/Util/Date/1/lib.js",
					"text": "Function that returns the string representation of the month [PT only]",
					"params": [
						{
							"kind": "param",
							"name": "index",
							"type": "Number",
							"isFirstLevel": true,
							"description": "Month javascript (0 to 11)"
						}
					],
					"return": {
						"kind": "return",
						"type": "String",
						"description": "The month's name"
					},
					"private": true,
					"static": true,
					"examples": [
						"\n    console.log( InkDate._months(0) ); // Result: Janeiro\n"
					]
				},
				{
					"kind": "function",
					"name": "_iMonth",
					"file": "src/js/Ink/Util/Date/1/lib.js",
					"text": "Function that returns the month [PT only] ( 0 to 11 )",
					"params": [
						{
							"kind": "param",
							"name": "month",
							"type": "String",
							"isFirstLevel": true,
							"description": "Month javascript (0 to 11)"
						}
					],
					"return": {
						"kind": "return",
						"type": "Number",
						"description": "The month's number"
					},
					"private": true,
					"static": true,
					"examples": [
						"\n    console.log( InkDate._iMonth('maio') ); // Result: 4\n"
					]
				},
				{
					"kind": "function",
					"name": "_wDays",
					"file": "src/js/Ink/Util/Date/1/lib.js",
					"text": "Function that returns the representation the day of the week [PT Only]",
					"params": [
						{
							"kind": "param",
							"name": "index",
							"type": "Number",
							"isFirstLevel": true,
							"description": "Week's day index"
						}
					],
					"return": {
						"kind": "return",
						"type": "String",
						"description": "The week's day name"
					},
					"private": true,
					"static": true,
					"examples": [
						"\n    console.log( InkDate._wDays(0) ); // Result: Domingo\n"
					]
				},
				{
					"kind": "function",
					"name": "_iWeek",
					"file": "src/js/Ink/Util/Date/1/lib.js",
					"text": "Function that returns day of the week in javascript 1 to 7",
					"params": [
						{
							"kind": "param",
							"name": "week",
							"type": "String",
							"isFirstLevel": true,
							"description": "Week's day name"
						}
					],
					"return": {
						"kind": "return",
						"type": "Number",
						"description": "The week's day index"
					},
					"private": true,
					"static": true,
					"examples": [
						"\n    console.log( InkDate._iWeek('quarta') ); // Result: 3\n"
					]
				},
				{
					"kind": "function",
					"name": "_daysInMonth",
					"file": "src/js/Ink/Util/Date/1/lib.js",
					"text": "Function that returns the number of days of a given month (m) on a given year (y)",
					"params": [
						{
							"kind": "param",
							"name": "_m",
							"type": "Number",
							"isFirstLevel": true,
							"description": "Month"
						},
						{
							"kind": "param",
							"name": "_y",
							"type": "Number",
							"isFirstLevel": true,
							"description": "Year"
						}
					],
					"return": {
						"kind": "return",
						"type": "Number",
						"description": "Number of days of a give month on a given year"
					},
					"private": true,
					"static": true,
					"examples": [
						"\n    console.log( InkDate._daysInMonth(2,2013) ); // Result: 28\n"
					]
				},
				{
					"kind": "function",
					"name": "get",
					"file": "src/js/Ink/Util/Date/1/lib.js",
					"text": "Formats a date object.\nThis works exactly as php date() function. http://php.net/manual/en/function.date.php",
					"params": [
						{
							"kind": "param",
							"name": "format",
							"type": "String",
							"isFirstLevel": true,
							"description": "The format in which the date it will be formatted."
						},
						{
							"kind": "param",
							"name": "_date",
							"type": "Date",
							"isOptional": true,
							"isFirstLevel": true,
							"description": "The date to format. Can receive unix timestamp or a date object. Defaults to current time."
						}
					],
					"return": {
						"kind": "return",
						"type": "String",
						"description": "Formatted date"
					},
					"static": true,
					"examples": [
						"\n    <script>\n        Ink.requireModules( ['Ink.Util.Date_1'], function( InkDate ){\n            console.log( InkDate.get('Y-m-d') ); // Result (at the time of writing): 2013-05-07\n        });\n    </script>\n"
					]
				},
				{
					"kind": "function",
					"name": "set",
					"file": "src/js/Ink/Util/Date/1/lib.js",
					"text": "Creates a date object based on a format string.\nThis works exactly as php date() function. http://php.net/manual/en/function.date.php",
					"params": [
						{
							"kind": "param",
							"name": "format",
							"type": "String",
							"isOptional": true,
							"isFirstLevel": true,
							"description": "The format in which the date will be formatted. Defaults to 'Y-m-d'"
						},
						{
							"kind": "param",
							"name": "str_date",
							"type": "String",
							"isFirstLevel": true,
							"description": "The date formatted."
						}
					],
					"return": {
						"kind": "return",
						"type": "Date",
						"description": "Date object based on the formatted date and format"
					},
					"static": true
				}
			],
			"attributes": [],
			"uses": [],
			"version": "1"
		},
		{
			"kind": "module",
			"name": "Ink.Util.Dumper_1",
			"file": "src/js/Ink/Util/Dumper/1/lib.js",
			"classes": [],
			"functions": [
				{
					"kind": "function",
					"name": "_formatParam",
					"file": "src/js/Ink/Util/Dumper/1/lib.js",
					"text": "Function that returns the argument passed formatted",
					"params": [
						{
							"kind": "param",
							"name": "param",
							"type": "Mixed",
							"isFirstLevel": true
						}
					],
					"return": {
						"kind": "return",
						"type": "String",
						"description": "The argument passed formatted"
					},
					"private": true,
					"static": true
				},
				{
					"kind": "function",
					"name": "_getTabs",
					"file": "src/js/Ink/Util/Dumper/1/lib.js",
					"text": "Function that returns the tabs concatenated",
					"params": [
						{
							"kind": "param",
							"name": "numberOfTabs",
							"type": "Number",
							"isFirstLevel": true,
							"description": "Number of Tabs"
						}
					],
					"return": {
						"kind": "return",
						"type": "String",
						"description": "Tabs concatenated"
					},
					"private": true,
					"static": true
				},
				{
					"kind": "function",
					"name": "_outputFormat",
					"file": "src/js/Ink/Util/Dumper/1/lib.js",
					"text": "Function that formats the parameter to display.",
					"params": [
						{
							"kind": "param",
							"name": "param",
							"type": "Any",
							"isFirstLevel": true
						},
						{
							"kind": "param",
							"name": "dim",
							"type": "Number",
							"isFirstLevel": true
						}
					],
					"return": {
						"kind": "return",
						"type": "String",
						"description": "The parameter passed formatted to displat"
					},
					"private": true,
					"static": true
				},
				{
					"kind": "function",
					"name": "printDump",
					"file": "src/js/Ink/Util/Dumper/1/lib.js",
					"text": "Prints variable structure.",
					"params": [
						{
							"kind": "param",
							"name": "param",
							"type": "Any",
							"isFirstLevel": true,
							"description": "Variable to be dumped."
						},
						{
							"kind": "param",
							"name": "target",
							"type": "DOMElement|String",
							"isOptional": true,
							"isFirstLevel": true,
							"description": "Element to print the dump on."
						}
					],
					"static": true
				},
				{
					"kind": "function",
					"name": "returnDump",
					"file": "src/js/Ink/Util/Dumper/1/lib.js",
					"text": "Get a variable's structure.",
					"params": [
						{
							"kind": "param",
							"name": "param",
							"type": "Any",
							"isFirstLevel": true,
							"description": "Variable to get the structure."
						}
					],
					"return": {
						"kind": "return",
						"type": "String",
						"description": "The variable's structure."
					},
					"static": true
				},
				{
					"kind": "function",
					"name": "alertDump",
					"file": "src/js/Ink/Util/Dumper/1/lib.js",
					"text": "Alert a variable's structure.",
					"params": [
						{
							"kind": "param",
							"name": "param",
							"type": "Any",
							"isFirstLevel": true,
							"description": "Variable to be dumped."
						}
					],
					"static": true
				},
				{
					"kind": "function",
					"name": "windowDump",
					"file": "src/js/Ink/Util/Dumper/1/lib.js",
					"text": "Prints the variable structure to a new window.",
					"params": [
						{
							"kind": "param",
							"name": "param",
							"type": "Any",
							"isFirstLevel": true,
							"description": "Variable to be dumped."
						}
					],
					"static": true
				}
			],
			"attributes": [
				{
					"kind": "attribute",
					"name": "_tab",
					"text": "Hex code for the 'tab'",
					"type": "String",
					"private": true,
					"static": true
				}
			],
			"uses": [],
			"version": "1"
		},
		{
			"kind": "module",
			"name": "Ink.Util.I18n_1",
			"file": "src/js/Ink/Util/I18n/1/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink.Util.I18n",
					"text": "Creates a new I18n helper object",
					"file": "src/js/Ink/Util/I18n/1/lib.js",
					"functions": [
						{
							"kind": "function",
							"name": "I18n",
							"file": "src/js/Ink/Util/I18n/1/lib.js",
							"isConstructor": true,
							"params": [
								{
									"kind": "param",
									"name": "dict",
									"type": "Object",
									"isFirstLevel": true,
									"description": "Object mapping language codes (in the form of `pt_PT`, `pt_BR`, `fr`, `en_US`, etc.) to their Object dictionaries."
								},
								{
									"kind": "param",
									"name": "lang",
									"type": "String",
									"isOptional": true,
									"defaultValue": "'pt_PT's",
									"isFirstLevel": true,
									"description": "language code of the target language"
								}
							],
							"examples": [
								"\n     var dictionaries = {    // This could come from a JSONP request from your server\n         'pt_PT': {\n             'hello': 'olá',\n             'me': 'eu',\n             'i have a {} for you': 'tenho um {} para ti' // Old syntax using `{%s}` tokens still available\n         },\n         'pt_BR': {\n             'hello': 'oi',\n             'me': 'eu',\n             'i have a {} for you': 'tenho um {} para você'\n         }\n     };\n     Ink.requireModules(['Ink.Util.I18n_1'], function (I18n) {\n         var i18n = new I18n(dictionaries, 'pt_PT');\n         i18n.text('hello');  // returns 'olá'\n         i18n.text('i have a {} for you', 'IRON SWORD'); // returns 'tenho um IRON SWORD' para ti\n         \n         i18n.lang('pt_BR');  // Changes language. pt_BR dictionary is loaded\n         i18n.text('hello');  // returns 'oi'\n\n         i18n.lang('en_US');  // Missing language.\n         i18n.text('hello');  // returns 'hello'. If testMode is on, returns '[hello]'\n     });\n     \n ",
								"\n     // The old {%s} syntax from libsapo's i18n is still supported\n     i18n.text('hello, {%s}!', 'someone'); // -> 'olá, someone!'\n"
							]
						},
						{
							"kind": "function",
							"name": "append",
							"file": "src/js/Ink/Util/I18n/1/lib.js",
							"text": "Adds translation strings for the helper to use.",
							"params": [
								{
									"kind": "param",
									"name": "dict",
									"type": "Object",
									"isFirstLevel": true,
									"description": "Object containing language objects identified by their language code"
								}
							],
							"examples": [
								" \n    var i18n = new I18n({}, 'pt_PT');\n    i18n.append({'pt_PT': {\n        'sfraggles': 'braggles'\n    }});\n    i18n.text('sfraggles') // -> 'braggles'\n"
							]
						},
						{
							"kind": "function",
							"name": "lang",
							"file": "src/js/Ink/Util/I18n/1/lib.js",
							"text": "Gets or sets the language.\nIf there are more dictionaries available in cache, they will be loaded.",
							"params": [
								{
									"kind": "param",
									"name": "lang",
									"type": "String",
									"isFirstLevel": true,
									"description": "Language code to set this instance to."
								}
							]
						},
						{
							"kind": "function",
							"name": "testMode",
							"file": "src/js/Ink/Util/I18n/1/lib.js",
							"text": "Sets or unsets test mode.\nIn test mode, unknown strings are wrapped in `[ ... ]`. This is useful for debugging your application and to make sure all your translation keys are in place.",
							"params": [
								{
									"kind": "param",
									"name": "bool",
									"type": "Boolean",
									"isFirstLevel": true,
									"description": "Flag to set the test mode state"
								}
							]
						},
						{
							"kind": "function",
							"name": "getKey",
							"file": "src/js/Ink/Util/I18n/1/lib.js",
							"text": "Gest a key from the current dictionary",
							"params": [
								{
									"kind": "param",
									"name": "key",
									"type": "String",
									"isFirstLevel": true
								}
							],
							"return": {
								"kind": "return",
								"type": "Any",
								"description": "The object which happened to be in the current language dictionary on the given key."
							},
							"examples": [
								"\n     _.getKey('astring'); // -> 'a translated string'\n     _.getKey('anobject'); // -> {'a': 'translated object'}\n     _.getKey('afunction'); // -> function () { return 'this is a localized function' }\n"
							]
						},
						{
							"kind": "function",
							"name": "text",
							"file": "src/js/Ink/Util/I18n/1/lib.js",
							"text": "Translates a string.\nGiven a translation key, return a translated string, with replaced parameters.\nWhen a translated string is not available, the original string is returned unchanged.",
							"params": [
								{
									"kind": "param",
									"name": "str",
									"type": "String",
									"isFirstLevel": true,
									"description": "Key to look for in i18n dictionary (which is returned verbatim if unknown)"
								},
								{
									"kind": "param",
									"name": "namedParms",
									"type": "Object",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Named replacements. Replaces {named} with values in this object."
								},
								{
									"kind": "param",
									"name": "args",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Replacement #1 (replaces first {} and all {1})"
								},
								{
									"kind": "param",
									"name": "arg2",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Replacement #2 (replaces second {} and all {2})"
								},
								{
									"kind": "param",
									"name": "argn*",
									"type": "String",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Replacement #n (replaces nth {} and all {n})"
								}
							],
							"examples": [
								"\n     _('Gosto muito de {} e o céu é {}.', 'carros', 'azul');\n     // returns 'Gosto muito de carros e o céu é azul.'\n\n",
								"\n     _('O {1} é {2} como {2} é a cor do {3}.', 'carro', 'azul', 'FCP');\n     // returns 'O carro é azul como azul é o FCP.'\n\n ",
								"\n     _('O {person1} dava-se com a {person2}', {person1: 'coisinho', person2: 'coisinha'});\n     // -> 'O coisinho dava-se com a coisinha'\n\n ",
								"\n     // This is a bit more complex\n     var i18n = make().lang('pt_PT').append({\n         pt_PT: {\n             array: [1, 2],\n             object: {'a': '-a-', 'b': '-b-'},\n             func: function (a, b) {return '[[' + a + ',' + b + ']]';}\n         }\n     });\n     i18n.text('array', 0); // -> '1'\n     i18n.text('object', 'a'); // -> '-a-'\n     i18n.text('func', 'a', 'b'); // -> '[[a,b]]'\n"
							]
						},
						{
							"kind": "function",
							"name": "ntext",
							"file": "src/js/Ink/Util/I18n/1/lib.js",
							"text": "Translates and pluralizes text.\nGiven a singular string, a plural string and a number, translates either the singular or plural string.",
							"params": [
								{
									"kind": "param",
									"name": "strSin",
									"type": "String",
									"isFirstLevel": true,
									"description": "Word to use when count is 1"
								},
								{
									"kind": "param",
									"name": "strPlur",
									"type": "String",
									"isFirstLevel": true,
									"description": "Word to use otherwise"
								},
								{
									"kind": "param",
									"name": "count",
									"type": "Number",
									"isFirstLevel": true,
									"description": "Number which defines which word to use"
								},
								{
									"kind": "param",
									"name": "args*",
									"isOptional": true,
									"isFirstLevel": true,
									"description": "Extra arguments, to be passed to `text()`"
								}
							],
							"return": {
								"kind": "return",
								"type": "String"
							},
							"examples": [
								"\n    i18n.ntext('platypus', 'platypuses', 1); // returns 'ornitorrinco'\n    i18n.ntext('platypus', 'platypuses', 2); // returns 'ornitorrincos'\n\n",
								"\n    // The \"count\" argument is passed to text()\n    i18n.ntext('{} platypus', '{} platypuses', 1); // returns '1 ornitorrinco'\n    i18n.ntext('{} platypus', '{} platypuses', 2); // returns '2 ornitorrincos'\n"
							]
						},
						{
							"kind": "function",
							"name": "ordinal",
							"file": "src/js/Ink/Util/I18n/1/lib.js",
							"text": "Gets the ordinal suffix of a number.\n\nThis works by using transforms (in the form of Objects or Functions) passed into the function or found in the special key `_ordinals` in the active language dictionary.",
							"params": [
								{
									"kind": "param",
									"name": "num",
									"type": "Number",
									"isFirstLevel": true,
									"description": "Input number"
								},
								{
									"kind": "param",
									"name": "options",
									"type": "Object|Function",
									"isOptional": true,
									"defaultValue": "{}",
									"isFirstLevel": true,
									"description": "Maps for translating. Each of these options' fallback is found in the current language's dictionary. The lookup order is the following: `exceptions`, `byLastDigit`, `default`. Each of these may be either an `Object` or a `Function`. If it's a function, it is called (with `number` and `digit` for any function except for byLastDigit, which is called with the `lastDigit` of the number in question), and if the function returns a string, that is used. If it's an object, the property is looked up using `[...]`. If what is found is a string, it is used."
								},
								{
									"kind": "param",
									"name": "options.byLastDigit",
									"type": "Object|Function",
									"isOptional": true,
									"defaultValue": "{}",
									"isFirstLevel": false,
									"description": "If the language requires the last digit to be considered, mappings of last digits to ordinal suffixes can be created here."
								},
								{
									"kind": "param",
									"name": "options.exceptions",
									"type": "Object|Function",
									"isOptional": true,
									"defaultValue": "{}",
									"isFirstLevel": false,
									"description": "Map unique, special cases to their ordinal suffixes."
								}
							],
							"return": {
								"kind": "return",
								"type": "String",
								"description": "Ordinal suffix for `num`."
							},
							"examples": [
								"\n    var i18n = new I18n({\n        pt_PT: {  // 1º, 2º, 3º, 4º, ...\n            _ordinal: {  // The _ordinals key each translation dictionary is special.\n                'default': \"º\" // Usually the suffix is \"º\" in portuguese...\n            }\n        },\n        fr: {  // 1er, 2e, 3e, 4e, ...\n            _ordinal: {  // The _ordinals key is special.\n                'default': \"e\", // Usually the suffix is \"e\" in french...\n                exceptions: {\n                    1: \"er\"   // ... Except for the number one.\n                }\n            }\n        },\n        en_US: {  // 1st, 2nd, 3rd, 4th, ..., 11th, 12th, ... 21st, 22nd...\n            _ordinal: {\n                'default': \"th\",// Usually the digit is \"th\" in english...\n                byLastDigit: {\n                    1: \"st\",  // When the last digit is 1, use \"th\"...\n                    2: \"nd\",  // When the last digit is 2, use \"nd\"...\n                    3: \"rd\"   // When the last digit is 3, use \"rd\"...\n                },\n                exceptions: { // But these numbers are special\n                    0: \"\",\n                    11: \"th\",\n                    12: \"th\",\n                    13: \"th\"\n                }\n            }\n        }\n    }, 'pt_PT');\n\n    i18n.ordinal(1);    // returns 'º'\n    i18n.ordinal(2);    // returns 'º'\n    i18n.ordinal(11);   // returns 'º'\n\n    i18n.lang('fr');\n    i18n.ordinal(1);    // returns 'er'\n    i18n.ordinal(2);    // returns 'e'\n    i18n.ordinal(11);   // returns 'e'\n\n    i18n.lang('en_US');\n    i18n.ordinal(1);    // returns 'st'\n    i18n.ordinal(2);    // returns 'nd'\n    i18n.ordinal(12);   // returns 'th'\n    i18n.ordinal(22);   // returns 'nd'\n    i18n.ordinal(3);    // returns 'rd'\n    i18n.ordinal(4);    // returns 'th'\n    i18n.ordinal(5);    // returns 'th'\n\n"
							]
						},
						{
							"kind": "function",
							"name": "alias",
							"file": "src/js/Ink/Util/I18n/1/lib.js",
							"text": "Alias for the text method.\nReturns an alias to `text()`, for convenience. The resulting function is traditionally assigned to \"_\".",
							"params": [],
							"return": {
								"kind": "return",
								"type": "Function",
								"description": "an alias to `text()`. You can also access the rest of the translation API through this alias."
							},
							"examples": [
								"\n    var i18n = new I18n({\n        'pt_PT': {\n            'hi': 'olá',\n            '{} day': '{} dia',\n            '{} days': '{} dias',\n            '_ordinals': {\n                'default': 'º'\n            }\n        }\n    }, 'pt_PT');\n    var _ = i18n.alias();\n    _('hi');  // -> 'olá'\n    _('{} days', 3);  // -> '3 dias'\n    _.ntext('{} day', '{} days', 2);  // -> '2 dias'\n    _.ntext('{} day', '{} days', 1);  // -> '1 dia'\n    _.ordinal(3);  // -> 'º'\n"
							]
						},
						{
							"kind": "function",
							"name": "reset",
							"file": "src/js/Ink/Util/I18n/1/lib.js",
							"text": "Resets I18n global state (global dictionaries, and default language for instances)",
							"params": [],
							"static": true
						},
						{
							"kind": "function",
							"name": "append",
							"file": "src/js/Ink/Util/I18n/1/lib.js",
							"text": "Adds a dictionary to be used in all I18n instances for the corresponding language.",
							"params": [
								{
									"kind": "param",
									"name": "dict",
									"isFirstLevel": true,
									"description": "{Object}     Dictionary to be added"
								},
								{
									"kind": "param",
									"name": "lang",
									"isFirstLevel": true,
									"description": "{String}     Language fo the dictionary being added"
								}
							],
							"static": true
						},
						{
							"kind": "function",
							"name": "lang",
							"file": "src/js/Ink/Util/I18n/1/lib.js",
							"text": "Gets or sets the current default language of I18n instances.",
							"params": [],
							"static": true,
							"return": {
								"kind": "return",
								"type": "String",
								"description": "language code"
							}
						}
					],
					"attributes": []
				}
			],
			"functions": [],
			"attributes": [],
			"uses": [],
			"version": "1"
		},
		{
			"kind": "module",
			"name": "Ink.Util.Json_1",
			"file": "src/js/Ink/Util/Json/1/lib.js",
			"classes": [
				{
					"kind": "class",
					"name": "Ink.Util.Json",
					"text": "Use this class to convert JSON strings to JavaScript objects\n`(Json.parse)` and also to do the opposite operation `(Json.stringify)`.\nInternally, the standard JSON implementation is used if available\nOtherwise, the functions mimic the standard implementation.\n\nHere's how to produce JSON from an existing object:\n\n     Ink.requireModules(['Ink.Util.Json_1'], function (Json) {\n         var obj = {\n             key1: 'value1',\n             key2: 'value2',\n             keyArray: ['arrayValue1', 'arrayValue2', 'arrayValue3']\n         };\n         Json.stringify(obj);  // The above object as a JSON string\n     });\n\nAnd here is how to parse JSON:\n\n     Ink.requireModules(['Ink.Util.Json_1'], function (Json) {\n         var source = '{\"key\": \"value\", \"array\": [true, null, false]}';\n         Json.parse(source);  // The above JSON string as an object\n     });",
					"file": "src/js/Ink/Util/Json/1/lib.js",
					"functions": [
						{
							"kind": "function",
							"name": "stringify",
							"file": "src/js/Ink/Util/Json/1/lib.js",
							"text": "Serializes a JSON object into a string.",
							"params": [
								{
									"kind": "param",
									"name": "input",
									"type": "Object",
									"isFirstLevel": true,
									"description": "Data to be serialized into JSON"
								},
								{
									"kind": "param",
									"name": "convertToUnicode",
									"type": "Boolean",
									"isFirstLevel": true,
									"description": "When `true`, converts string contents to unicode \\uXXXX"
								}
							],
							"return": {
								"kind": "return",
								"type": "String",
								"description": "Serialized string"
							},
							"examples": [
								"\n     Json.stringify({a:1.23}); // -> string: '{\"a\": 1.23}'\n"
							]
						},
						{
							"kind": "function",
							"name": "parse",
							"file": "src/js/Ink/Util/Json/1/lib.js",
							"text": "Parses a JSON text through a function",
							"params": [
								{
									"kind": "param",
									"name": "text",
									"isFirstLevel": true,
									"description": "{String}    Input string"
								},
								{
									"kind": "param",
									"name": "reviver",
									"isFirstLevel": true,
									"description": "{Function}  Function receiving `(key, value)`, and `this`=(containing object), used to walk objects."
								}
							],
							"return": {
								"kind": "return",
								"type": "Object",
								"description": "JSON object"
							},
							"examples": [
								"\nSimple example:\n\n     Json.parse('{\"a\": \"3\",\"numbers\":false}',\n         function (key, value) {\n             if (!this.numbers && key === 'a') {\n                 return \"NO NUMBERS\";\n             } else {\n                 return value;\n             }\n         }); // -> object: {a: 'NO NUMBERS', numbers: false}\n"
							]
						}
					],
					"attributes": [],
					"isNamespace": true,
					"static": true
				}
			],
			"functions": [],
			"attributes": [],
			"uses": [],
			"version": "1"
		},
		{
			"kind": "module",
			"name": "Ink.Util.String_1",
			"file": "src/js/Ink/Util/String/1/lib.js",
			"classes": [],
			"functions": [
				{
					"kind": "function",
					"name": "ucFirst",
					"file": "src/js/Ink/Util/String/1/lib.js",
					"text": "Capitalizes a word.\nIf param as more than one word, it converts first letter of all words that have more than 2 letters",
					"params": [
						{
							"kind": "param",
							"name": "string",
							"type": "String",
							"isFirstLevel": true,
							"description": "String to capitalize."
						},
						{
							"kind": "param",
							"name": "firstWordOnly",
							"type": "Boolean",
							"isOptional": true,
							"defaultValue": "false",
							"isFirstLevel": true,
							"description": "Flag to capitalize only the first word."
						}
					],
					"return": {
						"kind": "return",
						"type": "String",
						"description": "Camel cased string."
					},
					"static": true,
					"examples": [
						"\n     InkString.ucFirst('hello world'); // -> 'Hello World'\n     InkString.ucFirst('hello world', true); // -> 'Hello world'\n"
					]
				},
				{
					"kind": "function",
					"name": "trim",
					"file": "src/js/Ink/Util/String/1/lib.js",
					"text": "Trims whitespace from strings",
					"params": [
						{
							"kind": "param",
							"name": "string",
							"type": "String",
							"isFirstLevel": true,
							"description": "String to be trimmed"
						}
					],
					"return": {
						"kind": "return",
						"type": "String",
						"description": "Trimmed string"
					},
					"static": true
				},
				{
					"kind": "function",
					"name": "stripTags",
					"file": "src/js/Ink/Util/String/1/lib.js",
					"text": "Strips HTML tags from strings",
					"params": [
						{
							"kind": "param",
							"name": "string",
							"type": "String",
							"isFirstLevel": true,
							"description": "String to strip tags from."
						},
						{
							"kind": "param",
							"name": "allowed",
							"type": "String",
							"isFirstLevel": true,
							"description": "Comma separated list of allowed tags."
						}
					],
					"return": {
						"kind": "return",
						"type": "String",
						"description": "Stripped string"
					},
					"static": true,
					"examples": [
						"\n    <script>\n         var myvar='isto e um texto <b>bold</b> com imagem <img src=\"\"> e br <br /> um <p>paragrafo</p>';\n         SAPO.Utility.String.stripTags(myvar, 'b,u');\n    </script>\n"
					]
				},
				{
					"kind": "function",
					"name": "htmlEntitiesEncode",
					"file": "src/js/Ink/Util/String/1/lib.js",
					"text": "Encodes string into HTML entities.",
					"params": [
						{
							"kind": "param",
							"name": "string",
							"type": "String",
							"isFirstLevel": true
						}
					],
					"return": {
						"kind": "return",
						"type": "String",
						"description": "string encoded"
					},
					"static": true
				},
				{
					"kind": "function",
					"name": "htmlEntitiesDecode",
					"file": "src/js/Ink/Util/String/1/lib.js",
					"text": "Decodes string from HTML entities.",
					"params": [
						{
							"kind": "param",
							"name": "string",
							"type": "String",
							"isFirstLevel": true,
							"description": "String to be decoded"
						}
					],
					"return": {
						"kind": "return",
						"type": "String",
						"description": "Decoded string"
					},
					"static": true
				},
				{
					"kind": "function",
					"name": "utf8Encode",
					"file": "src/js/Ink/Util/String/1/lib.js",
					"text": "Encode a string to UTF-8.",
					"params": [
						{
							"kind": "param",
							"name": "string",
							"type": "String",
							"isFirstLevel": true,
							"description": "String to be encoded"
						}
					],
					"return": {
						"kind": "return",
						"type": "String",
						"description": "string      UTF-8 encoded string"
					},
					"static": true
				},
				{
					"kind": "function",
					"name": "shortString",
					"file": "src/js/Ink/Util/String/1/lib.js",
					"text": "Truncates a string without breaking words.",
					"params": [
						{
							"kind": "param",
							"name": "str",
							"type": "String",
							"isFirstLevel": true,
							"description": "String to truncate"
						},
						{
							"kind": "param",
							"name": "n",
							"type": "Number",
							"isFirstLevel": true,
							"description": "Number of chars of the short string"
						}
					],
					"return": {
						"kind": "return",
						"type": "String"
					},
					"static": true
				},
				{
					"kind": "function",
					"name": "truncateString",
					"file": "src/js/Ink/Util/String/1/lib.js",
					"text": "Truncates a string, breaking words and adding ... at the end.",
					"params": [
						{
							"kind": "param",
							"name": "str",
							"type": "String",
							"isFirstLevel": true,
							"description": "String to truncate"
						},
						{
							"kind": "param",
							"name": "length",
							"type": "Number",
							"isFirstLevel": true,
							"description": "Limit for the returned string, ellipsis included."
						}
					],
					"return": {
						"kind": "return",
						"type": "String",
						"description": "Truncated String"
					},
					"static": true
				},
				{
					"kind": "function",
					"name": "utf8Decode",
					"file": "src/js/Ink/Util/String/1/lib.js",
					"text": "Decodes a string from UTF-8.",
					"params": [
						{
							"kind": "param",
							"name": "string",
							"type": "String",
							"isFirstLevel": true,
							"description": "String to be decoded"
						}
					],
					"return": {
						"kind": "return",
						"type": "String",
						"description": "Decoded string"
					},
					"static": true
				},
				{
					"kind": "function",
					"name": "removeAccentedChars",
					"file": "src/js/Ink/Util/String/1/lib.js",
					"text": "Removes all accented characters from a string.",
					"params": [
						{
							"kind": "param",
							"name": "string",
							"type": "String",
							"isFirstLevel": true,
							"description": "String to remove accents from"
						}
					],
					"return": {
						"kind": "return",
						"type": "String",
						"description": "String without accented chars"
					},
					"static": true
				},
				{
					"kind": "function",
					"name": "substrCount",
					"file": "src/js/Ink/Util/String/1/lib.js",
					"text": "Count the number of occurrences of a specific needle in a haystack",
					"params": [
						{
							"kind": "param",
							"name": "haystack",
							"type": "String",
							"isFirstLevel": true,
							"description": "String to search in"
						},
						{
							"kind": "param",
							"name": "needle",
							"type": "String",
							"isFirstLevel": true,
							"description": "String to search for"
						}
					],
					"return": {
						"kind": "return",
						"type": "Number",
						"description": "Number of occurrences"
					},
					"static": true
				},
				{
					"kind": "function",
					"name": "evalJSON",
					"file": "src/js/Ink/Util/String/1/lib.js",
					"text": "Eval a JSON string to a JS object",
					"params": [
						{
							"kind": "param",
							"name": "strJSON",
							"type": "String",
							"isFirstLevel": true,
							"description": "JSON string to eval"
						},
						{
							"kind": "param",
							"name": "sanitize",
							"type": "Boolean",
							"isFirstLevel": true,
							"description": "Flag to sanitize input"
						}
					],
					"return": {
						"kind": "return",
						"type": "Object",
						"description": "JS Object"
					},
					"static": true
				},
				{
					"kind": "function",
					"name": "isJSON",
					"file": "src/js/Ink/Util/String/1/lib.js",
					"text": "Checks if a string is a valid JSON object (string encoded)",
					"params": [
						{
							"kind": "param",
							"name": "str",
							"type": "String",
							"isFirstLevel": true,
							"description": "String to check"
						}
					],
					"return": {
						"kind": "return",
						"type": "Boolean"
					},
					"static": true
				},
				{
					"kind": "function",
					"name": "htmlEscapeUnsafe",
					"file": "src/js/Ink/Util/String/1/lib.js",
					"text": "Escapes unsafe html chars as HTML entities",
					"params": [
						{
							"kind": "param",
							"name": "str",
							"type": "String",
							"isFirstLevel": true,
							"description": "String to escape"
						}
					],
					"return": {
						"kind": "return",
						"type": "String",
						"description": "Escaped string"
					},
					"static": true
				},
				{
					"kind": "function",
					"name": "normalizeWhitespace",
					"file": "src/js/Ink/Util/String/1/lib.js",
					"text": "Normalizes whitespace in string.\nString is trimmed and sequences of whitespaces are collapsed.",
					"params": [
						{
							"kind": "param",
							"name": "str",
							"type": "String",
							"isFirstLevel": true,
							"description": "String to normalize"
						}
					],
					"return": {
						"kind": "return",
						"type": "String",
						"description": "Normalized string"
					},
					"static": true
				},
				{
					"kind": "function",
					"name": "toUnicode",
					"file": "src/js/Ink/Util/String/1/lib.js",
					"text": "Converts string to unicode.",
					"params": [
						{
							"kind": "param",
							"name": "str",
							"type": "String",
							"isFirstLevel": true,
							"description": "String to convert"
						}
					],
					"return": {
						"kind": "return",
						"type": "String",
						"description": "Unicoded String"
					},
					"static": true
				},
				{
					"kind": "function",
					"name": "escape",
					"file": "src/js/Ink/Util/String/1/lib.js",
					"text": "Escapes a unicode character.",
					"params": [
						{
							"kind": "param",
							"name": "c",
							"type": "String",
							"isFirstLevel": true,
							"description": "Character to escape"
						},
						{
							"kind": "param",
							"name": "c",
							"type": "String",
							"isFirstLevel": true,
							"description": "char"
						}
					],
					"return": {
						"kind": "return",
						"type": "String",
						"description": "Escaped character. Returns \\xXX if hex smaller than 0x100, otherwise \\uXXXX"
					},
					"static": true
				},
				{
					"kind": "function",
					"name": "unescape",
					"file": "src/js/Ink/Util/String/1/lib.js",
					"text": "Unescapes a unicode character escape sequence",
					"params": [
						{
							"kind": "param",
							"name": "es",
							"type": "String",
							"isFirstLevel": true,
							"description": "Escape sequence"
						}
					],
					"return": {
						"kind": "return",
						"type": "String",
						"description": "String un-unicoded"
					},
					"static": true
				},
				{
					"kind": "function",
					"name": "escapeText",
					"file": "src/js/Ink/Util/String/1/lib.js",
					"text": "Escapes a string to unicode characters",
					"params": [
						{
							"kind": "param",
							"name": "txt",
							"type": "String",
							"isFirstLevel": true
						},
						{
							"kind": "param",
							"name": "whiteList",
							"type": "Array",
							"isOptional": true,
							"isFirstLevel": true,
							"description": "Whitelist of characters"
						}
					],
					"return": {
						"kind": "return",
						"type": "String",
						"description": "String escaped to Unicode"
					},
					"static": true
				},
				{
					"kind": "function",
					"name": "unescapeText",
					"file": "src/js/Ink/Util/String/1/lib.js",
					"text": "Unescapes a string",
					"params": [
						{
							"kind": "param",
							"name": "txt",
							"type": "String",
							"isFirstLevel": true
						}
					],
					"return": {
						"kind": "return",
						"type": "String",
						"description": "Unescaped string"
					},
					"static": true
				},
				{
					"kind": "function",
					"name": "strcmp",
					"file": "src/js/Ink/Util/String/1/lib.js",
					"text": "Compares two strings.",
					"params": [
						{
							"kind": "param",
							"name": "str1",
							"type": "String",
							"isFirstLevel": true,
							"description": "First String"
						},
						{
							"kind": "param",
							"name": "str2",
							"type": "String",
							"isFirstLevel": true,
							"description": "Second String"
						}
					],
					"return": {
						"kind": "return",
						"type": "Number"
					},
					"static": true
				},
				{
					"kind": "function",
					"name": "packetize",
					"file": "src/js/Ink/Util/String/1/lib.js",
					"text": "Splits a string into smaller chunks",
					"params": [
						{
							"kind": "param",
							"name": "str",
							"type": "String",
							"isFirstLevel": true,
							"description": "String to divide"
						},
						{
							"kind": "param",
							"name": "maxLen",
							"type": "Number",
							"isFirstLevel": true,
							"description": "Maximum chunk size (in characters)"
						}
					],
					"return": {
						"kind": "return",
						"type": "Array",
						"description": "Chunks of the original string"
					},
					"static": true
				}
			],
			"attributes": [
				{
					"kind": "attribute",
					"name": "_chars",
					"text": "List of special chars",
					"type": "Array",
					"private": true,
					"static": true
				},
				{
					"kind": "attribute",
					"name": "_entities",
					"text": "List of the special characters' html entities",
					"type": "Array",
					"private": true,
					"static": true
				},
				{
					"kind": "attribute",
					"name": "_accentedChars",
					"text": "List of accented chars",
					"type": "Array",
					"private": true,
					"static": true
				},
				{
					"kind": "attribute",
					"name": "_accentedRemovedChars",
					"text": "List of the accented chars (above), but without the accents",
					"type": "Array",
					"private": true,
					"static": true
				},
				{
					"kind": "attribute",
					"name": "_htmlUnsafeChars",
					"text": "Object that contains the basic HTML unsafe chars, as keys, and their HTML entities as values",
					"type": "Object",
					"private": true,
					"static": true
				},
				{
					"kind": "attribute",
					"name": "escapedCharRegex",
					"text": "Regex to check escaped strings",
					"type": "Regex",
					"static": true
				}
			],
			"uses": [],
			"version": "1"
		},
		{
			"kind": "module",
			"name": "Ink.Util.Url_1",
			"file": "src/js/Ink/Util/Url/1/lib.js",
			"classes": [],
			"functions": [
				{
					"kind": "function",
					"name": "getUrl",
					"file": "src/js/Ink/Util/Url/1/lib.js",
					"text": "Gets URL of current page",
					"params": [],
					"return": {
						"kind": "return",
						"type": "String",
						"description": "Current URL"
					},
					"static": true,
					"examples": [
						"\n    Ink.requireModules(['Ink.Util.Url_1'], function( InkUrl ){\n        console.log( InkUrl.getUrl() ); // Will return it's window URL\n    });\n"
					]
				},
				{
					"kind": "function",
					"name": "genQueryString",
					"file": "src/js/Ink/Util/Url/1/lib.js",
					"text": "Generates an URL string.",
					"params": [
						{
							"kind": "param",
							"name": "uri",
							"type": "String",
							"isFirstLevel": true,
							"description": "Base URL"
						},
						{
							"kind": "param",
							"name": "params",
							"type": "Object",
							"isFirstLevel": true,
							"description": "Object to transform to query string"
						}
					],
					"return": {
						"kind": "return",
						"type": "String",
						"description": "URI with query string set"
					},
					"static": true,
					"examples": [
						"\n    Ink.requireModules(['Ink.Util.Url_1'], function( InkUrl ){\n        var queryString = InkUrl.genQueryString( 'http://www.sapo.pt/', {\n            'param1': 'valueParam1',\n            'param2': 'valueParam2'\n        });\n\n        console.log( queryString ); // Result: http://www.sapo.pt/?param1=valueParam1&param2=valueParam2\n    });\n"
					]
				},
				{
					"kind": "function",
					"name": "getQueryString",
					"file": "src/js/Ink/Util/Url/1/lib.js",
					"text": "Gets an object from an URL encoded string.",
					"params": [
						{
							"kind": "param",
							"name": "str",
							"type": "String",
							"isOptional": true,
							"isFirstLevel": true,
							"description": "URL String. When not specified it uses the current URL."
						}
					],
					"return": {
						"kind": "return",
						"type": "Object",
						"description": "Key-Value pair object"
					},
					"static": true,
					"examples": [
						"\n    Ink.requireModules(['Ink.Util.Url_1'], function( InkUrl ){\n        var queryStringParams = InkUrl.getQueryString( 'http://www.sapo.pt/?var1=valueVar1&var2=valueVar2' );\n        console.log( queryStringParams );\n        // Result:\n        // {\n        //    var1: 'valueVar1',\n        //    var2: 'valueVar2'\n        // }\n    });\n"
					]
				},
				{
					"kind": "function",
					"name": "getAnchor",
					"file": "src/js/Ink/Util/Url/1/lib.js",
					"text": "Gets the URL hash value",
					"params": [
						{
							"kind": "param",
							"name": "str",
							"type": "String",
							"isOptional": true,
							"isFirstLevel": true,
							"description": "URL String. Defaults to current page URL."
						}
					],
					"return": {
						"kind": "return",
						"type": "String|Boolean",
						"description": "Hash in the URL. If there's no hash, returns false."
					},
					"static": true,
					"examples": [
						"\n    Ink.requireModules(['Ink.Util.Url_1'], function( InkUrl ){\n        var anchor = InkUrl.getAnchor( 'http://www.sapo.pt/page.php#TEST' );\n        console.log( anchor ); // Result: TEST\n    });\n"
					]
				},
				{
					"kind": "function",
					"name": "getAnchorString",
					"file": "src/js/Ink/Util/Url/1/lib.js",
					"text": "Gets the anchor string of an URL",
					"params": [
						{
							"kind": "param",
							"name": "string",
							"type": "String",
							"isOptional": true,
							"isFirstLevel": true,
							"description": "URL to parse. Defaults to current URL."
						}
					],
					"return": {
						"kind": "return",
						"type": "Object",
						"description": "Key-value pair object of the URL's hashtag 'variables'"
					},
					"static": true,
					"examples": [
						"\n    Ink.requireModules(['Ink.Util.Url_1'], function( InkUrl ){\n        var hashParams = InkUrl.getAnchorString( 'http://www.sapo.pt/#var1=valueVar1&var2=valueVar2' );\n        console.log( hashParams );\n        // Result:\n        // {\n        //    var1: 'valueVar1',\n        //    var2: 'valueVar2'\n        // }\n    });\n"
					]
				},
				{
					"kind": "function",
					"name": "parseUrl",
					"file": "src/js/Ink/Util/Url/1/lib.js",
					"text": "Parses URL string into URL parts",
					"params": [
						{
							"kind": "param",
							"name": "url",
							"type": "String",
							"isFirstLevel": true,
							"description": "URL to be parsed"
						}
					],
					"return": {
						"kind": "return",
						"type": "Object",
						"description": "Parsed URL as a key-value object."
					},
					"static": true,
					"examples": [
						"\n    Ink.requireModules(['Ink.Util.Url_1'], function( InkUrl ){\n        var parsedURL = InkUrl.parseUrl( 'http://www.sapo.pt/index.html?var1=value1#anchor' )\n        console.log( parsedURL );\n        // Result:\n        // {\n        //   'scheme'    => 'http',\n        //   'host'      => 'www.sapo.pt',\n        //   'path'      => '/index.html',\n        //   'query'     => 'var1=value1',\n        //   'fragment'  => 'anchor'\n        // }\n    });\n\n"
					]
				},
				{
					"kind": "function",
					"name": "format",
					"file": "src/js/Ink/Util/Url/1/lib.js",
					"text": "Formats an URL object into an URL string.",
					"params": [
						{
							"kind": "param",
							"name": "urlObj",
							"isFirstLevel": true,
							"description": "Window.location, a.href, or parseUrl object to format"
						}
					],
					"return": {
						"kind": "return",
						"type": "String",
						"description": "Full URL."
					}
				},
				{
					"kind": "function",
					"name": "currentScriptElement",
					"file": "src/js/Ink/Util/Url/1/lib.js",
					"text": "Gets the last loaded script element",
					"params": [
						{
							"kind": "param",
							"name": "match",
							"type": "String",
							"isOptional": true,
							"isFirstLevel": true,
							"description": "String to match against the script src attribute"
						}
					],
					"return": {
						"kind": "return",
						"type": "DOMElement|Boolean",
						"description": "Returns the <script> DOM Element or false if unable to find it."
					},
					"static": true
				},
				{
					"kind": "function",
					"name": "_debug",
					"file": "src/js/Ink/Util/Url/1/lib.js",
					"text": "Debug function ?",
					"params": [],
					"private": true,
					"static": true
				}
			],
			"attributes": [
				{
					"kind": "attribute",
					"name": "_keyStr",
					"text": "Auxiliary string for encoding",
					"type": "String",
					"private": true
				}
			],
			"uses": [],
			"version": "1"
		},
		{
			"kind": "module",
			"name": "Ink.Util.Validator_1",
			"file": "src/js/Ink/Util/Validator/1/lib.js",
			"classes": [],
			"functions": [
				{
					"kind": "function",
					"name": "createRegExp",
					"file": "src/js/Ink/Util/Validator/1/lib.js",
					"text": "Creates a regular expression for several character groups.",
					"params": [
						{
							"kind": "param",
							"name": "Groups*",
							"isFirstLevel": true,
							"description": "{Object}"
						}
					]
				},
				{
					"kind": "function",
					"name": "checkCharacterGroups",
					"file": "src/js/Ink/Util/Validator/1/lib.js",
					"text": "Checks if a field has the required groups.",
					"params": [
						{
							"kind": "param",
							"name": "s",
							"type": "String",
							"isFirstLevel": true,
							"description": "The validation string"
						},
						{
							"kind": "param",
							"name": "groups",
							"type": "Object",
							"isOptional": true,
							"defaultValue": "{}",
							"isFirstLevel": true,
							"description": "What groups are included. See createRegexp"
						}
					]
				},
				{
					"kind": "function",
					"name": "unicode",
					"file": "src/js/Ink/Util/Validator/1/lib.js",
					"text": "Checks if a field contains unicode printable characters.",
					"params": [
						{
							"kind": "param",
							"name": "s",
							"type": "String",
							"isFirstLevel": true,
							"description": "The validation string"
						},
						{
							"kind": "param",
							"name": "options",
							"type": "Object",
							"isOptional": true,
							"defaultValue": "{}",
							"isFirstLevel": true,
							"description": "Optional configuration object. See createRegexp"
						}
					]
				},
				{
					"kind": "function",
					"name": "latin1",
					"file": "src/js/Ink/Util/Validator/1/lib.js",
					"text": "Checks if a field only contains latin-1 alphanumeric characters. \nTakes options for allowing singleline whitespace, cross-line whitespace and punctuation.",
					"params": [
						{
							"kind": "param",
							"name": "s",
							"type": "String",
							"isFirstLevel": true,
							"description": "The validation string"
						},
						{
							"kind": "param",
							"name": "options",
							"type": "Object",
							"isOptional": true,
							"defaultValue": "{}",
							"isFirstLevel": true,
							"description": "Optional configuration object. See createRegexp"
						}
					]
				},
				{
					"kind": "function",
					"name": "ascii",
					"file": "src/js/Ink/Util/Validator/1/lib.js",
					"text": "Checks if a field only contains only ASCII alphanumeric characters. \nTakes options for allowing singleline whitespace, cross-line whitespace and punctuation.",
					"params": [
						{
							"kind": "param",
							"name": "s",
							"type": "String",
							"isFirstLevel": true,
							"description": "The validation string"
						},
						{
							"kind": "param",
							"name": "options",
							"type": "Object",
							"isOptional": true,
							"defaultValue": "{}",
							"isFirstLevel": true,
							"description": "Optional configuration object. See createRegexp"
						}
					]
				},
				{
					"kind": "function",
					"name": "number",
					"file": "src/js/Ink/Util/Validator/1/lib.js",
					"text": "Checks if a number is a valid",
					"params": [
						{
							"kind": "param",
							"name": "numb",
							"type": "String",
							"isFirstLevel": true,
							"description": "The number"
						},
						{
							"kind": "param",
							"name": "options",
							"type": "Object",
							"isOptional": true,
							"isFirstLevel": true,
							"description": "Further options"
						},
						{
							"kind": "param",
							"name": "options.decimalSep",
							"isOptional": true,
							"defaultValue": "'.'",
							"isFirstLevel": false,
							"description": "Allow decimal separator."
						},
						{
							"kind": "param",
							"name": "options.thousandSep",
							"isOptional": true,
							"defaultValue": "\",\"",
							"isFirstLevel": false,
							"description": "Strip this character from the number."
						},
						{
							"kind": "param",
							"name": "options.negative",
							"isOptional": true,
							"defaultValue": "false",
							"isFirstLevel": false,
							"description": "Allow negative numbers."
						},
						{
							"kind": "param",
							"name": "options.decimalPlaces",
							"isOptional": true,
							"defaultValue": "null",
							"isFirstLevel": false,
							"description": "Maximum number of decimal places. Use `0` for an integer number."
						},
						{
							"kind": "param",
							"name": "options.max",
							"isOptional": true,
							"defaultValue": "null",
							"isFirstLevel": false,
							"description": "Maximum number"
						},
						{
							"kind": "param",
							"name": "options.min",
							"isOptional": true,
							"defaultValue": "null",
							"isFirstLevel": false,
							"description": "Minimum number"
						},
						{
							"kind": "param",
							"name": "options.returnNumber",
							"isOptional": true,
							"defaultValue": "false",
							"isFirstLevel": false,
							"description": "When this option is true, return the number itself when the value is valid."
						}
					]
				},
				{
					"kind": "function",
					"name": "_isLeapYear",
					"file": "src/js/Ink/Util/Validator/1/lib.js",
					"text": "Checks if a year is Leap \"Bissexto\"",
					"params": [
						{
							"kind": "param",
							"name": "year",
							"type": "Number",
							"isFirstLevel": true,
							"description": "Year to be checked"
						}
					],
					"return": {
						"kind": "return",
						"type": "Boolean",
						"description": "True if it is a leap year."
					},
					"private": true,
					"static": true,
					"examples": [
						"\n    Ink.requireModules(['Ink.Util.Validator_1'], function( InkValidator ){\n        console.log( InkValidator._isLeapYear( 2004 ) ); // Result: true\n        console.log( InkValidator._isLeapYear( 2006 ) ); // Result: false\n    });\n"
					]
				},
				{
					"kind": "function",
					"name": "_daysInMonth",
					"file": "src/js/Ink/Util/Validator/1/lib.js",
					"text": "Gets the number of days in a given month of a given year",
					"params": [
						{
							"kind": "param",
							"name": "_m",
							"type": "Number",
							"isFirstLevel": true,
							"description": "Month (1 to 12)"
						},
						{
							"kind": "param",
							"name": "_y",
							"type": "Number",
							"isFirstLevel": true,
							"description": "Year"
						}
					],
					"return": {
						"kind": "return",
						"type": "Number",
						"description": "Returns the number of days in a given month of a given year"
					},
					"private": true,
					"static": true,
					"examples": [
						"\n    Ink.requireModules(['Ink.Util.Validator_1'], function( InkValidator ){\n        console.log( InkValidator._daysInMonth( 2, 2004 ) ); // Result: 29\n        console.log( InkValidator._daysInMonth( 2, 2006 ) ); // Result: 28\n    });\n"
					]
				},
				{
					"kind": "function",
					"name": "_isValidDate",
					"file": "src/js/Ink/Util/Validator/1/lib.js",
					"text": "Checks if a date is valid",
					"params": [
						{
							"kind": "param",
							"name": "year",
							"type": "Number",
							"isFirstLevel": true
						},
						{
							"kind": "param",
							"name": "month",
							"type": "Number",
							"isFirstLevel": true
						},
						{
							"kind": "param",
							"name": "day",
							"type": "Number",
							"isFirstLevel": true
						}
					],
					"return": {
						"kind": "return",
						"type": "Boolean",
						"description": "True if valid"
					},
					"private": true,
					"static": true,
					"examples": [
						"\n    Ink.requireModules(['Ink.Util.Validator_1'], function( InkValidator ){\n        console.log( InkValidator._isValidDate( 2004, 2, 29 ) ); // Result: true\n        console.log( InkValidator._isValidDate( 2006, 2, 29 ) ); // Result: false\n    });\n"
					]
				},
				{
					"kind": "function",
					"name": "mail",
					"file": "src/js/Ink/Util/Validator/1/lib.js",
					"text": "Checks if an email is valid",
					"params": [
						{
							"kind": "param",
							"name": "email",
							"type": "String",
							"isFirstLevel": true
						}
					],
					"return": {
						"kind": "return",
						"type": "Boolean",
						"description": "True if it's valid"
					},
					"static": true,
					"examples": [
						"\n    Ink.requireModules(['Ink.Util.Validator_1'], function( InkValidator ){\n        console.log( InkValidator.email( 'agfsdfgfdsgdsf' ) ); // Result: false\n        console.log( InkValidator.email( 'inkdev\\u0040sapo.pt' ) ); // Result: true (where \\u0040 is at sign)\n    });\n"
					]
				},
				{
					"kind": "function",
					"name": "mail",
					"file": "src/js/Ink/Util/Validator/1/lib.js",
					"text": "Deprecated. Alias for email(). Use it instead.",
					"params": [],
					"static": true,
					"private": true
				},
				{
					"kind": "function",
					"name": "url",
					"file": "src/js/Ink/Util/Validator/1/lib.js",
					"text": "Checks if an url is valid",
					"params": [
						{
							"kind": "param",
							"name": "url",
							"type": "String",
							"isFirstLevel": true,
							"description": "URL to be checked"
						},
						{
							"kind": "param",
							"name": "full",
							"type": "Boolean",
							"isOptional": true,
							"isFirstLevel": true,
							"description": "If true, validates a full URL (one that should start with 'http')"
						}
					],
					"return": {
						"kind": "return",
						"type": "Boolean",
						"description": "True if valid"
					},
					"static": true,
					"examples": [
						"\n    Ink.requireModules(['Ink.Util.Validator_1'], function( InkValidator ){\n        console.log( InkValidator.url( 'www.sapo.pt' ) );                // Result: true\n        console.log( InkValidator.url( 'http://www.sapo.pt', true ) );   // Result: true\n        console.log( InkValidator.url( 'meh' ) );                        // Result: false\n    });\n"
					]
				},
				{
					"kind": "function",
					"name": "isPTPhone",
					"file": "src/js/Ink/Util/Validator/1/lib.js",
					"text": "Checks if a phone is valid in Portugal",
					"params": [
						{
							"kind": "param",
							"name": "phone",
							"type": "Number",
							"isFirstLevel": true,
							"description": "Phone number to be checked"
						}
					],
					"return": {
						"kind": "return",
						"type": "Boolean",
						"description": "True if it's a valid Portuguese Phone"
					},
					"static": true,
					"examples": [
						"\n    Ink.requireModules(['Ink.Util.Validator_1'], function( InkValidator ){\n        console.log( InkValidator.isPTPhone( '213919264' ) );        // Result: true\n        console.log( InkValidator.isPTPhone( '00351213919264' ) );   // Result: true\n        console.log( InkValidator.isPTPhone( '+351213919264' ) );    // Result: true\n        console.log( InkValidator.isPTPhone( '1' ) );                // Result: false\n    });\n"
					]
				},
				{
					"kind": "function",
					"name": "isPortuguesePhone",
					"file": "src/js/Ink/Util/Validator/1/lib.js",
					"text": "Alias function for isPTPhone",
					"params": [
						{
							"kind": "param",
							"name": "phone",
							"type": "Number",
							"isFirstLevel": true,
							"description": "Phone number to be checked"
						}
					],
					"return": {
						"kind": "return",
						"type": "Boolean",
						"description": "True if it's a valid Portuguese Phone"
					},
					"static": true,
					"examples": [
						"\n    Ink.requireModules(['Ink.Util.Validator_1'], function( InkValidator ){\n        console.log( InkValidator.isPortuguesePhone( '213919264' ) );        // Result: true\n        console.log( InkValidator.isPortuguesePhone( '00351213919264' ) );   // Result: true\n        console.log( InkValidator.isPortuguesePhone( '+351213919264' ) );    // Result: true\n        console.log( InkValidator.isPortuguesePhone( '1' ) );                // Result: false\n    });\n"
					]
				},
				{
					"kind": "function",
					"name": "isCVPhone",
					"file": "src/js/Ink/Util/Validator/1/lib.js",
					"text": "Checks if a phone is valid in Cabo Verde",
					"params": [
						{
							"kind": "param",
							"name": "phone",
							"type": "Number",
							"isFirstLevel": true,
							"description": "Phone number to be checked"
						}
					],
					"return": {
						"kind": "return",
						"type": "Boolean",
						"description": "True if it's a valid Cape Verdean Phone"
					},
					"static": true,
					"examples": [
						"\n    Ink.requireModules(['Ink.Util.Validator_1'], function( InkValidator ){\n        console.log( InkValidator.isCVPhone( '2610303' ) );        // Result: true\n        console.log( InkValidator.isCVPhone( '002382610303' ) );   // Result: true\n        console.log( InkValidator.isCVPhone( '+2382610303' ) );    // Result: true\n        console.log( InkValidator.isCVPhone( '1' ) );              // Result: false\n    });\n"
					]
				},
				{
					"kind": "function",
					"name": "isAOPhone",
					"file": "src/js/Ink/Util/Validator/1/lib.js",
					"text": "Checks if a phone is valid in Angola",
					"params": [
						{
							"kind": "param",
							"name": "phone",
							"type": "Number",
							"isFirstLevel": true,
							"description": "Phone number to be checked"
						}
					],
					"return": {
						"kind": "return",
						"type": "Boolean",
						"description": "True if it's a valid Angolan Phone"
					},
					"static": true,
					"examples": [
						"\n    Ink.requireModules(['Ink.Util.Validator_1'], function( InkValidator ){\n        console.log( InkValidator.isAOPhone( '244222396385' ) );     // Result: true\n        console.log( InkValidator.isAOPhone( '00244222396385' ) );   // Result: true\n        console.log( InkValidator.isAOPhone( '+244222396385' ) );    // Result: true\n        console.log( InkValidator.isAOPhone( '1' ) );                // Result: false\n    });\n"
					]
				},
				{
					"kind": "function",
					"name": "isMZPhone",
					"file": "src/js/Ink/Util/Validator/1/lib.js",
					"text": "Checks if a phone is valid in Mozambique",
					"params": [
						{
							"kind": "param",
							"name": "phone",
							"type": "Number",
							"isFirstLevel": true,
							"description": "Phone number to be checked"
						}
					],
					"return": {
						"kind": "return",
						"type": "Boolean",
						"description": "True if it's a valid Mozambican Phone"
					},
					"static": true,
					"examples": [
						"\n    Ink.requireModules(['Ink.Util.Validator_1'], function( InkValidator ){\n        console.log( InkValidator.isMZPhone( '21426861' ) );        // Result: true\n        console.log( InkValidator.isMZPhone( '0025821426861' ) );   // Result: true\n        console.log( InkValidator.isMZPhone( '+25821426861' ) );    // Result: true\n        console.log( InkValidator.isMZPhone( '1' ) );              // Result: false\n    });\n"
					]
				},
				{
					"kind": "function",
					"name": "isTLPhone",
					"file": "src/js/Ink/Util/Validator/1/lib.js",
					"text": "Checks if a phone is valid in Timor",
					"params": [
						{
							"kind": "param",
							"name": "phone",
							"type": "Number",
							"isFirstLevel": true,
							"description": "Phone number to be checked"
						}
					],
					"return": {
						"kind": "return",
						"type": "Boolean",
						"description": "True if it's a valid phone from Timor-Leste"
					},
					"static": true,
					"examples": [
						"\n    Ink.requireModules(['Ink.Util.Validator_1'], function( InkValidator ){\n        console.log( InkValidator.isTLPhone( '6703331234' ) );     // Result: true\n        console.log( InkValidator.isTLPhone( '006703331234' ) );   // Result: true\n        console.log( InkValidator.isTLPhone( '+6703331234' ) );    // Result: true\n        console.log( InkValidator.isTLPhone( '1' ) );              // Result: false\n    });\n"
					]
				},
				{
					"kind": "function",
					"name": "isPhone",
					"file": "src/js/Ink/Util/Validator/1/lib.js",
					"text": "Checks if a number is a phone number.\nThis method validates the number in all country codes available the ones set in the second param",
					"params": [
						{
							"kind": "param",
							"name": "phone",
							"type": "String",
							"isFirstLevel": true,
							"description": "Phone number to validate"
						},
						{
							"kind": "param",
							"name": "countryCode",
							"type": "String|Array",
							"isOptional": true,
							"isFirstLevel": true,
							"description": "Country code or  array of countries to validate"
						}
					],
					"return": {
						"kind": "return",
						"type": "Boolean",
						"description": "True if it's a valid phone in any country available"
					},
					"static": true,
					"examples": [
						"\n    Ink.requireModules(['Ink.Util.Validator_1'], function( InkValidator ){\n        console.log( InkValidator.isPhone( '6703331234' ) );        // Result: true\n    });\n"
					]
				},
				{
					"kind": "function",
					"name": "codPostal",
					"file": "src/js/Ink/Util/Validator/1/lib.js",
					"text": "Validates if a zip code is valid in Portugal",
					"params": [
						{
							"kind": "param",
							"name": "cp1",
							"type": "Number|String",
							"isFirstLevel": true
						},
						{
							"kind": "param",
							"name": "cp2",
							"type": "optional Number|String",
							"isFirstLevel": true
						},
						{
							"kind": "param",
							"name": "returnBothResults",
							"type": "optional Boolean",
							"isFirstLevel": true
						}
					],
					"return": {
						"kind": "return",
						"type": "Boolean",
						"description": "True if it's a valid zip code"
					},
					"static": true,
					"examples": [
						"\n    Ink.requireModules(['Ink.Util.Validator_1'], function( InkValidator ){\n        console.log( InkValidator.codPostal( '1069', '300' ) );        // Result: true\n        console.log( InkValidator.codPostal( '1069', '300', true ) );  // Result: [true, true]\n    });\n\n"
					]
				},
				{
					"kind": "function",
					"name": "isDate",
					"file": "src/js/Ink/Util/Validator/1/lib.js",
					"text": "Checks if a date is valid in a given format",
					"params": [
						{
							"kind": "param",
							"name": "format",
							"type": "String",
							"isFirstLevel": true,
							"description": "Format defined in _dateParsers"
						},
						{
							"kind": "param",
							"name": "dateStr",
							"type": "String",
							"isFirstLevel": true,
							"description": "Date string"
						}
					],
					"return": {
						"kind": "return",
						"type": "Boolean",
						"description": "True if it's a valid date and in the specified format"
					},
					"static": true,
					"examples": [
						"\n    Ink.requireModules(['Ink.Util.Validator_1'], function( InkValidator ){\n        console.log( InkValidator.isDate( 'yyyy-mm-dd', '2012-05-21' ) );        // Result: true\n    });\n"
					]
				},
				{
					"kind": "function",
					"name": "isColor",
					"file": "src/js/Ink/Util/Validator/1/lib.js",
					"text": "Checks if a string is a valid color",
					"params": [
						{
							"kind": "param",
							"name": "str",
							"type": "String",
							"isFirstLevel": true,
							"description": "Color string to be checked"
						}
					],
					"return": {
						"kind": "return",
						"type": "Boolean",
						"description": "True if it's a valid color string"
					},
					"static": true,
					"examples": [
						"\n    Ink.requireModules(['Ink.Util.Validator_1'], function( InkValidator ){\n        console.log( InkValidator.isColor( '#FF00FF' ) );        // Result: true\n        console.log( InkValidator.isColor( 'amdafasfs' ) );      // Result: false\n    });\n"
					]
				},
				{
					"kind": "function",
					"name": "isIP",
					"file": "src/js/Ink/Util/Validator/1/lib.js",
					"text": "Checks if the value is a valid IP.",
					"params": [
						{
							"kind": "param",
							"name": "value",
							"type": "String",
							"isFirstLevel": true,
							"description": "Value to be checked"
						},
						{
							"kind": "param",
							"name": "ipType",
							"type": "String",
							"isFirstLevel": true,
							"description": "Type of IP to be validated. The values are: ipv4, ipv6. By default is ipv4."
						}
					],
					"return": {
						"kind": "return",
						"type": "Boolean",
						"description": "True if the value is a valid IP address. False if not."
					}
				},
				{
					"kind": "function",
					"name": "isCreditCard",
					"file": "src/js/Ink/Util/Validator/1/lib.js",
					"text": "Checks if a number is of a specific credit card type",
					"params": [
						{
							"kind": "param",
							"name": "num",
							"type": "String",
							"isFirstLevel": true,
							"description": "Number to be validates"
						},
						{
							"kind": "param",
							"name": "creditCardType",
							"type": "String|Array",
							"isFirstLevel": true,
							"description": "Credit card type. See _creditCardSpecs for the list of supported values."
						}
					],
					"return": {
						"kind": "return",
						"type": "Boolean"
					}
				}
			],
			"attributes": [
				{
					"kind": "attribute",
					"name": "_countryCodes",
					"text": "List of country codes avaible for the isPhone method",
					"type": "Array",
					"private": true,
					"static": true
				},
				{
					"kind": "attribute",
					"name": "_internacionalPT",
					"text": "International number for portugal",
					"type": "Number",
					"private": true,
					"static": true
				},
				{
					"kind": "attribute",
					"name": "_indicativosPT",
					"text": "List of all portuguese number prefixes",
					"type": "Object",
					"private": true,
					"static": true
				},
				{
					"kind": "attribute",
					"name": "_internacionalCV",
					"text": "International number for Cabo Verde",
					"type": "Number",
					"private": true,
					"static": true
				},
				{
					"kind": "attribute",
					"name": "_indicativosCV",
					"text": "List of all Cabo Verde number prefixes",
					"type": "Object",
					"private": true,
					"static": true
				},
				{
					"kind": "attribute",
					"name": "_internacionalAO",
					"text": "International number for Angola",
					"type": "Number",
					"private": true,
					"static": true
				},
				{
					"kind": "attribute",
					"name": "_indicativosAO",
					"text": "List of all Angola number prefixes",
					"type": "Object",
					"private": true,
					"static": true
				},
				{
					"kind": "attribute",
					"name": "_internacionalMZ",
					"text": "International number for Mozambique",
					"type": "Number",
					"private": true,
					"static": true
				},
				{
					"kind": "attribute",
					"name": "_indicativosMZ",
					"text": "List of all Mozambique number prefixes",
					"type": "Object",
					"private": true,
					"static": true
				},
				{
					"kind": "attribute",
					"name": "_internacionalTL",
					"text": "International number for Timor",
					"type": "Number",
					"private": true,
					"static": true
				},
				{
					"kind": "attribute",
					"name": "_indicativosTL",
					"text": "List of all Timor number prefixes",
					"type": "Object",
					"private": true,
					"static": true
				},
				{
					"kind": "attribute",
					"name": "_characterGroups",
					"text": "Regular expression groups for several groups of characters\n\nhttp://en.wikipedia.org/wiki/C0_Controls_and_Basic_Latin\nhttp://en.wikipedia.org/wiki/Plane_%28Unicode%29#Basic_Multilingual_Plane\nhttp://en.wikipedia.org/wiki/ISO_8859-1",
					"type": "Object",
					"private": true,
					"static": true
				},
				{
					"kind": "attribute",
					"name": "_dateParsers",
					"text": "Object with the date formats available for validation",
					"type": "Object",
					"private": true,
					"static": true
				},
				{
					"kind": "attribute",
					"name": "_creditCardSpecs",
					"text": "Credit Card specifications, to be used in the credit card verification.",
					"type": "Object",
					"private": true
				}
			],
			"uses": [],
			"version": "1"
		}
	],
	"classes": [
		{
			"kind": "class",
			"name": "Ink.UI.TagField",
			"text": "Use this class to have a field where a user can input several tags into a single text field. A good example is allowing the user to describe a blog post or a picture through tags, for later searching.\n\nThe markup is as follows:\n\n          <input class=\"ink-tagfield\" type=\"text\" value=\"initial,value\">\n\nBy applying this UI class to the above input, you get a tag field with the tags \"initial\" and \"value\". The class preserves the original input element. It remains hidden and is updated with new tag information dynamically, so regular HTML form logic still applies.\n\nBelow \"input\" refers to the current value of the input tag (updated as the user enters text, of course), and \"output\" refers to the value which this class writes back to said input tag.",
			"file": "src/js/Ink/UI/TagField/1/lib.js",
			"functions": [
				{
					"kind": "function",
					"name": "TagField",
					"file": "src/js/Ink/UI/TagField/1/lib.js",
					"isConstructor": true,
					"params": [
						{
							"kind": "param",
							"name": "element",
							"type": "String|InputElement",
							"isFirstLevel": true,
							"description": "Selector or DOM Input Element."
						},
						{
							"kind": "param",
							"name": "options",
							"type": "Object",
							"isOptional": true,
							"isFirstLevel": true
						},
						{
							"kind": "param",
							"name": "options.tags",
							"type": "String|Array",
							"isOptional": true,
							"isFirstLevel": false,
							"description": "initial tags in the input"
						},
						{
							"kind": "param",
							"name": "options.allowRepeated",
							"type": "Boolean",
							"isOptional": true,
							"defaultValue": "true",
							"isFirstLevel": false,
							"description": "allow user to input several tags"
						},
						{
							"kind": "param",
							"name": "options.separator",
							"type": "RegExp",
							"isOptional": true,
							"defaultValue": "/[,;(space)]+/g",
							"isFirstLevel": false,
							"description": "Split the input by this RegExp. The default splits by spaces, commas and semicolons"
						},
						{
							"kind": "param",
							"name": "options.outSeparator",
							"type": "String",
							"isOptional": true,
							"defaultValue": "','",
							"isFirstLevel": false,
							"description": "Use this string to separate each tag from the next in the output."
						},
						{
							"kind": "param",
							"name": "options.autoSplit",
							"type": "Boolean",
							"isOptional": true,
							"defaultValue": "true",
							"isFirstLevel": false
						},
						{
							"kind": "param",
							"name": "options.maxTags",
							"type": "Integer",
							"isOptional": true,
							"defaultValue": "-1",
							"isFirstLevel": false,
							"description": "Maximum amount of tags the user can write."
						}
					],
					"examples": [
						"\n"
					]
				},
				{
					"kind": "function",
					"name": "_init",
					"file": "src/js/Ink/UI/TagField/1/lib.js",
					"text": "Init function called by the constructor",
					"params": [],
					"private": true
				},
				{
					"kind": "function",
					"name": "onBackspaceKeyDown",
					"file": "src/js/Ink/UI/TagField/1/lib.js",
					"text": "When the user presses backspace twice on the empty input, we delete the last tag on the field.",
					"params": [],
					"private": true
				}
			],
			"attributes": [],
			"version": "1"
		}
	],
	"functions": [
		{
			"kind": "function",
			"name": "create",
			"file": "src/js/Ink/UI/Upload/1/lib.js",
			"text": "Create new queue list",
			"params": [
				{
					"kind": "param",
					"name": "list",
					"type": "String",
					"isFirstLevel": true,
					"description": "name"
				},
				{
					"kind": "param",
					"name": "function",
					"type": "Function",
					"isFirstLevel": true,
					"description": "to iterate on items"
				}
			],
			"return": {
				"kind": "return",
				"type": "Object",
				"description": "list id"
			}
		},
		{
			"kind": "function",
			"name": "purge",
			"file": "src/js/Ink/UI/Upload/1/lib.js",
			"text": "Delete list",
			"params": [
				{
					"kind": "param",
					"name": "List",
					"type": "String",
					"isFirstLevel": true,
					"description": "name"
				}
			],
			"return": {
				"kind": "return",
				"type": "Object",
				"description": "removed list"
			}
		},
		{
			"kind": "function",
			"name": "add",
			"file": "src/js/Ink/UI/Upload/1/lib.js",
			"text": "add an item to a list",
			"params": [
				{
					"kind": "param",
					"name": "name",
					"type": "String",
					"isFirstLevel": true
				},
				{
					"kind": "param",
					"name": "item",
					"type": "Object",
					"isFirstLevel": true
				}
			],
			"return": {
				"kind": "return",
				"type": "Number",
				"description": "pid"
			}
		},
		{
			"kind": "function",
			"name": "view",
			"file": "src/js/Ink/UI/Upload/1/lib.js",
			"text": "View list",
			"params": [
				{
					"kind": "param",
					"name": "list",
					"type": "Number",
					"isFirstLevel": true,
					"description": "id"
				},
				{
					"kind": "param",
					"name": "process",
					"type": "Number",
					"isFirstLevel": true,
					"description": "id"
				}
			],
			"return": {
				"kind": "return",
				"type": "Object",
				"description": "item"
			}
		},
		{
			"kind": "function",
			"name": "remove",
			"file": "src/js/Ink/UI/Upload/1/lib.js",
			"text": "Remove an item",
			"params": [
				{
					"kind": "param",
					"name": "item",
					"type": "Object",
					"isFirstLevel": true
				}
			],
			"return": {
				"kind": "return",
				"type": "Object|Boolean",
				"description": "removed item or false if not found"
			}
		}
	],
	"attributes": []
}